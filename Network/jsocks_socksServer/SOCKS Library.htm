<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <meta name="GENERATOR" content="Mozilla/4.7 [en]C-CCK-MCD   (Win95; I) [Netscape]">
   <meta name="Author" content="Kirill Kouzoubov">
   <meta name="Description" content="SOCKS Library, written in Java. Supports SOCKSv4 and SOCKSv5 protocols.Can be used in client and server side. It is an Open Source library, distributed under GNU LGPL.">
   <meta name="KeyWords" content="SOCKS Library, SOCKS, SOCKSv4, SOCKSv5, SOCKS4, SOCKS5, Proxy, Proxy server, open source,SOCKS server, library">
   <title>SOCKS Library</title>
</head>
<body text="#000000" bgcolor="#FFFFFF" link="#0000FF" vlink="#800080">

<h1>
SOCKS Library</h1>
This page contains information that might be interesting for developers,
who wish to use SOCKS protocol in applications they are developing, both
client and server side.
<h2>
Why to use it</h2>
There are plenty of reasons for which you might want to use SOCKS library
in your java application. They are generally divided in two parts
<ol>
<li>
You are developing a <a href="#client_app">client application</a>, which
needs to access proxy.</li>

<li>
You are developing a custom <a href="#server_app">Proxy server</a>.</li>
</ol>
<a NAME="client_app"></a>
<h3>
Client Application</h3>
Current version of java has a support for SOCKSv4 proxy, which is probably
enough for most applications, which need to do some networking. Connections
are being done through the proxy or directly depending on the user configurations,
transparently to the java application. But SOCKSv4 has some limitations:
<ol>
<li>
<b>Lack of sufficient authentication.</b></li>

<br>The only authentication SOCKSv4 supports is the authentication based
on Ident protocol. Basically client tells the server who he is, and server
verifies it with the identd daemon running on the client machine. This
technique works fine when proxy is used to let people on local network
have access to the Internet. But it is not suitable when proxy is used
to let people from the outside in.
<li>
<b>Lack of UDP support.</b></li>

<br>SOCKSv4 protocol does not have any UDP support. And currently with
almost all multimedia applications using UDP this might be a serious disadvantage.</ol>
Besides implementation of the SOCKSv4 in Java appears to be not complete
(probably I'm wrong, check with sun). It appears to me that there is no
way to accept a connection from the outside Firewall using Java1.2 ServerSocket.
<p>So if you need your application to be able to
<ol>
<li>
Send and receive datagrams through the firewall.</li>

<li>
Accept connections from hosts behind the firewall.</li>

<li>
Provide non-trivial authentication to the proxy server.</li>

<li>
Ensure secure connection to the proxy server.</li>
</ol>
you might find that you need SOCKSv5 support, and hence this library may
be useful to you. Even though I have forced the advantages of SOCKSv5 protocol,
this library supports SOCKSv4 as well.
<p>Hopefully one day Java will support SOCKSv5 as well, but it's not yet
happened.
<br><a NAME="server_app"></a>
<h3>
Server Application</h3>
If you are developing proxy server which need to support either SOCKSv4
or SOCKSv5 or both, you'll find using this library very time saving. There
are plenty of things to take care about when developing proxy server, protocol
handling is just one part of the problem, which have been solved by this
library, so that you can concentrate on authentication, authorization and
initialization.
<p>There are generally two major reasons for which proxy servers are used:
to let people in, or to let them out, or both. Proxy server is like a door
in the Firewall. Usually you do not care all that much who gets out, but
you should be very careful in deciding who gets in.
<p>SOCKSv5 protocol provides for extendable authentication schemes, which
might be standard or private. And this socks library makes it easy to use
your own implementations of authentication methods. Next step after authentication
is authorization, for which methods are also provided.
<h2>
How to use</h2>
Now as you are convinced in the fact that you'll need to use socks library.
Its time to know how to do so.
<p><u>How to</u> page will cover these issues.
<br>I have just finished redesign and testing. There have been major changes
to the library, mostly due to poor design decisions in the first stage.
Few things that have been changed:
<ul>
<li>
It is now possible to connect through unlimited number of proxies, rather
then just one. That is it is now possible to use proxyA to connect to proxyB
to connect to ... proxyZ to connect to desired host.</li>

<li>
I have previously overlooked UDP handling. It was not possible to perform
authentication specific transformations to UDP data. Now this problem have
been removed.</li>

<li>
Few convenience features have been added.</li>

<li>
Some bugs have been fixed.</li>

<li>
Some restructuring have been done, to yield more convenient package structure.</li>
</ul>
<u>How to</u> page is still yet to come. I haven't had time recently. As
for now, read the documentation pages, they are now <a href="docs/index.html">available
online</a> as well as archived file.
<br>&nbsp;
<br><font size=-1>Back to </font><a href="index.html">SOCKS Proxy</a><font size=-1>
Page.</font>
</body>
</html>
