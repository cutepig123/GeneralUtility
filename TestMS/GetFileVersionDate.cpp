#include <tchar.h>#include <strsafe.h>BOOL GetTimeString(FILETIME const &ftWrite, LPTSTR lpszString, DWORD dwSize){    SYSTEMTIME stUTC, stLocal;    DWORD dwRet;    // Convert the last-write time to local time.    FileTimeToSystemTime(&ftWrite, &stUTC);    SystemTimeToTzSpecificLocalTime(NULL, &stUTC, &stLocal);    // Build a string showing the date and time.    dwRet = StringCchPrintf(lpszString, dwSize,         TEXT("%02d/%02d/%d  %02d:%02d"),        stLocal.wMonth, stLocal.wDay, stLocal.wYear,        stLocal.wHour, stLocal.wMinute);    if( S_OK == dwRet )        return TRUE;    else return FALSE;}BOOL GetFileTime(LPCTSTR pcFile){	HANDLE hFile = CreateFile(pcFile, GENERIC_READ, FILE_SHARE_READ, NULL,        OPEN_EXISTING, 0, NULL);	FILETIME afmTime[3];	VERIFY( GetFileTime(hFile,&afmTime[0],&afmTime[1],&afmTime[2]));		CloseHandle(hFile);	TCHAR	szTime[3][MAX_PATH];	TCHAR	*ppcTime[]={_T("CreationTime"), _T("LastAccessTime"), _T("LastWriteTime")};	for( int i=0; i<3; i++)	{		VERIFY(GetTimeString( afmTime[i], szTime[i], MAX_PATH ));	}	CString sMsg(pcFile);	sMsg += "\r\n";	for( int i=0; i<3; i++)	{		CString sTmp;		sTmp.Format(_T("%s: %s\r\n"), ppcTime[i], szTime[i]);		sMsg += sTmp;	}	MessageBox(0, sMsg,_T("x"),0 );;	return TRUE;}#pragma comment(lib, "version.lib")int GetVersion(LPCTSTR pcFile){    DWORD handle = 0;    DWORD size = GetFileVersionInfoSize(pcFile, &handle);    BYTE* versionInfo = new BYTE[size];    if (!GetFileVersionInfo(pcFile, handle, size, versionInfo))    {    	delete[] versionInfo;    	return -1;    }    // we have version information    UINT	len = 0;    VS_FIXEDFILEINFO*   vsfi = NULL;    VerQueryValue(versionInfo, L"\\", (void**)&vsfi, &len);    WORD fVersion[4], pVersion[4];    fVersion[0] = HIWORD(vsfi->dwFileVersionMS);    fVersion[1] = LOWORD(vsfi->dwFileVersionMS);    fVersion[2] = HIWORD(vsfi->dwFileVersionLS);    fVersion[3] = LOWORD(vsfi->dwFileVersionLS);    pVersion[0] = HIWORD(vsfi->dwProductVersionMS);    pVersion[1] = LOWORD(vsfi->dwProductVersionMS);    pVersion[2] = HIWORD(vsfi->dwProductVersionLS);    pVersion[3] = LOWORD(vsfi->dwProductVersionLS);	CString s;    s.Format(_T("Product: %d.%d.%d.%d File: %d.%d.%d.%d\n"),         pVersion[0], pVersion[1],         pVersion[2], pVersion[3],         fVersion[0], fVersion[1],         fVersion[2], fVersion[3]);	MessageBox(0, s,_T("x"),0 );;    delete[] versionInfo;    return 0;}void test(){	TCHAR acFile[MAX_PATH];	GetModuleFileName(0, acFile, MAX_PATH);	GetFileTime(acFile);	GetVersion(acFile);	return TRUE;  // return TRUE  unless you set the focus to a control}