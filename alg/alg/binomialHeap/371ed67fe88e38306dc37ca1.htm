        <!DOCTYPE html><html><!--STATUS OK--> <head> <meta http-equiv=Content-Type content="text/html; charset=utf-8"> <title> 二项堆的代码实现_云淡风轻_百度空间</title> <link rel="shortcut icon" href="http://hi.bdimg.com/static/qbase/img/mod/16_favicon.ico?v=49f19c7f.ico" type=image/x-icon>   <meta name=keywords content="二项堆的代码实现,算法导论"> <meta name=description content="行到水穷处，坐看云起时……,二项堆的代码实现"><script>window.wpo={start:new Date*1,pid:109,page:'qing'}</script><!--[if IE]><script type="text/javascript">(function(){var b=("abbr,article,aside,audio,canvas,datalist,details,dialog,eventsource,figure,footer,header,hgroup,mark,menu,meter,nav,output,progress,section,time,video").split(","),a=b.length;while(a--){document.createElement(b[a])}})();</script><![endif]--><script fcpcompress>window.qDomain={"qing":"http://hi.baidu.com","static":"http://hi.bdimg.com","passport":"https://passport.baidu.com","portrait":"http://tx.bdimg.com","hiup":"http://hiup.baidu.com","photo":"http://hiphotos.baidu.com","message":"http://msg.baidu.com","friend":"http://frd.baidu.com","mp3":"http://mp3.baidu.com","ting":"http://ting.baidu.com","image":"http://img.baidu.com","qup":"http://hi.baidu.com","www":"http://www.baidu.com"};window.qUserInfo={"userName":"行走在空中","portrait":"566769737377616e6771696e676d04","qingUrl":"\/isswangqing","spaceName":"云淡风轻","right":"0","avatarStatus":"1","flagNeedInvite":"0","flagNotInvited":"0","version":"2"};window.qVisitorInfo={"userName":"","portrait":"","isHost": false,"loginStatus":"not_login","qingUrl":"","right":"0","version":"0"};window.qPageInfo={"pageUrl":"http:\/\/hi.baidu.com\/isswangqing\/item\/371ed67fe88e38306dc37ca1","referUrl":"http:\/\/hi.baidu.com\/isswangqing\/item\/c42e9899ef6b09df7b7f01a1"};window.qUserAvatar={size20:"http://hiphotos.baidu.com/space/scrop=20;q=100/sign=3b4faa72ce1b9d168e99dd3e83e386bf/c8ea15ce36d3d539fb89376e3a87e950342ab0e2.jpg",size40:"http://hiphotos.baidu.com/space/scrop=40;q=100/sign=8392908bfdfaaf5180bdc6e0fc69a0de/c8ea15ce36d3d539fb89376e3a87e950342ab0e2.jpg",size65:"http://hiphotos.baidu.com/space/scrop=65;q=100/sign=b073a2ccf3deb48fff37e68180220c1c/c8ea15ce36d3d539fb89376e3a87e950342ab0e2.jpg",size110:"http://hiphotos.baidu.com/space/scrop=110;q=100/sign=d3d8022e0f2442a7aa50bafaa17e9c7a/c8ea15ce36d3d539fb89376e3a87e950342ab0e2.jpg",size160:"http://hiphotos.baidu.com/space/scrop=160;q=100/sign=d3d8022e0f2442a7aa50bafaa17e9c7d/c8ea15ce36d3d539fb89376e3a87e950342ab0e2.jpg"};window.qVisitorAvatar={size20:"",size40:"",size65:"",size110:"",size160:""};window.qBdsToken="the fisrt two args should be string type:0,1!";window.qErrorInfo={"no":"0","msg":""};window.qServerInfo={"timeStamp":"1341077577"};window.qLongPolling={"url":"http:\/\/m.hi.baidu.com\/i\/msg\/listen"}</script><!--[if (lt IE 8.0)]><link href="http://hi.bdimg.com/static/qbase/css/qbase.css?v=463d0d8f.css" type=text/css rel=stylesheet><![endif]--><!--[if (!IE)|(gte IE 8.0)]><!--><link href="http://hi.bdimg.com/static/qbase/css/qbase_datauri.css?v=1d7bdc2d.css" type=text/css rel=stylesheet><!--<![endif]-->    <!--[if (lt IE 8.0)]><link rel=stylesheet type=text/css href="http://hi.bdimg.com/static/qcomment/css/qcomment.css?v=b14d92dd.css"><![endif]--><!--[if (!IE)|(gte IE 8.0)]><!--><link rel=stylesheet type=text/css href="http://hi.bdimg.com/static/qcomment/css/qcomment_datauri.css?v=9df19318.css"><!--<![endif]-->   <!--[if (lt IE 8.0)]><link type=text/css rel=stylesheet href="http://hi.bdimg.com/static/qhome/css/detail/30001/detail.css?v=f17ee1d0.css"><![endif]--><!--[if (!IE)|(gte IE 8.0)]><!--><link type=text/css rel=stylesheet href="http://hi.bdimg.com/static/qhome/css/detail/30001/detail_datauri.css?v=476ac6ad.css"><!--<![endif]-->  <script src="http://hi.bdimg.com/static/qbase/js/qing/qing.js?v=f02f1bdb.js"></script>  <script>
    /*最终页页面变量*/ 
    window.detailPage = {
        threadId : "371ed67fe88e38306dc37ca1",
        contentType : "text",
        originAuthorName : "",
        originPortrait : "",
        originThreadId : ""       
    }; 
    </script><script>wpo.head=new Date*1;</script> </head> <body>  <header class=mod-topbar id=modTopbar><iframe class=mod-topbar-bgframe></iframe><div class=mod-topbar-pseudo-real><div class="wrapper-box clearfix"><div class=left-box><a href="http://hi.baidu.com" class=logo-box><span id=baiduSpaceLogo class=q-logo></span></a></div><div class=center-box><ul class=q-menubox><li class=q-menuitem><a href="http://hi.baidu.com/tag" >推荐</a></ul></div><div class=right-box><ul class=q-navbox><li class=q-navitem><a href="http://hi.baidu.com/go/login" class=q-goto-login>登录</a><li class="q-navitem q-nav-sp"><span></span><li class=q-navitem><a href="http://hi.baidu.com/go/reg">注册</a> </ul></div></div></div></header>  <section class=mod-page-body> <div class="mod-page-main wordwrap clearfix">  <div class=x-page-container>
    <section class=mod-topspaceinfo><div class=head-topbar></div><div class=container><h1><a class=space-name href="/new/isswangqing">云淡风轻</a></h1><p class=space-description>行到水穷处，坐看云起时……</p></div><div class=head-footer></div></section>    <div class="mod-blogpage-wraper">
        <div class="blog-bg-main-repeat hide"></div>
        <div class="grid-80 mod-blogpage">
            <div class="blog-bg-main hide"></div>
            
        <div class="mod-text-content mod-post-content">   
                      <div class="content-head clearfix">  <div class=content-other-info> <span>2010-11-21 21:51</span> </div>   <h2 class="title content-title">二项堆的代码实现</h2>  </div> <div id=content class="content text-content clearfix"> <p>用Java实现：<p>public class Node {<br /> Node parent;<br /> Node child;<br /> Node sibling;<br /> int key;<br /> int degree;</p><p> public Node(int key) {<br />&nbsp;&nbsp; this.key = key;<br />&nbsp;&nbsp; this.degree = 0;<br />&nbsp;&nbsp; this.child = null;<br />&nbsp;&nbsp; this.parent = null;<br />&nbsp;&nbsp; this.sibling = null;</p><p> }<br />}</p><br />public class BinomialHeap {<br /> public Node head;</p><p> public BinomialHeap() {<br />&nbsp;&nbsp; head = null;<br /> }</p><p> // 寻找最小关键字<br /> public Node min() {<br />&nbsp;&nbsp; Node n = head;<br />&nbsp;&nbsp; Node m = null;<br />&nbsp;&nbsp; int min = head.key;</p><p>&nbsp;&nbsp; while (null != n) {<br />&nbsp;&nbsp;&nbsp; if (min &gt; n.key) {<br />&nbsp;&nbsp;&nbsp;&nbsp; min = n.key;<br />&nbsp;&nbsp;&nbsp;&nbsp; m = n;<br />&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp; n = n.sibling;<br />&nbsp;&nbsp; }</p><p>&nbsp;&nbsp; return m;<br /> }</p><p> // 按度的大小归并两个二项堆<br /> public void merge(BinomialHeap heap) {<br />&nbsp;&nbsp; Node node;<br />&nbsp;&nbsp; Node head1 = this.head;<br />&nbsp;&nbsp; Node head2 = heap.head;</p><p>&nbsp;&nbsp; // 确定head<br />&nbsp;&nbsp; if (head1.degree &lt; head2.degree) {<br />&nbsp;&nbsp;&nbsp; node = head1;<br />&nbsp;&nbsp;&nbsp; head1 = head.sibling;<br />&nbsp;&nbsp; } else {<br />&nbsp;&nbsp;&nbsp; this.head = head2;<br />&nbsp;&nbsp;&nbsp; node = heap.head;<br />&nbsp;&nbsp;&nbsp; head2 = head2.sibling;<br />&nbsp;&nbsp; }</p><p>&nbsp;&nbsp; // 归并二项堆<br />&nbsp;&nbsp; while (head1 != null &amp;&amp; head2 != null) {<br />&nbsp;&nbsp;&nbsp; if (head1.degree &lt; head2.degree) {<br />&nbsp;&nbsp;&nbsp;&nbsp; node.sibling = head1;<br />&nbsp;&nbsp;&nbsp;&nbsp; node = head1;<br />&nbsp;&nbsp;&nbsp;&nbsp; head1 = head1.sibling;<br />&nbsp;&nbsp;&nbsp; } else {<br />&nbsp;&nbsp;&nbsp;&nbsp; node.sibling = head2;<br />&nbsp;&nbsp;&nbsp;&nbsp; node = head2;<br />&nbsp;&nbsp;&nbsp;&nbsp; head2 = head2.sibling;<br />&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp; }</p><p>&nbsp;&nbsp; if (head1 == null) {<br />&nbsp;&nbsp;&nbsp; node.sibling = head2;<br />&nbsp;&nbsp; } else {<br />&nbsp;&nbsp;&nbsp; node.sibling = head1;<br />&nbsp;&nbsp; }<br /> }</p><p> // 合并二叉树<br /> public void link(Node big, Node small) {<br />&nbsp;&nbsp; big.parent = small;<br />&nbsp;&nbsp; big.sibling = small.child;<br />&nbsp;&nbsp; small.child = big;<br />&nbsp;&nbsp; small.degree++;<br /> }</p><p> // 合并二项堆(把this和heap合并为一个新的this)<br /> public void union(BinomialHeap heap) {<br />&nbsp;&nbsp; // 处理空值的情况<br />&nbsp;&nbsp; if (null == heap.head) {<br />&nbsp;&nbsp;&nbsp; return;<br />&nbsp;&nbsp; }<br />&nbsp;&nbsp; if (null == this.head) {<br />&nbsp;&nbsp;&nbsp; this.head = heap.head;<br />&nbsp;&nbsp;&nbsp; return;<br />&nbsp;&nbsp; }</p><p>&nbsp;&nbsp; // 没有空值开始合并<br />&nbsp;&nbsp; merge(heap);</p><p>&nbsp;&nbsp; Node pre = null;<br />&nbsp;&nbsp; Node x = this.head;<br />&nbsp;&nbsp; Node next = x.sibling;</p><p>&nbsp;&nbsp; while (null != next) {<br />&nbsp;&nbsp;&nbsp; if ((x.degree != next.degree)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; || (null != next.sibling &amp;&amp; next.sibling.degree == x.degree)) {<br />&nbsp;&nbsp;&nbsp;&nbsp; pre = x;<br />&nbsp;&nbsp;&nbsp;&nbsp; x = next;<br />&nbsp;&nbsp;&nbsp; } else if (x.key &lt;= next.key) {<br />&nbsp;&nbsp;&nbsp;&nbsp; x.sibling = next.sibling;<br />&nbsp;&nbsp;&nbsp;&nbsp; link(next, x);<br />&nbsp;&nbsp;&nbsp; } else {<br />&nbsp;&nbsp;&nbsp;&nbsp; if (null == pre) {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.head = next;<br />&nbsp;&nbsp;&nbsp;&nbsp; } else {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pre.sibling = next;<br />&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp; link(x, next);<br />&nbsp;&nbsp;&nbsp;&nbsp; x = next;<br />&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp; next = x.sibling;<br />&nbsp;&nbsp; }<br /> }</p><p> // 插入新结点<br /> public void insert(int key) {<br />&nbsp;&nbsp; Node node = new Node(key);<br />&nbsp;&nbsp; BinomialHeap h = new BinomialHeap();<br />&nbsp;&nbsp; h.head = node;<br />&nbsp;&nbsp; union(h);<br /> }</p><p> // 查找某结点<br /> public Node find(int key, Node node) {<br />&nbsp;&nbsp; if (null == node) {<br />&nbsp;&nbsp;&nbsp; return null;<br />&nbsp;&nbsp; }<br />&nbsp;&nbsp; if (key == node.key) {<br />&nbsp;&nbsp;&nbsp; return node;<br />&nbsp;&nbsp; }<br />&nbsp;&nbsp; Node n1 = find(key, node.sibling);<br />&nbsp;&nbsp; Node n2 = find(key, node.child);<br />&nbsp;&nbsp; if (n1 != null || n2 != null) {<br />&nbsp;&nbsp;&nbsp; if (n1 != null) {<br />&nbsp;&nbsp;&nbsp;&nbsp; return n1;<br />&nbsp;&nbsp;&nbsp; } else {<br />&nbsp;&nbsp;&nbsp;&nbsp; return n2;<br />&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp; } else {<br />&nbsp;&nbsp;&nbsp; return null;<br />&nbsp;&nbsp; }<br /> }</p><p> // 抽取关键字最小的结点<br /> public void extract_min() {<br />&nbsp;&nbsp; Node min = min();<br />&nbsp;&nbsp; Node premin = head;</p><p>&nbsp;&nbsp; // 把最小值所在的二项树独立出来<br />&nbsp;&nbsp; if (min != head) {<br />&nbsp;&nbsp;&nbsp; while (premin.sibling != min) {<br />&nbsp;&nbsp;&nbsp;&nbsp; premin = premin.sibling;<br />&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp; premin.sibling = min.sibling;<br />&nbsp;&nbsp; } else {<br />&nbsp;&nbsp;&nbsp; head = head.sibling;<br />&nbsp;&nbsp; }<br />&nbsp;&nbsp; min.sibling = null;</p><p>&nbsp;&nbsp; // 把最小值所在的二项树重新组织成二项堆<br />&nbsp;&nbsp; BinomialHeap bh = new BinomialHeap();</p><p>&nbsp;&nbsp; // 让min脱离出来<br />&nbsp;&nbsp; Node child = min.child;<br />&nbsp;&nbsp; child.parent = null;<br />&nbsp;&nbsp; min.child = null;</p><p>&nbsp;&nbsp; // 反转min的孩子使之成为新的二项堆(这也是反转单向链表的一般方法)<br />&nbsp;&nbsp; Node pre, cur, ne;<br />&nbsp;&nbsp; pre = child;<br />&nbsp;&nbsp; cur = child.sibling;<br />&nbsp;&nbsp; pre.sibling = null;<br />&nbsp;&nbsp; while (cur != null) {<br />&nbsp;&nbsp;&nbsp; ne = cur.sibling;<br />&nbsp;&nbsp;&nbsp; cur.parent = null;<br />&nbsp;&nbsp;&nbsp; cur.sibling = pre;<br />&nbsp;&nbsp;&nbsp; pre = cur;<br />&nbsp;&nbsp;&nbsp; cur = ne;<br />&nbsp;&nbsp; }<br />&nbsp;&nbsp; bh.head = pre;</p><p>&nbsp;&nbsp; // 分离出来的新二项堆与原来的合并<br />&nbsp;&nbsp; union(bh);<br /> }</p><p> // 减小某结点的值<br /> public void decrease_key(int key, int nkey) {<br />&nbsp;&nbsp; if (nkey &gt; key) {<br />&nbsp;&nbsp;&nbsp; System.out.print(&quot;error,输入的数比原结点的值大\n&quot;);<br />&nbsp;&nbsp;&nbsp; return;<br />&nbsp;&nbsp; } else {<br />&nbsp;&nbsp;&nbsp; Node n = find(key, head);<br />&nbsp;&nbsp;&nbsp; if (n == null) {<br />&nbsp;&nbsp;&nbsp;&nbsp; System.out.print(&quot;结点不存在\n&quot;);<br />&nbsp;&nbsp;&nbsp;&nbsp; return;<br />&nbsp;&nbsp;&nbsp; } else {<br />&nbsp;&nbsp;&nbsp;&nbsp; n.key = nkey;<br />&nbsp;&nbsp;&nbsp;&nbsp; Node nparent = n.parent;<br />&nbsp;&nbsp;&nbsp;&nbsp; while (nparent != null &amp;&amp; n.key &lt; nparent.key) {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int temp = n.key;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; n.key = nparent.key;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; nparent.key = temp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; n = nparent;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; nparent = nparent.parent;<br />&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp; }<br /> }</p><p> // 删除结点<br /> public void delete(int key) {<br />&nbsp;&nbsp; Node n = find(key, head);<br />&nbsp;&nbsp; if (n == null) {<br />&nbsp;&nbsp;&nbsp; System.out.print(&quot;结点不存在\n&quot;);<br />&nbsp;&nbsp;&nbsp; return;<br />&nbsp;&nbsp; } else {<br />&nbsp;&nbsp;&nbsp; decrease_key(key, -Integer.MAX_VALUE);<br />&nbsp;&nbsp;&nbsp; extract_min();<br />&nbsp;&nbsp; }<br /> }</p><p> // 遍历二项堆<br /> public void traversal(Node node) {<br />&nbsp;&nbsp; if (null == node) {<br />&nbsp;&nbsp;&nbsp; return;<br />&nbsp;&nbsp; }<br />&nbsp;&nbsp; System.out.print(node.key + &quot;,&quot;);<br />&nbsp;&nbsp; traversal(node.sibling);<br />&nbsp;&nbsp; traversal(node.child);<br /> }</p><p> public static void main(String[] args) {<br />&nbsp;&nbsp; int[] E = { 0, 12, 90, 1, 85, 12, 3, 13, 49, 55, 10, 3, 31, 97, 19, 93,<br />&nbsp;&nbsp;&nbsp;&nbsp; 41, 55, 56, 82, 2, };<br />&nbsp;&nbsp; BinomialHeap heap = new BinomialHeap();<br />&nbsp;&nbsp;<br />&nbsp;&nbsp; // 建立二项堆<br />&nbsp;&nbsp; for (int i = 0; i &lt; E.length; i++) {<br />&nbsp;&nbsp;&nbsp; heap.insert(E[i]);<br />&nbsp;&nbsp; }<br />&nbsp;&nbsp; // 遍历<br />&nbsp;&nbsp; heap.traversal(heap.head);<br />&nbsp;&nbsp;<br />&nbsp;&nbsp; // 查找<br />&nbsp;&nbsp; Node n = heap.find(87, heap.head);<br />&nbsp;&nbsp; System.out.println();<br />&nbsp;&nbsp; if (null == n) {<br />&nbsp;&nbsp;&nbsp; System.out.print(&quot;结点不存在\n&quot;);<br />&nbsp;&nbsp; } else<br />&nbsp;&nbsp;&nbsp; System.out.print(&quot;要找的结点值为&quot; + n.key + &quot;\n&quot;);<br />&nbsp;&nbsp;<br />&nbsp;&nbsp; // 输出最小值<br />&nbsp;&nbsp; System.out.println(&quot;最小值为：&quot; + heap.min().key);<br />&nbsp;&nbsp;<br />&nbsp;&nbsp; // 删除结点<br />&nbsp;&nbsp; heap.delete(19);<br />&nbsp;&nbsp;<br />&nbsp;&nbsp; heap.traversal(heap.head);<br /> }<br />}<br /></p> </div>   <div class="mod-post-info clearfix"> <div class="tag-box clearfix">  <a class=tag href="/tag/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA/feeds">#算法导论</a>  </div> <div class=op-box> <span class=pv>浏览(18)</span><a class=comment-bnt id=commentBnt href="#" onclick="return false">评论<span class=comment-nub>(2)</span></a><a href="#" id=shareBnt onclick="return false" class=share-bnt>转载<span id=shareNub class=share-nub></span></a> </div></div>              </div>
    
            <div class="mod-share-detail" id="shareDetail" style="display:none"></div>
            
            <div class="mod-detail-pager clearfix">
                                    <div class="detail-nav-pre">
                       <a href="http://hi.baidu.com/isswangqing/item/c42e9899ef6b09df7b7f01a1" hidefocus title="上一篇"></a>
                    </div>
                                                    <div class="detail-nav-next">
                        <a  href="http://hi.baidu.com/isswangqing/item/a32210f4d0caa329743c4cbc" hidefocus title="下一篇"></a>
                    </div>
                            </div>
                            <div id="commentDetail" class="mod-comment-detail clearfix">
                    <div class="comment-title">评论</div>
                    <div class="comment-content"></div>
                </div>
                    </div>
    </div>
 </div> </div> </section>  <footer class=mod-footer><div class="clearfix hidden-box"></div><div class=footer-box><div class=inner-box><a href="http://hi.baidu.com/go/show/introduce" target=_blank>帮助中心</a><span>&nbsp;|&nbsp;</span><a href="http://tieba.baidu.com/f?kw=%B0%D9%B6%C8%BF%D5%BC%E4&fr=wwwt" target=_blank>空间客服</a><span>&nbsp;|&nbsp;</span><a href=http://tousu.baidu.com/hi/add target=_blank>投诉中心</a><span>&nbsp;|&nbsp;</span><a href=http://www.baidu.com/search/hi_contract.html target=_blank>空间协议</a></div><div class=copy-box>&copy;2012&nbsp;Baidu</div></div></footer>  <script src="http://hi.bdimg.com/static/qbase/js/mod/mod_foot.js?v=5c26d90d.js"></script>     <script fcpcompress>qext.stat.ns('m_20120425_30001');</script> 
    <script src="http://hi.bdimg.com/static/qcomment/js/qcmt_import.js?v=4e210ca1.js"></script>    <script src="http://hi.bdimg.com/static/qhome/js/detail/20001/detail.js?v=e9ef32e2.js"></script>
        <script type="text/javascript" id="bdshare_js" data="type=slide&amp;mini=1&amp;img=4&amp;uid=713670" ></script>
    <script type="text/javascript" id="bdshell_js"></script>
    <script type="text/javascript">
        var bds_config = {'bdTop':240};
                    var all_img = qing.g('content').getElementsByTagName('img');
            if(all_img.length>0){
                bds_config.bdPic = all_img[0].src;
            }
                document.getElementById("bdshell_js").src = "http://bdimg.share.baidu.com/static/js/shell_v2.js?v=40937918.js?cdnversion=" + new Date().getHours();
    </script>
     <script>wpo.tti=new Date*1;</script><script>document.write(unescape("%3Cscript src='http://hm.baidu.com/h.js%3F8c869b543955d43e496c2efee5b55823' type='text/javascript'%3E%3C/script%3E"));</script>