<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>

<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<title>斐波那契堆(Fibonacci heaps) | 酷~行天下</title>
<meta name="copyright" content="design by huanjue" />
<meta name="keyword" content="酷~行天下" />
<meta name="description" content="斐波那契堆(Fibonacci heaps)" />
<link rel="stylesheet" href="http://mindlee.net/wp-content/themes/huanjue2.1/style.css" type="text/css" media="screen" />
<link rel="alternate" type="application/rss+xml" title="酷~行天下 RSS Feed" href="http://mindlee.net/feed/" />
<link rel="pingback" href="http://mindlee.net/xmlrpc.php" />
<link rel="stylesheet" href="http://mindlee.net/wp-content/themes/huanjue2.1/pagenavi-css.css" type="text/css" media="screen" />
	<link rel='archives' title='2012 年四月' href='http://mindlee.net/2012/04/' />
	<link rel='archives' title='2012 年二月' href='http://mindlee.net/2012/02/' />
	<link rel='archives' title='2012 年一月' href='http://mindlee.net/2012/01/' />
	<link rel='archives' title='2011 年十二月' href='http://mindlee.net/2011/12/' />
	<link rel='archives' title='2011 年十一月' href='http://mindlee.net/2011/11/' />
	<link rel='archives' title='2011 年十月' href='http://mindlee.net/2011/10/' />
	<link rel='archives' title='2011 年九月' href='http://mindlee.net/2011/09/' />
	<link rel='archives' title='2011 年八月' href='http://mindlee.net/2011/08/' />
	<link rel='archives' title='2011 年七月' href='http://mindlee.net/2011/07/' />
	<link rel='archives' title='2011 年六月' href='http://mindlee.net/2011/06/' />
	<link rel='archives' title='2011 年五月' href='http://mindlee.net/2011/05/' />
	<link rel='archives' title='2011 年四月' href='http://mindlee.net/2011/04/' />
	<link rel='archives' title='2011 年三月' href='http://mindlee.net/2011/03/' />
	<link rel='archives' title='2011 年二月' href='http://mindlee.net/2011/02/' />
<script type="text/javascript" src="http://mindlee.net/wp-content/themes/huanjue2.1/jquery.min.js"></script>
<script type="text/javascript" src="http://mindlee.net/wp-content/themes/huanjue2.1/comments-ajax.js"></script>
<link rel="alternate" type="application/rss+xml" title="酷~行天下 &raquo; 斐波那契堆(Fibonacci heaps) 评论 feed" href="http://mindlee.net/2011/09/29/fibonacci-heaps/feed/" />
<link rel='stylesheet' id='wp-pagenavi-css'  href='http://mindlee.net/wp-content/themes/huanjue2.1/pagenavi-css.css?ver=2.70' type='text/css' media='all' />
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://mindlee.net/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://mindlee.net/wp-includes/wlwmanifest.xml" /> 
<link rel='prev' title='二项堆(Binomial Heaps)' href='http://mindlee.net/2011/09/26/binomial-heaps/' />
<link rel='next' title='国庆出行' href='http://mindlee.net/2011/10/10/national-day-travel/' />
<meta name="generator" content="WordPress 3.3.1" />
<link rel='shortlink' href='http://mindlee.net/?p=674' />

<!-- All in One SEO Pack 1.6.14.5 by Michael Torbert of Semper Fi Web Design[249,306] -->
<meta name="description" content="对于斐波那契堆上的各种可合并操作，关键思想是尽可能久地将工作推后。例如，当向斐波那契堆中插入新结点活合并连个斐波那契堆时，并不去合并树，而是将这个工作留给EXTRACT-MIN操作。" />
<meta name="keywords" content="斐波那契堆,fibonacci heaps,级联剪切,级联切断,级联剪枝,堆,数据结构,笔记,算法,算法导论,算法学习" />
<link rel="canonical" href="http://mindlee.net/2011/09/29/fibonacci-heaps/" />
<!-- /all in one seo pack -->
<script type="text/javascript" src="http://mindlee.net/wp-content/plugins/audio-player/assets/audio-player.js?ver=2.0.4.1"></script>
<script type="text/javascript">AudioPlayer.setup("http://mindlee.net/wp-content/plugins/audio-player/assets/player.swf?ver=2.0.4.1", {width:"290",animation:"yes",encode:"yes",initialvolume:"60",remaining:"yes",noinfo:"no",buffer:"5",checkpolicy:"no",rtl:"no",bg:"E5E5E5",text:"333333",leftbg:"CCCCCC",lefticon:"333333",volslider:"666666",voltrack:"FFFFFF",rightbg:"B4B4B4",rightbghover:"999999",righticon:"333333",righticonhover:"FFFFFF",track:"FFFFFF",loader:"009900",border:"CCCCCC",tracker:"DDDDDD",skip:"666666",pagebg:"FFFFFF",transparentpagebg:"yes"});</script>
	<style type="text/css">.recentcomments a{display:inline !important;padding:0 !important;margin:0 !important;}</style>
<meta id="syntaxhighlighteranchor" name="syntaxhighlighter-version" content="3.1.3" />
</head>
<body>
<div id="wrap">
<div id="header">
  <div class="logo">
    <h1 ><a href="http://mindlee.net/">
      酷~行天下      </a></h1>
    <h2 class="description">
      MindLee.net | 一个菜鸟的学习成长博客，记录与Code有关的人生和梦想！    </h2>
  </div>
  <div  class="toplink">
    <ul>
      <li> <a title="Home" href="http://mindlee.net/">首 页</a> </li>
      <li class="page_item page-item-994"><a href="http://mindlee.net/my-books/">读书</a></li>
<li class="page_item page-item-1000"><a href="http://mindlee.net/my-moives/">电影</a></li>
<li class="page_item page-item-2"><a href="http://mindlee.net/about-me/">关于我</a></li>
<li class="page_item page-item-69"><a href="http://mindlee.net/leave-word/">留言板</a></li>
 
<!-- Feedsky FEED发布代码开始 -->
<!-- FEED自动发现标记开始 -->
<link title="RSS 2.0" type="application/rss+xml" href="http://feed.feedsky.com/mindlee" rel="alternate" />
<!-- FEED自动发现标记结束 -->


<script language="javascript"><!-- 
main_sub="c1s17d";
more_subs="";
is_new="yes";
--> </script>
<script language="javascript" src="http://www.feedsky.com/jsout/publishlist_v2.js?burl=mindlee&out_html=true"></script>
<!-- Feedsky FEED发布代码结束 -->
    </ul>
  </div>
<div id="nav">
<ul id="menu" class="menu"><li id="menu-item-569" class="menu-item menu-item-type-taxonomy menu-item-object-category current-post-ancestor current-menu-parent current-post-parent menu-item-569"><a href="http://mindlee.net/category/algorithm-learning/"><span>算法学习</span></a></li>
<li id="menu-item-983" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-983"><a href="http://mindlee.net/category/technology-enlightenment/"><span>技术启蒙</span></a></li>
<li id="menu-item-8" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-8"><a href="http://mindlee.net/category/lets-go-on-a-trip/"><span>出去走走</span></a></li>
<li id="menu-item-9" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-9"><a href="http://mindlee.net/category/sub-talking/"><span>闲心碎语</span></a></li>
<li id="menu-item-72" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-72"><a href="http://mindlee.net/leave-word/"><span>留言板</span></a></li>
</ul></div></div>

<div id="main">

<div id="content">

<div id="home_banner">
<div class="demo">
<div class="num"><a class="cur">1</a><a>2</a><a>3</a></div>
<ul>
<li style="display:block;"><a href="#" target="_blank"><img src="http://mindlee.net/wp-content/themes/huanjue2.1/images/banner01.jpg" /></a></li><li><a href="#"  target="_blank"><img src="http://mindlee.net/wp-content/themes/huanjue2.1/images/banner02.jpg"  /></a></li><li><a href="#"  target="_blank"><img src="http://mindlee.net/wp-content/themes/huanjue2.1/images/banner03.jpg"  /></a></li>
</ul>
</div>
<script type="text/javascript">
$(function(){
var sw = 0;
$(".demo .num a").mouseover(function(){
sw = $(".num a").index(this);
myShow(sw);
});
function myShow(i){
$(".demo .num a").eq(i).addClass("cur").siblings("a").removeClass("cur");
$(".demo ul li").eq(i).stop(true,true).fadeIn(600).siblings("li").fadeOut(600);
}
//滑入停止动画，滑出开始动画
$(".demo").hover(function(){
if(myTime){
clearInterval(myTime);
}
},function(){
myTime = setInterval(function(){
myShow(sw)
sw++;
if(sw==3){sw=0;}
} , 3500);
});
//自动开始
var myTime = setInterval(function(){
myShow(sw)
sw++;
if(sw==3){sw=0;}
} , 3500);
})
</script>
</div>

<div class="content_top"></div>

<div class="content_center">

 
<div class="post-674 post type-post status-publish format-standard hentry category-algorithm-learning tag-heap tag-data-structure tag-notes tag-algorithm tag-introduction-to-algorithms" id="post-674">

<div class="content"> 

<h2><a href="http://mindlee.net/2011/09/29/fibonacci-heaps/" rel="bookmark">斐波那契堆(Fibonacci heaps)</a></h2>

<div class="meta"><span class="tag">分类：<a href="http://mindlee.net/category/algorithm-learning/" title="查看 算法学习 的全部文章" rel="category tag">算法学习</a> ｜ 作者：酷~行天下 ｜ 发表于2011/09/29</span><span class="time"> <a href="http://mindlee.net/2011/09/29/fibonacci-heaps/#comments" title="斐波那契堆(Fibonacci heaps) 上的评论">9条评论</a> 2,025 views </span></div>

<p><font face="微软雅黑"><font size="2"><font color="#000000">&#160;&#160;&#160;&#160; 斐波那契堆同二项堆一样,也是一种可合并堆。斐波那契堆的优势是：不涉及删除元素的操作仅需要O（1）的平摊运行时间（关于平摊分析的知识建议看《算法导论》第17章）。和二项堆一样，斐波那契堆由一组树构成。这种堆松散地基于二项堆，说松散是因为：如果不对斐波那契堆做任何DECREASE-KEY 或 DELETE 操作，则堆中每棵树就和<a href="http://mindlee.net/2011/09/26/binomial-heaps/" target="_blank"><u>二项树</u></a>一样；但是如果执行这两种操作，在一些状态下必须要破坏二项树的特征，比如DECREASE-KEY或DELETE 后，有的树高为k，但是结点个数却少于2<sup>k</sup>。这种情况下，堆中的树不是二项树。</font></font></font></p>
<p><font face="微软雅黑"><font color="#000000" size="2">&#160;&#160;&#160;&#160; 与二项堆相比，斐波那契堆同样是由一组最小堆有序树构成，但是斐波那契堆中的树都是有根而无序的，也就是说，单独的树满足最小堆特性，但是堆内树与树之间是无序的，如下图。</font></font></p>
<p><font color="#000000" size="2" face="微软雅黑">&#160;&#160;&#160;&#160; 对于斐波那契堆上的各种可合并操作，关键思想是尽可能久地<font style="background-color: #ffc000"></font></font><font size="2" face="微软雅黑"><font color="#ed6d10">将工作推后</font></font><font color="#000000" size="2" face="微软雅黑"><font style="background-color: #ffc000"></font>。例如，当向斐波那契堆中插入新结点或合并两个斐波那契堆时，并不去合并树，而是将这个工作留给EXTRACT-MIN操作。</font></p>
<p><a href="http://mindlee.net/wp-content/uploads/2011/09/FibHeapPic.jpg"><img class="aligncenter size-full wp-image-675" title="FibHeapPic" alt="" src="http://mindlee.net/wp-content/uploads/2011/09/FibHeapPic.jpg" width="617" height="440" /></a> </p>
<p><font color="#009085" size="4" face="微软雅黑"><strong>一、每个结点x的域：</strong></font></p>
<h6><font color="#000000" size="2" face="微软雅黑"><font style="font-weight: normal">1） 父节点p[x]</font></font></h6>
<h6><font color="#000000" size="2" face="微软雅黑"><font style="font-weight: normal">2） 指向任一子女的指针child[x]——结点x的子女被链接成一个<font style="background-color: #ffc000"></font></font></font><font size="2" face="微软雅黑"><font style="font-weight: normal"><font color="#ed6d10">环形双链表</font></font></font><font color="#000000" size="2" face="微软雅黑"><font style="font-weight: normal"><font style="background-color: #ffc000"></font>，称为x的子女表</font></font></h6>
<h6><font color="#000000" size="2" face="微软雅黑"><font style="font-weight: normal">3） 左兄弟left[x]</font></font></h6>
<h6><font color="#000000" size="2" face="微软雅黑"><font style="font-weight: normal">4） 右兄弟right[x]——当left[x] = right[x] = x时，说明x是独子。</font></font></h6>
<h6><font color="#000000" size="2" face="微软雅黑"><font style="font-weight: normal">5） 子女的个数degree[x]</font></font></h6>
<h6><font color="#000000" size="2" face="微软雅黑"><font style="font-weight: normal">6） 布尔值域mark[x]——标记是否失去了一个孩子</font></font></h6>
<p><font size="2" face="微软雅黑"><font color="#000000"><font style="background-color: #ffc000"></font></font></font><strong><font size="2" face="微软雅黑"><font color="#ed6d10">结点ADT:</font></font><font size="2" face="微软雅黑"><font color="#000000"></font></font></strong></p>
<pre class="brush: cpp; light: false; title: + expand source(双击可全选代码); toolbar: true; notranslate" title="+ expand source(双击可全选代码)">
//斐波那契结点ADT
struct FibonacciHeapNode {
	int key;       //结点
	int degree;    //度
	FibonacciHeapNode * left;  //左兄弟
	FibonacciHeapNode * right; //右兄弟
	FibonacciHeapNode * parent; //父结点
	FibonacciHeapNode * child;  //第一个孩子结点
	bool marked;           //是否被删除第1个孩子
};
typedef FibonacciHeapNode FibNode;
</pre>
<p><font color="#009085" size="4" face="微软雅黑"><strong>二、堆结构ADT：</strong></font></p>
<p><font color="#000000" face="微软雅黑">&#160;&#160;&#160;&#160; 对于一个给定的斐波那契堆H，可以通过指向包含最小关键字的树根的指针min[H]来访问，这个结点被称为斐波那契堆中的最小结点。如果一个斐波那契堆H是空的，则min[H] = NIL. 在一个斐波那契堆中，所有树的根都通过left和right指针链接成一个环形的双链表，称为堆的根表。于是，指针min[H]就指向根表中具有最小关键字的结点。</font></p>
<p><font color="#ed6d10" face="微软雅黑"><strong>堆结构ADT：</strong></font></p>
<pre class="brush: cpp; light: false; title: + expand source(双击可全选代码); toolbar: true; notranslate" title="+ expand source(双击可全选代码)">
//斐波那契堆ADT
struct FibonacciHeap {
	int keyNum;   //堆中结点个数
	FibonacciHeapNode * min;//最小堆，根结点
	int maxNumOfDegree;   //最大度
	FibonacciHeapNode * * cons;//指向最大度的内存区域
};

typedef FibonacciHeap FibHeap;
</pre>
<p><font color="#009085" size="4" face="微软雅黑"><strong>三、创建一个新的斐波那契堆</strong></font></p>
<p><font color="#000000" size="2" face="微软雅黑">&#160;&#160;&#160;&#160; 创建一个空的斐波那契堆，过程MAKE-FIB-HEAP 分配并返回一个斐波那契堆对象H；</font></p>
<pre class="brush: cpp; light: false; title: + expand source(双击可全选代码); toolbar: true; notranslate" title="+ expand source(双击可全选代码)">
//初始化一个空的Fibonacci Heap
FibHeap * FibHeapMake() {
	FibHeap * heap = NULL;
	heap = (FibHeap *) malloc(sizeof(FibHeap));
	if (NULL == heap) {
		puts(&quot;Out of Space!!&quot;);
		exit(1);
	}
	memset(heap, 0, sizeof(FibHeap));
	return heap;
}

//初始化结点x
FibNode * FibHeapNodeMake() {
	FibNode * x = NULL;
	x = (FibNode *) malloc(sizeof(FibNode));
	if (NULL == x) {
		puts(&quot;Out of Space!!&quot;);
		exit(1);
	}
	memset(x, 0, sizeof(FibNode));
	x-&gt;left = x-&gt;right = x;
	return x;
}
</pre>
<p><font color="#009085" size="4" face="微软雅黑"><strong>四、插入一个结点</strong></font></p>
<p><font color="#000000" size="2" face="微软雅黑">&#160;&#160;&#160;&#160; 简单说就是生成一个结点x，对结点的各域初始化，赋值，然后构造自身的环形双向链表后，将x加入H的<font style="background-color: #ffc000"></font></font><font size="2" face="微软雅黑"><font color="#ed6d10">根表</font></font><font color="#000000" size="2" face="微软雅黑"><font style="background-color: #ffc000"></font>中。 也就是说，结点x 成为一棵单结点的最小堆有序树，同时就是斐波那契堆中一棵无序二项树。&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; </font><font color="#000000" size="2" face="微软雅黑">&#160;&#160;&#160;&#160;&#160; 伪代码：</font></p>
<h6>FIB-HEAP-INSERT(H, x)</h6>
<h6>1&#160; degree[x] ← 0</h6>
<h6>2&#160; p[x] ← NIL</h6>
<h6>3&#160; child[x] ← NIL</h6>
<h6>4&#160; left[x] ← x</h6>
<h6>5&#160; right[x] ← x</h6>
<h6>6&#160; mark[x] ← FALSE</h6>
<h6>7&#160; concatenate the root list containing x with root list H</h6>
<h6>8&#160; if min[H] = NIL or key[x] &lt; key[min[H]]</h6>
<h6>9&#160;&#160;&#160;&#160; then min[H] ← x</h6>
<h6>10&#160; n[H] ← n[H] + 1</h6>
<p><font color="#000000" size="2" face="微软雅黑">&#160;&#160;&#160;&#160; 如图是将关键字为21的结点插入斐波那契堆。该结点自成一棵最小堆有序树，从而被加入到根表中，成为根的左兄弟。</font></p>
<p><img src="http://mindlee.net/wp-content/uploads/2011/09/FibHeapInsertPic.jpg" /></p>
<pre class="brush: cpp; light: false; title: + expand source(双击可全选代码); toolbar: true; notranslate" title="+ expand source(双击可全选代码)">
//堆结点x插入fibonacci heap中
void FibHeapInsert(FibHeap * heap, FibNode * x) {
	if (0 == heap-&gt;keyNum) {
		heap-&gt;min = x;
	} else {
		FibNodeAdd(x, heap-&gt;min);
		x-&gt;parent = NULL;
		if (x-&gt;key &lt; heap-&gt;min-&gt;key) {
			heap-&gt;min = x;
		}
	}
	heap-&gt;keyNum++;
}

//将数组内的值插入Fibonacci Heap
void FibHeapInsertKeys(FibHeap * heap, int keys[], int keyNum) {
	for (int i = 0; i &lt; keyNum; i++) {
		FibHeapInsertKey(heap, keys[i]);
	}
}

//将值插入Fibonacci Heap
static void FibHeapInsertKey(FibHeap * heap, int key) {
	FibNode * x = NULL;
	x = FibHeapNodeMake();
	x-&gt;key = key;
	FibHeapInsert(heap, x);
}
</pre>
<p><font color="#009085" size="4" face="微软雅黑"><strong>五、合并两个斐波那契堆</strong></font></p>
<p><font color="#000000" size="2" face="微软雅黑">&#160;&#160;&#160;&#160; 不同于二项堆，这个操作在斐波那契堆里非常简单。仅仅简单地将H1和H2的两根表并置，然后确定一个新的最小结点。</font></p>
<p><font color="#000000" size="2" face="微软雅黑">伪代码：</font></p>
<h6>FIB-HEAP-UNION(H1, H2)</h6>
<h6>1&#160; H ← MAKE-FIB-HEAP()</h6>
<h6>2&#160; min[H] ← min[H1]</h6>
<h6>3&#160; concatenate the root list of H2 with the root list of H</h6>
<h6>4&#160; if (min[H1] = NIL) or (min[H2] ≠ NIL and min[H2] &lt; min[H1])</h6>
<h6>5&#160;&#160;&#160; then min[H] ← min[H2]</h6>
<h6>6&#160; n[H] ← n[H1] + n[H2]</h6>
<h6>7&#160; free the objects H1 and H2</h6>
<h6>8&#160; return H</h6>
<p><font color="#009085" size="4" face="微软雅黑"><strong>六、抽取最小结点</strong></font></p>
<p><font color="#000000" size="2" face="微软雅黑">&#160;&#160;&#160;&#160; 前边说过，对根表中的树合并是推后到EXTRACT-MIN中的，所以抽取最小这个操作比较麻烦。该过程还用到一个辅助过程CONSOLIDATE。</font></p>
<p><font color="#000000" size="2" face="微软雅黑">伪代码：</font></p>
<h6>FIB-HEAP-EXTRACT-MIN(H)</h6>
<h6>1&#160; z ← min[H]</h6>
<h6>2&#160; if z ≠ NIL</h6>
<h6>3&#160;&#160;&#160;&#160; then for each child x of z</h6>
<h6>4&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; do add x to the root list of H</h6>
<h6>5&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; p[x] ← NIL</h6>
<h6>6&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; remove z from the root list of H</h6>
<h6>7&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; if z = right[z]</h6>
<h6>8&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; then min[H] ← NIL</h6>
<h6>9&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; else min[H] ← right[z]</h6>
<h6>10&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; CONSOLIDATE(H)</h6>
<h6>11&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; n[H] ← n[H] &#8211; 1</h6>
<h6>12&#160; return z</h6>
<p><font color="#000000" size="2" face="微软雅黑"><font color="#666666" face="Tahoma">&#160;&#160;&#160;&#160; </font>这个过程先使最小结点的每个子女都成为一个根，并将最小结点从根表中取出。然后，通过将度数相同的根链接起来，直至对应每个度数至多只有一个根来调整根表。FIB-HEAP-EXTRACT-MIN中，3~5行中使z的所有子女成为根（将他们放入根表）来从H中删除结点z，并在第6行中将z从根表中去掉。如果z为根节点中唯一的结点且没有子女，则第8行返回空即可；否则，让指针min[H]指向根表中的一个非z的结点（伪代码中为right[z])。这个min[H]只是临时值，并不是真正的最小结点。第9行之前程序执行过程如图a)~b)（一图胜千言）。</font></p>
<p><img src="http://mindlee.net/wp-content/uploads/2011/09/FibExtractPic1.jpg" /></p>
<p><img src="http://mindlee.net/wp-content/uploads/2011/09/FibHeapExtractPic2.jpg" /></p>
<p><font color="#000000" size="2" face="微软雅黑">&#160;&#160;&#160;&#160; CONSOLIDATE过程要做的工作是：使每个度数的二项树唯一，也就是使每个根都有一个不同的degree值为止。对根表的合并过程是反复执行下面的步骤：</font></p>
<p><font color="#000000" size="2" face="微软雅黑">1）在根表中找出两个具有相同度数的根x和y，且key[x] &lt;= key[y].</font></p>
<p><font color="#000000" size="2" face="微软雅黑">2)将y链接到x：将y从根表中移出，成为x的一个孩子。这个过程由FIB-HEAP-LINK完成。</font></p>
<p><font color="#000000" size="2" face="微软雅黑">伪代码：</font></p>
<h6>CONSOLIDATE(H)</h6>
<h6>1 for i ← 0 to D(n[H])</h6>
<h6>2&#160;&#160;&#160;&#160;&#160; do A[i] ← NIL</h6>
<h6>3 for each node w in the root list of H</h6>
<h6>4&#160;&#160;&#160;&#160;&#160; do x ← w</h6>
<h6>5&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; d ← degree[x]</h6>
<h6>6&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; while A[d] ≠ NIL</h6>
<h6>7&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; do y ← A[d]&#160;&#160;&#160;&#160;&#160; ▹ Another node with the same degree as x.</h6>
<h6>8&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; if key[x] &gt; key[y]</h6>
<h6>9&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; then exchange x ↔ y</h6>
<h6>10&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; FIB-HEAP-LINK(H, y, x)</h6>
<h6>11&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; A[d] ← NIL</h6>
<h6>12&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; d ← d + 1</h6>
<h6>13&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; A[d] ← x</h6>
<h6>14 min[H] ← NIL</h6>
<h6>15 for i ← 0 to D(n[H])</h6>
<h6>16&#160;&#160;&#160;&#160;&#160; do if A[i] ≠ NIL</h6>
<h6>17&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; then add A[i] to the root list of H</h6>
<h6>18&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; if min[H] = NIL or key[A[i]] &lt; key[min[H]]</h6>
<h6>19&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; then min[H] ← A[i]</h6>
<h6>FIB-HEAP-LINK(H, y, x)</h6>
<h6>1&#160; remove y from the root list of H</h6>
<h6>2&#160; make y a child of x, incrementing degree[x]</h6>
<h6>3&#160; mark[y] ← FALSE</h6>
<p>&#160;<font color="#000000" size="2" face="微软雅黑">&#160;&#160;&#160; 这个过程中用到的数组是哈希辅助数组A[]，如果度数为i的树不存在，则A[i]为空。这个伪代码3~13行的工作就是使每个度数的二项树唯一，里边的while循环反复地将包含结点w的数的根x链接到与其相同度数的其他树根上，直到没有其他度数相同的根为止。14行清空旧的根表，第15~19行根据数组A重新构造根表，最终结果如图m)。</font></p>
<pre class="brush: cpp; light: false; title: + expand source(双击可全选代码); toolbar: true; notranslate" title="+ expand source(双击可全选代码)">
//抽取最小结点
FibNode * FibHeapExtractMin(FibHeap * heap) {
	FibNode * x = NULL, * z = heap-&gt;min;
	if (z != NULL) {

		//删除z的每一个孩子
		while (NULL != z-&gt;child) {
			x = z-&gt;child;
			FibNodeRemove(x);
			if (x-&gt;right == x) {
				z-&gt;child = NULL;
			} else {
				z-&gt;child = x-&gt;right;
			}
			FibNodeAdd(x, z);//add x to the root list heap
			x-&gt;parent = NULL;
		}

		FibNodeRemove(z);
		if (z-&gt;right == z) {
			heap-&gt;min = NULL;
		} else {
			heap-&gt;min = z-&gt;right;
			FibHeapConsolidate(heap);
		}
		heap-&gt;keyNum--;
	}
	return z;
}

//合并左右相同度数的二项树
void FibHeapConsolidate(FibHeap * heap) {
	int D, d;
	FibNode * w = heap-&gt;min, * x = NULL, * y = NULL;
	FibHeapConsMake(heap);//开辟哈希所用空间
	D = heap-&gt;maxNumOfDegree + 1;
	for (int i = 0; i &lt; D; i++) {
		*(heap-&gt;cons + i) = NULL;
	}

	//合并相同度的根节点，使每个度数的二项树唯一
	while (NULL != heap-&gt;min) {
		x = FibHeapMinRemove(heap);
		d = x-&gt;degree;
		while (NULL != *(heap-&gt;cons + d)) {
			y = *(heap-&gt;cons + d);
			if (x-&gt;key &gt; y-&gt;key) {//根结点key最小
				swap(x, y);
			}
			FibHeapLink(heap, y, x);
			*(heap-&gt;cons + d) = NULL;
			d++;
		}
		*(heap-&gt;cons + d) = x;
	}
	heap-&gt;min = NULL;//原有根表清除

	//将heap-&gt;cons中结点都重新加到根表中，且找出最小根
	for (int i = 0; i &lt; D; i++) {
		if (*(heap-&gt;cons + i) != NULL) {
			if (NULL == heap-&gt;min) {
				heap-&gt;min = *(heap-&gt;cons + i);
			} else {
				FibNodeAdd(*(heap-&gt;cons + i), heap-&gt;min);
				if ((*(heap-&gt;cons + i))-&gt;key &lt; heap-&gt;min-&gt;key) {
					heap-&gt;min = *(heap-&gt;cons + i);
				}//if(&lt;)
			}//if-else(==)
		}//if(!=)
	}//for(i)
}

//将x根结点链接到y根结点
void FibHeapLink(FibHeap * heap, FibNode * x, FibNode *y) {
	FibNodeRemove(x);
	if (NULL == y-&gt;child) {
		y-&gt;child = x;
	} else {
		FibNodeAdd(x, y-&gt;child);
	}
	x-&gt;parent = y;
	y-&gt;degree++;
	x-&gt;marked = false;
}

//开辟FibHeapConsolidate函数哈希所用空间
static void FibHeapConsMake(FibHeap * heap) {
	int old = heap-&gt;maxNumOfDegree;
	heap-&gt;maxNumOfDegree = int(log(heap-&gt;keyNum * 1.0) / log(2.0)) + 1;
	if (old &lt; heap-&gt;maxNumOfDegree) {
		//因为度为heap-&gt;maxNumOfDegree可能被合并,所以要maxNumOfDegree + 1
		heap-&gt;cons = (FibNode **) realloc(heap-&gt;cons,
			sizeof(FibHeap *) * (heap-&gt;maxNumOfDegree + 1));
		if (NULL == heap-&gt;cons) {
			puts(&quot;Out of Space!&quot;);
			exit(1);
		}
	}
}

//将堆的最小结点移出，并指向其有兄弟
static FibNode *FibHeapMinRemove(FibHeap * heap) {
	FibNode *min = heap-&gt;min;
	if (heap-&gt;min == min-&gt;right) {
		heap-&gt;min = NULL;
	} else {
		FibNodeRemove(min);
		heap-&gt;min = min-&gt;right;
	}
	min-&gt;left = min-&gt;right = min;
	return min;
}
</pre>
<p><font color="#009085" size="4" face="微软雅黑"><strong>七、减小一个关键字</strong></font></p>
<p><font color="#000000" size="2" face="微软雅黑">&#160;&#160;&#160;&#160; 减小关键字操作最大的难点是，如果减小后的结点破坏了最小堆的性质，如何维护斐波那契堆的性质。这里用到一个操作：级联剪枝（Cascading Cut）。减小关键字的代码流程基本就是：如果减小后的结点破坏了最小堆性质，则把它切下来(cut)，即从所在双向链表中删除，并将其插入到由最小树根节点形成的双向链表中，然后再从parent[x]到所在树根节点递归执行级联剪枝。</font></p>
<p><font color="#000000" size="2" face="微软雅黑">关于级联剪枝，《<a href="http://book.douban.com/subject/1886174/" target="_blank"><u>数据结构</u></a><u>》</u>中的解释：</font></p>
<blockquote>
<p><font color="#000000" size="2" face="微软雅黑">&#160;&#160; <em>由于增加了删除和关键字减值操作，所以，F堆中的最小树就不一定必须是二项树了。事实上，可能存在度为k却只有k + 1（原书是k + 1，应该是k &#8211; 1吧）个结点的最小树。为了保证每个度为k的最小树至少包含c<sup>k</sup>个结点（c &gt; 1)， 每次执行删除操作和关键字减值操作后，还必须进行级联剪枝操作。为此，为每个结点增加一个布尔类型的child_cut域（即本文里的marked)。child_cut域的值仅对那些不是最小树树根的结点有意义。对于不是最小树树根的结点x， x的child_cut域为TRUE，当且仅当在最近一次x成为其当前父结点的儿子之后，x的一个儿子被删除。这就意味着，在执行删除最小元素中，每次连接两棵最小树时，关键字值较大的根结点的child_cut域应该赋值为FALSE。更进一步地说，一旦删除操作或关键字减值操作将最小树的非根结点q从其所在双向链表中删除时，则调用级联剪枝操作。<font color="#ed6d10"><strong>在执行级联剪枝操作过程中，检查从被删除结点q的父节点p开始，到被删节点的最近的child_cut域为FALSE的祖先结点的路径。对在该路径上所有child_cut域为TRUE的非根结点，将其从所在的双向链表中删除，并将其加入到F堆的最小树的根节点组成的双向链表中</strong></font>。如果该路径上存在child_cut域为FALSE的结点 ,则将其该域的值修改为TRUE。</em></font></p>
</blockquote>
<p><font color="#000000" size="2" face="微软雅黑">伪代码：</font></p>
<h6>FIB-HEAP-DECREASE-KEY(H, x, k)</h6>
<h6>1&#160; if k &gt; key[x]</h6>
<h6>2&#160;&#160;&#160;&#160; then error &quot;new key is greater than current key&quot;</h6>
<h6>3&#160; key[x] ← k</h6>
<h6>4&#160; y ← p[x]</h6>
<h6>5&#160; if y ≠ NIL and key[x] &lt; key[y]</h6>
<h6>6&#160;&#160;&#160;&#160; then CUT(H, x, y)</h6>
<h6>7&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; CASCADING-CUT(H, y)</h6>
<h6>8&#160; if key[x] &lt; key[min[H]]</h6>
<h6>9&#160;&#160;&#160;&#160;&#160; then min[H] ← x</h6>
<h6>CUT(H, x, y)</h6>
<h6>1 remove x from the child list of y, decrementing degree[y]</h6>
<h6>2 add x to the root list of H</h6>
<h6>3 p[x] ← NIL</h6>
<h6>4 mark[x] ← FALSE</h6>
<h6>CASCADING-CUT(H, y)</h6>
<h6>1 z ← p[y]</h6>
<h6>2 if z ≠ NIL</h6>
<h6>3&#160;&#160;&#160; then if mark[y] = FALSE</h6>
<h6>4&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; then mark[y] ← TRUE</h6>
<h6>5&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; else CUT(H, y, z)</h6>
<h6>6&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; CASCADING-CUT(H, z)</h6>
<p><font color="#000000" size="2" face="微软雅黑">图中：a),b)46减小为5；&#160; c),d),e)35减小为5</font></p>
<p><img src="http://mindlee.net/wp-content/uploads/2011/09/FibHeapDecrease.jpg" /></p>
<p>&#160;&#160;&#160; <font color="#000000" size="2" face="微软雅黑"> 级联剪切的过程很明了，我当时看的时候最烦的问题是，<font color="#ed6d10"><strong>为什么要进行级联剪切，级联剪切丫的要干什么？</strong></font></font><font color="#000000" size="2" face="微软雅黑">&#160;</font></p>
<p><font face="微软雅黑"><font color="#000000" size="2">&#160;&#160;&#160;&#160; 如果仅仅要切除父结点y的一个结点x，则仅仅需要把结点x加入到根结点所在双向链表中，再检测y是否marked == true即可，这是因为斐波那契中的树并不一定是二项树，近似二项树也可以。当删除y的第二个结点时，对在该路径上所有marked域为TRUE的非根结点，将其从所在的双向链表中删除，并将其加入到F堆的最小树的根节点组成的双向链表中，即只有在删除同一个结点偶数个孩子时，才要进行级联剪枝，来维护二项树性质，奇数个时（即一个），对树影响不大，莫管它，只标记一下即可。</font></font></p>
<p><font color="#000000" size="2" face="微软雅黑">&#160;&#160;&#160;&#160;&#160; <font color="#ed6d10"><strong>为什么偶数个的时候要递归往上删除？</strong></font></font></p>
<p><font color="#000000" size="2" face="微软雅黑">&#160;&#160;&#160;&#160; 二项树中在深度为i处恰有C<sub>i</sub><sup>k</sup>个结点(I = 0, 1, 2, ……, k)。试着如果不进行级联剪枝，就可以发现，稍微删得结点超过两三个，最后的树就会不成样子，毫无章法。但是如果进行了级联剪枝，在偶数个结点时进行级联剪切时，原来是C<sub>3</sub><sup>0</sup> = 1, C<sub>3</sub><sup>1 </sup>= 3, C<sub>3</sub><sup>2 </sup>= 3, C<sub>3</sub><sup>3 </sup>= 1, 减少两个结点关键字后，变为：C<sub>2</sub><sup>0 </sup>= 0，C<sub>2</sub><sup>1</sup> = 2， C<sub>2</sub><sup>2</sup> = 1;二项式是对称的，所以，偶数个结点时进行级联剪枝可以保证类似上边的正好使二项式减少一个数量级。</font></p>
<pre class="brush: cpp; light: false; title: + expand source(双击可全选代码); toolbar: true; notranslate" title="+ expand source(双击可全选代码)">
//减小一个关键字
void FibHeapDecrease(FibHeap * heap, FibNode * x, int key) {
	FibNode * y = x-&gt;parent;
	if (x-&gt;key &lt; key) {
		puts(&quot;new key is greater than current key!&quot;);
		exit(1);
	}
	x-&gt;key = key;

	if (NULL != y &amp;&amp; x-&gt;key &lt; y-&gt;key) {
		//破坏了最小堆性质，需要进行级联剪切操作
		FibHeapCut(heap, x, y);
		FibHeapCascadingCut(heap, y);
	}
	if (x-&gt;key &lt; heap-&gt;min-&gt;key) {
		heap-&gt;min = x;
	}
}

//切断x与父节点y之间的链接，使x成为一个根
static void FibHeapCut(FibHeap * heap, FibNode * x, FibNode * y) {
	FibNodeRemove(x);
	renewDegree(y, x-&gt;degree);
	if (x == x-&gt;right) {
		y-&gt;child = NULL;
	} else {
		y-&gt;child = x-&gt;right;
	}
	x-&gt;parent = NULL;
	x-&gt;left = x-&gt;right = x;
	x-&gt;marked = false;
	FibNodeAdd(x, heap-&gt;min);
}

//级联剪切
static void FibHeapCascadingCut(FibHeap * heap, FibNode * y) {
	FibNode * z = y-&gt;parent;
	if (NULL != z) {
		if (y-&gt;marked == false) {
			y-&gt;marked = true;
		} else {
			FibHeapCut(heap, y, z);
			FibHeapCascadingCut(heap, z);
		}
	}
}

//修改度数
void renewDegree(FibNode * parent, int degree) {
	parent-&gt;degree -= degree;
	if (parent-&gt; parent != NULL) {
		renewDegree(parent-&gt;parent, degree);
	}
}
</pre>
<p><font color="#000000" size="2" face="微软雅黑">八、删除一个结点</font></p>
<p><font color="#000000" size="2" face="微软雅黑">伪代码：</font></p>
<h6>FIB-HEAP-DELETE(H, x)</h6>
<h6>1 FIB-HEAP-DECREASE-KEY(H, x, -∞)</h6>
<h6>2 FIB-HEAP-EXTRACT-MIN(H)</h6>
<p><font color="#000000" size="2" face="微软雅黑">过程很简单，先减小直到min[H], 然后直接剔除最小值即可</font></p>
<pre class="brush: cpp; light: false; title: + expand source(双击可全选代码); toolbar: true; notranslate" title="+ expand source(双击可全选代码)">
//删除结点
void FibHeapDelete(FibHeap * heap, FibNode * x) {
	FibHeapDecrease(heap, x, INT_MIN);
	FibHeapExtractMin(heap);
}
</pre>
<p><font color="#000000" size="2" face="微软雅黑">完整代码：（参考<a href="http://blog.csdn.net/golden_shadow/article/details/6216921" target="_blank"><u>这里</u></a>，<a href="http://download.csdn.net/detail/Ture010Love/3567665" target="_blank"><u>这里</u></a>，<a href="http://blog.csdn.net/ture010love/article/details/6738394" target="_blank"><u>这里</u></a>）</font></p>
<p>&#160;</p>
<p>
  </p>
<pre class="brush: cpp; light: false; title: + expand source(双击可全选代码); toolbar: true; notranslate" title="+ expand source(双击可全选代码)">
/*
The keyNum = 10
 (1)  (11)  (10)  (9)  (7)  (6)  (5)  (4)  (3)  (2)

抽取最小值1之后：
The keyNum = 9
 (2 (3)  (6 (7)  (9 (10) ) )  (4 (5) ) )  (11)

查找11成功,减小到8后：
The keyNum = 9
 (2 (3)  (6 (7)  (9 (10) ) )  (4 (5) ) )  (8)

删除7成功:
The keyNum = 8
 (2 (3)  (6 (9 (10) ) )  (4 (5) ) )  (8)

*/
//说明：
//代码中Fibonacci Heap 用变量heap表示
//结点通常用x，y等表示
#include&lt;iostream&gt;
#include&lt;cstdio&gt;
#include&lt;cstdlib&gt;
#include&lt;cmath&gt;
#include&lt;climits&gt;
using namespace std;

//斐波那契结点ADT
struct FibonacciHeapNode {
	int key;       //结点
	int degree;    //度
	FibonacciHeapNode * left;  //左兄弟
	FibonacciHeapNode * right; //右兄弟
	FibonacciHeapNode * parent; //父结点
	FibonacciHeapNode * child;  //第一个孩子结点
	bool marked;           //是否被删除第1个孩子
};

typedef FibonacciHeapNode FibNode;

//斐波那契堆ADT
struct FibonacciHeap {
	int keyNum;   //堆中结点个数
	FibonacciHeapNode * min;//最小堆，根结点
	int maxNumOfDegree;   //最大度
	FibonacciHeapNode * * cons;//指向最大度的内存区域
};

typedef FibonacciHeap FibHeap;

/*****************函数申明*************************/
//将x从双链表移除
inline void FibNodeRemove(FibNode * x);

//将x堆结点加入y结点之前(循环链表中)
void FibNodeAdd(FibNode * x, FibNode * y);

//初始化一个空的Fibonacci Heap
FibHeap * FibHeapMake() ;

//初始化结点x
FibNode * FibHeapNodeMake();

//堆结点x插入fibonacci heap中
void FibHeapInsert(FibHeap * heap, FibNode * x);

//将数组内的值插入Fibonacci Heap
void FibHeapInsertKeys(FibHeap * heap, int keys[], int keyNum);

//将值插入Fibonacci Heap
static void FibHeapInsertKey(FibHeap * heap, int key);

//抽取最小结点
FibNode * FibHeapExtractMin(FibHeap * heap);

//合并左右相同度数的二项树
void FibHeapConsolidate(FibHeap * heap);

//将x根结点链接到y根结点
void FibHeapLink(FibHeap * heap, FibNode * x, FibNode *y);

//开辟FibHeapConsolidate函数哈希所用空间
static void FibHeapConsMake(FibHeap * heap);

//将堆的最小结点移出，并指向其有兄弟
static FibNode *FibHeapMinRemove(FibHeap * heap);

//减小一个关键字
void FibHeapDecrease(FibHeap * heap, FibNode * x, int key);

//切断x与父节点y之间的链接，使x成为一个根
static void FibHeapCut(FibHeap * heap, FibNode * x, FibNode * y);

//级联剪切
static void FibHeapCascadingCut(FibHeap * heap, FibNode * y);

//修改度数
void renewDegree(FibNode * parent, int degree);

//删除结点
void FibHeapDelete(FibHeap * heap, FibNode * x);

//堆内搜索关键字
FibNode * FibHeapSearch(FibHeap * heap, int key);

//被FibHeapSearch调用
static FibNode * FibNodeSearch(FibNode * x, int key);

//销毁堆
void FibHeapDestory(FibHeap * heap);

//被FibHeapDestory调用
static void FibNodeDestory(FibNode * x);

//输出打印堆
static void FibHeapPrint(FibHeap * heap);

//被FibHeapPrint调用
static void FibNodePrint(FibNode * x);
/************************************************/

//将x从双链表移除
inline void FibNodeRemove(FibNode * x) {
	x-&gt;left-&gt;right = x-&gt;right;
	x-&gt;right-&gt;left = x-&gt;left;
}

/*
将x堆结点加入y结点之前(循环链表中)
	a …… y
	a …… x …… y
*/
inline void FibNodeAdd(FibNode * x, FibNode * y) {
	x-&gt;left = y-&gt;left;
	y-&gt;left-&gt;right = x;
	x-&gt;right = y;
	y-&gt;left = x;
}

//初始化一个空的Fibonacci Heap
FibHeap * FibHeapMake() {
	FibHeap * heap = NULL;
	heap = (FibHeap *) malloc(sizeof(FibHeap));
	if (NULL == heap) {
		puts(&quot;Out of Space!!&quot;);
		exit(1);
	}
	memset(heap, 0, sizeof(FibHeap));
	return heap;
}

//初始化结点x
FibNode * FibHeapNodeMake() {
	FibNode * x = NULL;
	x = (FibNode *) malloc(sizeof(FibNode));
	if (NULL == x) {
		puts(&quot;Out of Space!!&quot;);
		exit(1);
	}
	memset(x, 0, sizeof(FibNode));
	x-&gt;left = x-&gt;right = x;
	return x;
}

//堆结点x插入fibonacci heap中
void FibHeapInsert(FibHeap * heap, FibNode * x) {
	if (0 == heap-&gt;keyNum) {
		heap-&gt;min = x;
	} else {
		FibNodeAdd(x, heap-&gt;min);
		x-&gt;parent = NULL;
		if (x-&gt;key &lt; heap-&gt;min-&gt;key) {
			heap-&gt;min = x;
		}
	}
	heap-&gt;keyNum++;
}

//将数组内的值插入Fibonacci Heap
void FibHeapInsertKeys(FibHeap * heap, int keys[], int keyNum) {
	for (int i = 0; i &lt; keyNum; i++) {
		FibHeapInsertKey(heap, keys[i]);
	}
}

//将值插入Fibonacci Heap
static void FibHeapInsertKey(FibHeap * heap, int key) {
	FibNode * x = NULL;
	x = FibHeapNodeMake();
	x-&gt;key = key;
	FibHeapInsert(heap, x);
}

//抽取最小结点
FibNode * FibHeapExtractMin(FibHeap * heap) {
	FibNode * x = NULL, * z = heap-&gt;min;
	if (z != NULL) {

		//删除z的每一个孩子
		while (NULL != z-&gt;child) {
			x = z-&gt;child;
			FibNodeRemove(x);
			if (x-&gt;right == x) {
				z-&gt;child = NULL;
			} else {
				z-&gt;child = x-&gt;right;
			}
			FibNodeAdd(x, z);//add x to the root list heap
			x-&gt;parent = NULL;
		}

		FibNodeRemove(z);
		if (z-&gt;right == z) {
			heap-&gt;min = NULL;
		} else {
			heap-&gt;min = z-&gt;right;
			FibHeapConsolidate(heap);
		}
		heap-&gt;keyNum--;
	}
	return z;
}

//合并左右相同度数的二项树
void FibHeapConsolidate(FibHeap * heap) {
	int D, d;
	FibNode * w = heap-&gt;min, * x = NULL, * y = NULL;
	FibHeapConsMake(heap);//开辟哈希所用空间
	D = heap-&gt;maxNumOfDegree + 1;
	for (int i = 0; i &lt; D; i++) {
		*(heap-&gt;cons + i) = NULL;
	}

	//合并相同度的根节点，使每个度数的二项树唯一
	while (NULL != heap-&gt;min) {
		x = FibHeapMinRemove(heap);
		d = x-&gt;degree;
		while (NULL != *(heap-&gt;cons + d)) {
			y = *(heap-&gt;cons + d);
			if (x-&gt;key &gt; y-&gt;key) {//根结点key最小
				swap(x, y);
			}
			FibHeapLink(heap, y, x);
			*(heap-&gt;cons + d) = NULL;
			d++;
		}
		*(heap-&gt;cons + d) = x;
	}
	heap-&gt;min = NULL;//原有根表清除

	//将heap-&gt;cons中结点都重新加到根表中，且找出最小根
	for (int i = 0; i &lt; D; i++) {
		if (*(heap-&gt;cons + i) != NULL) {
			if (NULL == heap-&gt;min) {
				heap-&gt;min = *(heap-&gt;cons + i);
			} else {
				FibNodeAdd(*(heap-&gt;cons + i), heap-&gt;min);
				if ((*(heap-&gt;cons + i))-&gt;key &lt; heap-&gt;min-&gt;key) {
					heap-&gt;min = *(heap-&gt;cons + i);
				}//if(&lt;)
			}//if-else(==)
		}//if(!=)
	}//for(i)
}

//将x根结点链接到y根结点
void FibHeapLink(FibHeap * heap, FibNode * x, FibNode *y) {
	FibNodeRemove(x);
	if (NULL == y-&gt;child) {
		y-&gt;child = x;
	} else {
		FibNodeAdd(x, y-&gt;child);
	}
	x-&gt;parent = y;
	y-&gt;degree++;
	x-&gt;marked = false;
}

//开辟FibHeapConsolidate函数哈希所用空间
static void FibHeapConsMake(FibHeap * heap) {
	int old = heap-&gt;maxNumOfDegree;
	heap-&gt;maxNumOfDegree = int(log(heap-&gt;keyNum * 1.0) / log(2.0)) + 1;
	if (old &lt; heap-&gt;maxNumOfDegree) {
		//因为度为heap-&gt;maxNumOfDegree可能被合并,所以要maxNumOfDegree + 1
		heap-&gt;cons = (FibNode **) realloc(heap-&gt;cons,
			sizeof(FibHeap *) * (heap-&gt;maxNumOfDegree + 1));
		if (NULL == heap-&gt;cons) {
			puts(&quot;Out of Space!&quot;);
			exit(1);
		}
	}
}

//将堆的最小结点移出，并指向其有兄弟
static FibNode *FibHeapMinRemove(FibHeap * heap) {
	FibNode *min = heap-&gt;min;
	if (heap-&gt;min == min-&gt;right) {
		heap-&gt;min = NULL;
	} else {
		FibNodeRemove(min);
		heap-&gt;min = min-&gt;right;
	}
	min-&gt;left = min-&gt;right = min;
	return min;
}

//减小一个关键字
void FibHeapDecrease(FibHeap * heap, FibNode * x, int key) {
	FibNode * y = x-&gt;parent;
	if (x-&gt;key &lt; key) {
		puts(&quot;new key is greater than current key!&quot;);
		exit(1);
	}
	x-&gt;key = key;

	if (NULL != y &amp;&amp; x-&gt;key &lt; y-&gt;key) {
		//破坏了最小堆性质，需要进行级联剪切操作
		FibHeapCut(heap, x, y);
		FibHeapCascadingCut(heap, y);
	}
	if (x-&gt;key &lt; heap-&gt;min-&gt;key) {
		heap-&gt;min = x;
	}
}

//切断x与父节点y之间的链接，使x成为一个根
static void FibHeapCut(FibHeap * heap, FibNode * x, FibNode * y) {
	FibNodeRemove(x);
	renewDegree(y, x-&gt;degree);
	if (x == x-&gt;right) {
		y-&gt;child = NULL;
	} else {
		y-&gt;child = x-&gt;right;
	}
	x-&gt;parent = NULL;
	x-&gt;left = x-&gt;right = x;
	x-&gt;marked = false;
	FibNodeAdd(x, heap-&gt;min);
}

//级联剪切
static void FibHeapCascadingCut(FibHeap * heap, FibNode * y) {
	FibNode * z = y-&gt;parent;
	if (NULL != z) {
		if (y-&gt;marked == false) {
			y-&gt;marked = true;
		} else {
			FibHeapCut(heap, y, z);
			FibHeapCascadingCut(heap, z);
		}
	}
}

//修改度数
void renewDegree(FibNode * parent, int degree) {
	parent-&gt;degree -= degree;
	if (parent-&gt; parent != NULL) {
		renewDegree(parent-&gt;parent, degree);
	}
}

//删除结点
void FibHeapDelete(FibHeap * heap, FibNode * x) {
	FibHeapDecrease(heap, x, INT_MIN);
	FibHeapExtractMin(heap);
}

//堆内搜索关键字
FibNode * FibHeapSearch(FibHeap * heap, int key) {
	return FibNodeSearch(heap-&gt;min, key);
}

//被FibHeapSearch调用
static FibNode * FibNodeSearch(FibNode * x, int key) {
	FibNode * w = x, * y = NULL;
	if (x != NULL) {
		do {
			if (w-&gt;key == key) {
				y = w;
				break;
			} else if (NULL != (y = FibNodeSearch(w-&gt;child, key))) {
				break;
			}
			w = w-&gt;right;
		} while (w != x);
	}
	return y;
}

//销毁堆
void FibHeapDestory(FibHeap * heap) {
	FibNodeDestory(heap-&gt;min);
	free(heap);
	heap = NULL;
}

//被FibHeapDestory调用
static void FibNodeDestory(FibNode * x) {
	FibNode * p = x, *q = NULL;
	while (p != NULL) {
		FibNodeDestory(p-&gt;child);
		q = p;
		if (p -&gt; left == x) {
			p = NULL;
		} else {
			p = p-&gt;left;
		}
		free(q-&gt;right);
	}
}

//输出打印堆
static void FibHeapPrint(FibHeap * heap) {
	printf(&quot;The keyNum = %d\n&quot;, heap-&gt;keyNum);
	FibNodePrint(heap-&gt;min);
	puts(&quot;\n&quot;);
};

//被FibHeapPrint调用
static void FibNodePrint(FibNode * x) {
	FibNode * p = NULL;
	if (NULL == x) {
		return ;
	}
	p = x;
	do {
		printf(&quot; (&quot;);
		printf(&quot;%d&quot;, p-&gt;key);
		if (p-&gt;child != NULL) {
			FibNodePrint(p-&gt;child);
		}
		printf(&quot;) &quot;);
		p = p-&gt;left;
	}while (x != p);
}

int keys[10] = {1, 2, 3, 4, 5, 6, 7, 9, 10, 11};

int main() {
	FibHeap * heap = NULL;
	FibNode * x = NULL;
	heap = FibHeapMake();
	FibHeapInsertKeys(heap, keys, 10);
	FibHeapPrint(heap);

	x = FibHeapExtractMin(heap);
	printf(&quot;抽取最小值%d之后：\n&quot;, x-&gt;key);
	FibHeapPrint(heap);

	x = FibHeapSearch(heap, 11);
	if (NULL != x) {
		printf(&quot;查找%d成功,&quot;, x-&gt;key);
		FibHeapDecrease(heap, x, 8);
		printf(&quot;减小到%d后：\n&quot;, x-&gt;key);
		FibHeapPrint(heap);
	}

	x = FibHeapSearch(heap, 7);
	if (NULL != x) {
		printf(&quot;删除%d成功:\n&quot;, x-&gt;key);
		FibHeapDelete(heap, x);
		FibHeapPrint(heap);
	}

	FibHeapDestory(heap);
	return 0;
}
</pre>
<div style="clear:both; margin-top:5px; margin-bottom:5px;"></div><div style="float:left"><!-- JiaThis Button BEGIN -->
<div id="jiathis_style_32x32">
<a class="jiathis_button_qzone"></a>
<a class="jiathis_button_tsina"></a>
<a class="jiathis_button_tqq"></a>
<a class="jiathis_button_renren"></a>
<a class="jiathis_button_42qu"></a>
<a class="jiathis_button_douban"></a>
<a class="jiathis_button_douban9dian"></a>
<a class="jiathis_button_evernote"></a>
<a class="jiathis_button_google"></a>
<a class="jiathis_button_email"></a>
<a class="jiathis_button_delicious"></a>
<a class="jiathis_button_googleplus"></a>
<a class="jiathis_button_fb"></a>
<a href="http://www.jiathis.com/share?uid=1519757" class="jiathis jiathis_txt jiathis_separator jtico jtico_jiathis" target="_blank"></a>
</div>
<script type="text/javascript" >
var jiathis_config={
	data_track_clickback:true,
	summary:"",
	hideMore:false
}
</script>
<script type="text/javascript" src="http://v2.jiathis.com/code/jia.js?uid=1519757" charset="utf-8"></script>
<!-- JiaThis Button END -->
</div><div style="clear:both; margin-top:5px; margin-bottom:5px;"></div><h2  class="related_post_title">相关日志</h2><ul class="related_post"><li>2011/09/26 -- <a href="http://mindlee.net/2011/09/26/binomial-heaps/" title="二项堆(Binomial Heaps)">二项堆(Binomial Heaps)</a> (8)</li><li>2011/07/27 -- <a href="http://mindlee.net/2011/07/27/heap-sort-and-priority-queue/" title="堆排序和优先级队列">堆排序和优先级队列</a> (1)</li><li>2011/11/27 -- <a href="http://mindlee.net/2011/11/27/computational-geometry/" title="计算几何学(Computational Geometry)">计算几何学(Computational Geometry)</a> (1)</li><li>2011/11/25 -- <a href="http://mindlee.net/2011/11/25/string-matching/" title="字符串匹配(String Matching)">字符串匹配(String Matching)</a> (5)</li><li>2011/11/21 -- <a href="http://mindlee.net/2011/11/21/matrix-multiply/" title="矩阵乘法(Matrix Multiply)">矩阵乘法(Matrix Multiply)</a> (4)</li></ul> 

<div class="thetag">Tag： <a href="http://mindlee.net/tag/heap/" rel="tag">堆</a> <a href="http://mindlee.net/tag/data-structure/" rel="tag">数据结构</a> <a href="http://mindlee.net/tag/notes/" rel="tag">笔记</a> <a href="http://mindlee.net/tag/algorithm/" rel="tag">算法</a> <a href="http://mindlee.net/tag/introduction-to-algorithms/" rel="tag">算法导论</a> </div>

</div>

</div>



<div id="post_metadata">

<h3>日志信息 &raquo;</h3>

<div class="content">

该日志于2011-09-29 22:09由 酷~行天下 发表在<a href="http://mindlee.net/category/algorithm-learning/" title="查看 算法学习 的全部文章" rel="category tag">算法学习</a>分类下，


你可以<a href="#respond">发表评论</a>。除了可以将这个日志以保留<a href="http://mindlee.net/2011/09/29/fibonacci-heaps/" rel="bookmark">源地址</a>及作者的情况下<a href="http://mindlee.net/2011/09/29/fibonacci-heaps/trackback/" rel="trackback">引用</a>到你的网站或博客，还可以通过
<!-- Feedsky FEED发布代码开始 -->
<!-- FEED自动发现标记开始 -->
<link title="RSS 2.0" type="application/rss+xml" href="http://feed.feedsky.com/mindlee" rel="alternate" />
<!-- FEED自动发现标记结束 -->
<script language="javascript"><!-- 
main_sub="c1s17d";
more_subs="";
is_new="yes";
--> </script>
<script language="javascript" src="http://www.feedsky.com/jsout/publishlist_v2.js?burl=mindlee&out_html=true"></script>
<!-- Feedsky FEED发布代码结束 -->
订阅本站。


</div>

</div>

<div id="comments">
       目前盖楼 (9)层：</div>
	<ol class="comment_list">
				<li class="comment even thread-even depth-1 parent" id="comment-598">
				<div id="div-comment-598" class="comment-body">
				<div class="comment-author vcard">
		<img alt='' src='http://1.gravatar.com/avatar/5bbdf4f8e623f80bb258afd6bac18da6?s=48&amp;d=identicon&amp;r=G' class='avatar avatar-48 photo' height='48' width='48' />		<cite class="fn">cucool</cite> <span class="says">说：</span>		</div>

		<div class="comment-meta commentmetadata"><a href="http://mindlee.net/2011/09/29/fibonacci-heaps/comment-page-1/#comment-598">
			2012/04/24 于 22:03</a>		</div>

		<p>请教搂主，书里没有提到如何在fibonacci heap上执行增加结点的值的操作，请问这该如何实现？和减少关键字的值操作时一样的吗？还是实现方式和过程不一样？<br />
另外，如何分析增加关键字的值的运行时间？会是O(logn)吗？</p>
<p>谢谢呀，本人看的云里雾里，特来请教。</p>

		<div class="reply">
		<a class='comment-reply-link' href='/2011/09/29/fibonacci-heaps/?replytocom=598#respond' onclick='return addComment.moveForm("div-comment-598", "598", "respond", "674")'>回复</a>		</div>
				</div>
		<ul class='children'>
		<li class="comment byuser comment-author-welon bypostauthor odd alt depth-2 parent" id="comment-599">
				<div id="div-comment-599" class="comment-body">
				<div class="comment-author vcard">
		<img alt='' src='http://1.gravatar.com/avatar/5e176552e6eebb8e67d9cd3ff22c2dda?s=48&amp;d=identicon&amp;r=G' class='avatar avatar-48 photo' height='48' width='48' />		<cite class="fn"><a href='http://mindlee.net' rel='external nofollow' class='url'>酷~行天下</a></cite> <span class="says">说：</span>		</div>

		<div class="comment-meta commentmetadata"><a href="http://mindlee.net/2011/09/29/fibonacci-heaps/comment-page-1/#comment-599">
			2012/04/25 于 10:08</a>		</div>

		<p>&#160;&#160;&#160;&#160; 好久没碰算法，快生了，翻了一下书：</p>
<h6>FIB-HEAP-DECREASE-KEY(H, x, k)</h6>
<h6>1 if k &gt; key[x]</h6>
<h6>2&#160;&#160;&#160;&#160; then error &quot;new key is greater than current key&quot;</h6>
<h6>3 key[x] ← k</h6>
<h6>4 y ← p[x]</h6>
<h6>5 if y ≠ NIL and key[x] &lt; key[y]</h6>
<h6>6&#160;&#160;&#160;&#160; then CUT(H, x, y)</h6>
<h6>7&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; CASCADING-CUT(H, y)</h6>
<h6>8 if key[x] &lt; key[min[H]]</h6>
<h6>9&#160;&#160;&#160;&#160; then min[H] ← x</h6>
<p>&#160;&#160;&#160;&#160; 上边是减小值 x 的伪代码，y 是 x 的父结点；如果 x 是根结点，也就是 y == NIL， 则直接执行8、9行，否则执行5、6、7、8、9行。</p>
<p>&#160;&#160;&#160;&#160; 增大值和减小值面临的问题应该是一样的。就是，破坏了最小堆的性质怎么办，破坏了性质，当然级联剪切了，我上边写过为什么级联剪切可以帮助维护最小堆了，增大值的操作只是判断过程稍微有点变化；</p>
<h6>FIB-HEAP-<font color="#ff0000">IN</font>CREASE-KEY(H, x, k)</h6>
<h6>1 if k <font color="#ff0000">&lt;</font> key[x]</h6>
<h6>2&#160;&#160;&#160;&#160; then error &quot;new key is <font color="#ff0000">lesser</font> than current key&quot;</h6>
<h6>3 key[x] ← k</h6>
<h6>4 y ← <font color="#ff0000">child</font>[x]</h6>
<h6>5 if y ≠ NIL and key[x] <font color="#ff0000">&gt;</font> key[y]</h6>
<h6>6&#160;&#160;&#160;&#160; then CUT(H, <font color="#ff0000">y</font>, <font color="#ff0000">x</font>)</h6>
<h6>7&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; CASCADING-CUT(H, <font color="#ff0000">x</font>)</h6>
<p>&#160;&#160;&#160;&#160; 增大一个值 x，y 是 x 的子结点，如果 x 没有子女结点，也就是y == NIL，则万事大吉，什么也不用干，否则执行5、6、7行，当然，相比减少值操作，这里也不用判断 y 会不会是新的min[H]， 因为它够大了，比上边省了两行（8、9行）。</p>
<p>&#160;&#160;&#160;&#160; 增大值应该和减小值的时间分析是一样的，减小结点的值是 O(1) 的平摊时间，增大应该也是。</p>
<p>&#160;&#160;&#160;&#160; FIB-HEAP-EXTRACT-MIN(H) 和 FIB-HEAP-DELETE(H, x) 的平摊运行时间才应该是O(lgn)，也就是抽取最小值和删除一个结点的操作。</p>
<p>&#160;&#160;&#160;&#160; 关于分析运行时间，《算法导论》17章里讲到平摊分析，这里就是用的平摊分析的知识，具体我有些不大熟了，还得再去看看。。</p>
<p>&#160;&#160;&#160;&#160; 其实，增大结点值和减小结点值的操作可以合并为一个函数 → 改变结点值，里边把上边两个合并了就行了。</p>

		<div class="reply">
		<a class='comment-reply-link' href='/2011/09/29/fibonacci-heaps/?replytocom=599#respond' onclick='return addComment.moveForm("div-comment-599", "599", "respond", "674")'>回复</a>		</div>
				</div>
		<ul class='children'>
		<li class="comment even depth-3 parent" id="comment-600">
				<div id="div-comment-600" class="comment-body">
				<div class="comment-author vcard">
		<img alt='' src='http://1.gravatar.com/avatar/5bbdf4f8e623f80bb258afd6bac18da6?s=48&amp;d=identicon&amp;r=G' class='avatar avatar-48 photo' height='48' width='48' />		<cite class="fn">cucool</cite> <span class="says">说：</span>		</div>

		<div class="comment-meta commentmetadata"><a href="http://mindlee.net/2011/09/29/fibonacci-heaps/comment-page-1/#comment-600">
			2012/04/25 于 20:39</a>		</div>

		<p>谢谢楼主。不过，第6行后，是否还要执行 CUT(H, x, p(x))这一步？因为如果x之前已被marked的话。<br />
至于运行时间，因为任意结点n,其最大度数是logn，是不是说明，增值操作的平摊代价有可能是logn?这是和减值不一样的地方。</p>
<p>另外，我能否用如下操作，实现增值？<br />
先把X增值后，然后和其孩子比较大小，如果大，就和孩子交换，重复这个操作，直到不违反最小堆性质，操作就算完成。如果是这个实现方式，那从结点到叶子，最多有logn的高度，所以平摊代价会是logn?<br />
另，不知道以上两种操作，是否会改变原始堆的其他操作的平摊代价？</p>

		<div class="reply">
		<a class='comment-reply-link' href='/2011/09/29/fibonacci-heaps/?replytocom=600#respond' onclick='return addComment.moveForm("div-comment-600", "600", "respond", "674")'>回复</a>		</div>
				</div>
		<ul class='children'>
		<li class="comment byuser comment-author-welon bypostauthor odd alt depth-4" id="comment-601">
				<div id="div-comment-601" class="comment-body">
				<div class="comment-author vcard">
		<img alt='' src='http://1.gravatar.com/avatar/5e176552e6eebb8e67d9cd3ff22c2dda?s=48&amp;d=identicon&amp;r=G' class='avatar avatar-48 photo' height='48' width='48' />		<cite class="fn"><a href='http://mindlee.net' rel='external nofollow' class='url'>酷~行天下</a></cite> <span class="says">说：</span>		</div>

		<div class="comment-meta commentmetadata"><a href="http://mindlee.net/2011/09/29/fibonacci-heaps/comment-page-1/#comment-601">
			2012/04/26 于 20:31</a>		</div>

		<blockquote><p>
  <strong>“第6行后，是否还要执行 CUT(H, x, p(x))这一步？因为如果x之前已被marked的话。至于运行时间，因为任意结点n, 其最大度数是logn，是不是说明，增值操作的平摊代价有可能是logn? 这是和减值不一样的地方。”</strong>
</p></blockquote>
<p>&#160;&#160;&#160;&#160; x是否已被marked……好像没有关系吧，不管 x 如何，CUT的时候，都会mark[x] = false，因为它要去当根结点了，后续操作都是对p(x)进行的呀？和减值没区别。。这里的运行时间，不能简单的那么算，因为它的一个操作会造成其他影响，比如切掉一个点，单纯的代价是1，但是会引起结点mark值改变，mark的改变又会决定是否还会继续切下去。。在比较确定的排序之类里可以那么算，因为不会有其他影响，这里的一个操作影响是不确定的，所以要平摊分析。。</p>
<p>&#160;&#160;&#160;&#160; 具体分析，《算法导论》300页最后两段 + 301页有简要的分析，《数据结构与算法分析——C语言描述》338页专门证明这个的。。下边是书中的摘录：（后一本，图片识别软件抓取的）</p>
<p>&#160;&#160;&#160;&#160; “对于一次DecreaseKey操作所需要的实际时间是1加上在该操作期间所执行的级联切除的次数。由于级联切除的次数可能会比O(1)多很多，为此我们需要用位势的损失来作为补偿，树的棵数实际上是随着每次级联切除而增加，因此我们必须增强位势函数，使它包含某种在级联切除期间能够递减的成分。注意，我们不能从位势函数中抛开树的棵数，因为这样就不能够证明Merge操作的时间界了。级联切除引起被标记的节点的个数的减少，因为每个被级联切除分出的节点都变成了未标记的根。由于级联切除花费1个单元的实际时间并将树的位势增加1，因此我们将每个标记的节点算作2个位势单位。利用这种方法，我们就获得了一种消除级联切除机会的机会。”</p>
<p>&#160;&#160;&#160;&#160; 位势是斐波那契堆的集合中树的棵树加上两倍的标记节点数。像通常一样，初始的位势为0并且总是非负的。于是，经过一系列操作之后，总的的摊还时间则是总的实际时间的一个上界。</p>
<p>&#160;&#160;&#160;&#160; 最后考虑DecreaseKey操作。令C为级联切除的次数。DecreaseKey的实际花费为C+1，它是所执行的切除的总数。第一次（非级联）切除创建一棵新树从而使位势增1。每次级联切除都建立一棵新树，但却把一个标记节点转变成未标记的（根）节点，合计每次级联切除有一个单位的净损失。最后一次切除也可能把一个未标记节点，转变成标记节点，这就使得位势增加2。因此，位势总的变化最多是3-C，把实际时间和位势变化加起来则得到总和为4，即O（1）。“</p>
<blockquote><p>
  <strong>“另外，我能否用如下操作，实现增值？<br />
        先把X增值后，然后和其孩子比较大小，如果大，就和孩子交换，重复这个操作，直到不违反最小堆性质，操作就算完成。如果是这个实现方式，那从结点到叶子，最多有logn的高度，所以平摊代价会是logn? </p>
<p>        另，不知道以上两种操作，是否会改变原始堆的其他操作的平摊代价？”</strong>
</p></blockquote>
<p><strong>&#160;&#160; </strong>&#160; 这个应该可以的，不过，如果这样操作，斐波那契堆就没有任何优势了。</p>

		<div class="reply">
		<a class='comment-reply-link' href='/2011/09/29/fibonacci-heaps/?replytocom=601#respond' onclick='return addComment.moveForm("div-comment-601", "601", "respond", "674")'>回复</a>		</div>
				</div>
		</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-677">
				<div id="div-comment-677" class="comment-body">
				<div class="comment-author vcard">
		<img alt='' src='http://0.gravatar.com/avatar/8df889e569d3adb8331075608ad1f442?s=48&amp;d=identicon&amp;r=G' class='avatar avatar-48 photo' height='48' width='48' />		<cite class="fn">eagle</cite> <span class="says">说：</span>		</div>

		<div class="comment-meta commentmetadata"><a href="http://mindlee.net/2011/09/29/fibonacci-heaps/comment-page-1/#comment-677">
			2012/06/01 于 16:32</a>		</div>

		<p>static void FibNodeDestory(FibNode * x) {<br />
    FibNode * p = x, *q = NULL;<br />
    while (p != NULL) {<br />
        FibNodeDestory(p-&gt;child);<br />
        q = p;<br />
        if (p == x) {<br />
            p = NULL;<br />
        } else {<br />
            p = p-&gt;left;<br />
        }<br />
        free(q-&gt;right);<br />
    }<br />
}</p>
<p> q = p;<br />
        if (p == x) {<br />
这应该有问题吧，第一步就相等了，双向链表就没法删除了。</p>

		<div class="reply">
		<a class='comment-reply-link' href='/2011/09/29/fibonacci-heaps/?replytocom=677#respond' onclick='return addComment.moveForm("div-comment-677", "677", "respond", "674")'>回复</a>		</div>
				</div>
		<ul class='children'>
		<li class="comment byuser comment-author-welon bypostauthor odd alt depth-2" id="comment-678">
				<div id="div-comment-678" class="comment-body">
				<div class="comment-author vcard">
		<img alt='' src='http://1.gravatar.com/avatar/5e176552e6eebb8e67d9cd3ff22c2dda?s=48&amp;d=identicon&amp;r=G' class='avatar avatar-48 photo' height='48' width='48' />		<cite class="fn"><a href='http://mindlee.net' rel='external nofollow' class='url'>酷~行天下</a></cite> <span class="says">说：</span>		</div>

		<div class="comment-meta commentmetadata"><a href="http://mindlee.net/2011/09/29/fibonacci-heaps/comment-page-1/#comment-678">
			2012/06/01 于 21:59</a>		</div>

		<p>最近期末考试，各种复习，囧。。完了我重新看看。。</p>

		<div class="reply">
		<a class='comment-reply-link' href='/2011/09/29/fibonacci-heaps/?replytocom=678#respond' onclick='return addComment.moveForm("div-comment-678", "678", "respond", "674")'>回复</a>		</div>
				</div>
		</li>
		<li class="comment byuser comment-author-welon bypostauthor even depth-2" id="comment-694">
				<div id="div-comment-694" class="comment-body">
				<div class="comment-author vcard">
		<img alt='' src='http://1.gravatar.com/avatar/5e176552e6eebb8e67d9cd3ff22c2dda?s=48&amp;d=identicon&amp;r=G' class='avatar avatar-48 photo' height='48' width='48' />		<cite class="fn"><a href='http://mindlee.net' rel='external nofollow' class='url'>酷~行天下</a></cite> <span class="says">说：</span>		</div>

		<div class="comment-meta commentmetadata"><a href="http://mindlee.net/2011/09/29/fibonacci-heaps/comment-page-1/#comment-694">
			2012/06/23 于 13:13</a>		</div>

		<p>不好意思，最近一直有事儿，现在才回复，我看了下，这里确实有问题。<br />
应该改成这样：</p>
<pre class="brush: cpp; light: false; title: + expand source(双击可全选代码); toolbar: true; notranslate" title="+ expand source(双击可全选代码)">
//被FibHeapDestory调用
static void FibNodeDestory(FibNode * x) {
    FibNode * p = x, *q = NULL;
    while (p != NULL) {
        FibNodeDestory(p-&gt;child);
        q = p;
        if (p -&gt;left == x) { //检测是否是独立叶子节点
            p = NULL;
        } else {
            p = p-&gt;left;
        }
        free(q-&gt;right);
    }
}
</pre>
<p>if语句用来判断是否是独立的叶子结点，如果是，p = NULL，递归这里结束，然后回溯到它的父结点；如果不是独立的叶子节点，则接着用函数处理它的左兄弟，自己销毁掉。</p>

		<div class="reply">
		<a class='comment-reply-link' href='/2011/09/29/fibonacci-heaps/?replytocom=694#respond' onclick='return addComment.moveForm("div-comment-694", "694", "respond", "674")'>回复</a>		</div>
				</div>
		</li>
</ul>
</li>
	</ol>
	<div class="navigation">
        <span class="alignleft"></span>
        <span class="alignright"></span>
        <div class="clear"></div>
    </div>
		<div id="respond">
		<h3 id="post_comment" name="post_comment">发表评论 &raquo;</h3>
		<div id="cancel_comment_reply"><a rel="nofollow" id="cancel-comment-reply-link" href="/2011/09/29/fibonacci-heaps/#respond" style="display:none;">点击这里取消回复。</a></div>
				<form action="http://mindlee.net/wp-comments-post.php" method="post" id="commentform" name="commentform">
			<p><textarea name="comment" id="comment" rows="5" tabindex="4"></textarea></p>
						<p><input type="text" name="author" id="author" value="" size="22" tabindex="1" />
			<label for="author">名称 (必填)</label></p>
			<p><input type="text" name="email" id="email" value="" size="22" tabindex="2" />
			<label for="email">电子邮件 (不会被公开) (必填)</label></p>
			<p><input type="text" name="url" id="url" value="" size="22" tabindex="3" />
			<label for="url">网站</label></p>
						<p><input type="submit" id="submit" tabindex="5" value="发表评论(Ctrl+Enter)" /></p>
			<input type='hidden' name='comment_post_ID' value='674' id='comment_post_ID' />
<input type='hidden' name='comment_parent' id='comment_parent' value='0' />
			<p style="display: none;"><input type="hidden" id="akismet_comment_nonce" name="akismet_comment_nonce" value="b0e7a05c65" /></p>
	<!-- Custom Smilies - Version 2.9.1 -->
	<style type="text/css">
	img.wp-smiley-select {cursor: pointer;}
	</style>
    <script type="text/javascript">
    function grin(tag) {
    	if (typeof tinyMCE != 'undefined') {
    		grin_tinymcecomments(tag);
    	} else {
    		grin_plain(tag);
    	}
    }
    function grin_tinymcecomments(tag) {
    	tinyMCE.execCommand('mceInsertContent', false, ' ' + tag + ' ');
    }
    
    function grin_plain(tag) {
    	var myField;
    	var myCommentTextarea = "comment";
    	tag = ' ' + tag + ' ';
        if (document.getElementById(myCommentTextarea) && document.getElementById(myCommentTextarea).type == 'textarea') {
    		myField = document.getElementById(myCommentTextarea);
    	} else {
    		return false;
    	}
    	if (document.selection) {
    		myField.focus();
    		sel = document.selection.createRange();
    		sel.text = tag;
    		myField.focus();
    	}
    	else if (myField.selectionStart || myField.selectionStart == '0') {
    		var startPos = myField.selectionStart;
    		var endPos = myField.selectionEnd;
    		var cursorPos = endPos;
    		myField.value = myField.value.substring(0, startPos)
    					  + tag
    					  + myField.value.substring(endPos, myField.value.length);
    		cursorPos += tag.length;
    		myField.focus();
    		myField.selectionStart = cursorPos;
    		myField.selectionEnd = cursorPos;
    	}
    	else {
    		myField.value += tag;
    		myField.focus();
    	}
    }
    
    function moreSmilies() {
    	document.getElementById('wp-smiley-more').style.display = 'inline';
    	document.getElementById('wp-smiley-toggle').innerHTML = '<a href="javascript:lessSmilies()">&laquo;&nbsp;less</a></span>';
    }
    
    function lessSmilies() {
    	document.getElementById('wp-smiley-more').style.display = 'none';
    	document.getElementById('wp-smiley-toggle').innerHTML = '<a href="javascript:moreSmilies()">more&nbsp;&raquo;</a>';
    }
    </script>
<img src='http://mindlee.net/wp-includes/images/smilies/1.gif' alt='[M:01]' onclick='grin("[M:01]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/10.gif' alt='[M:02]' onclick='grin("[M:02]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/11.gif' alt='[M:03]' onclick='grin("[M:03]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/12.gif' alt='[M:04]' onclick='grin("[M:04]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/13.gif' alt='[M:05]' onclick='grin("[M:05]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/14.gif' alt='[M:06]' onclick='grin("[M:06]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/15.gif' alt='[M:07]' onclick='grin("[M:07]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/16.gif' alt='[M:08]' onclick='grin("[M:08]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/17.gif' alt='[M:09]' onclick='grin("[M:09]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/18.gif' alt='[M:10]' onclick='grin("[M:10]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/19.gif' alt='[M:11]' onclick='grin("[M:11]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/2.gif' alt='[M:12]' onclick='grin("[M:12]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/20.gif' alt='[M:13]' onclick='grin("[M:13]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/21.gif' alt='[M:14]' onclick='grin("[M:14]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/22.gif' alt='[M:15]' onclick='grin("[M:15]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/23.gif' alt='[M:16]' onclick='grin("[M:16]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/24.gif' alt='[M:17]' onclick='grin("[M:17]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/25.gif' alt='[M:18]' onclick='grin("[M:18]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/26.gif' alt='[M:19]' onclick='grin("[M:19]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/27.gif' alt='[M:20]' onclick='grin("[M:20]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/28.gif' alt='[M:21]' onclick='grin("[M:21]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/29.gif' alt='[M:22]' onclick='grin("[M:22]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/3.gif' alt='[M:23]' onclick='grin("[M:23]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/30.gif' alt='[M:24]' onclick='grin("[M:24]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/31.gif' alt='[M:25]' onclick='grin("[M:25]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/32.gif' alt='[M:26]' onclick='grin("[M:26]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/33.gif' alt='[M:27]' onclick='grin("[M:27]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/34.gif' alt='[M:28]' onclick='grin("[M:28]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/35.gif' alt='[M:29]' onclick='grin("[M:29]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/36.gif' alt='[M:30]' onclick='grin("[M:30]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/37.gif' alt='[M:31]' onclick='grin("[M:31]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/38.gif' alt='[M:32]' onclick='grin("[M:32]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/39.gif' alt='[M:33]' onclick='grin("[M:33]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/4.gif' alt='[M:34]' onclick='grin("[M:34]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/40.gif' alt='[M:35]' onclick='grin("[M:35]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/41.gif' alt='[M:36]' onclick='grin("[M:36]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/42.gif' alt='[M:37]' onclick='grin("[M:37]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/43.gif' alt='[M:38]' onclick='grin("[M:38]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/44.gif' alt='[M:39]' onclick='grin("[M:39]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/45.gif' alt='[M:40]' onclick='grin("[M:40]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/46.gif' alt='[M:41]' onclick='grin("[M:41]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/47.gif' alt='[M:42]' onclick='grin("[M:42]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/48.gif' alt='[M:43]' onclick='grin("[M:43]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/49.gif' alt='[M:44]' onclick='grin("[M:44]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/5.gif' alt='[M:45]' onclick='grin("[M:45]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/50.gif' alt='[M:46]' onclick='grin("[M:46]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/51.gif' alt='[M:47]' onclick='grin("[M:47]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/52.gif' alt='[M:48]' onclick='grin("[M:48]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/53.gif' alt='[M:49]' onclick='grin("[M:49]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/54.gif' alt='[M:50]' onclick='grin("[M:50]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/55.gif' alt='[M:51]' onclick='grin("[M:51]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/6.gif' alt='[M:52]' onclick='grin("[M:52]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/7.gif' alt='[M:53]' onclick='grin("[M:53]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/8.gif' alt='[M:54]' onclick='grin("[M:54]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/9.gif' alt='[M:55]' onclick='grin("[M:55]")' class='wp-smiley-select' /> <span id="wp-smiley-more" style="display:none"><img src='http://mindlee.net/wp-includes/images/smilies/056.gif' alt='[M:056]' onclick='grin("[M:056]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/055.gif' alt='[M:055]' onclick='grin("[M:055]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/054.gif' alt='[M:054]' onclick='grin("[M:054]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/053.gif' alt='[M:053]' onclick='grin("[M:053]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/052.gif' alt='[M:052]' onclick='grin("[M:052]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/051.gif' alt='[M:051]' onclick='grin("[M:051]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/050.gif' alt='[M:050]' onclick='grin("[M:050]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/049.gif' alt='[M:049]' onclick='grin("[M:049]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/048.gif' alt='[M:048]' onclick='grin("[M:048]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/047.gif' alt='[M:047]' onclick='grin("[M:047]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/046.gif' alt='[M:046]' onclick='grin("[M:046]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/045.gif' alt='[M:045]' onclick='grin("[M:045]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/044.gif' alt='[M:044]' onclick='grin("[M:044]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/043.gif' alt='[M:043]' onclick='grin("[M:043]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/042.gif' alt='[M:042]' onclick='grin("[M:042]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/041.gif' alt='[M:041]' onclick='grin("[M:041]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/040.gif' alt='[M:040]' onclick='grin("[M:040]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/039.gif' alt='[M:039]' onclick='grin("[M:039]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/038.gif' alt='[M:038]' onclick='grin("[M:038]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/037.gif' alt='[M:037]' onclick='grin("[M:037]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/036.gif' alt='[M:036]' onclick='grin("[M:036]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/035.gif' alt='[M:035]' onclick='grin("[M:035]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/034.gif' alt='[M:034]' onclick='grin("[M:034]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/033.gif' alt='[M:033]' onclick='grin("[M:033]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/032.gif' alt='[M:032]' onclick='grin("[M:032]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/031.gif' alt='[M:031]' onclick='grin("[M:031]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/030.gif' alt='[M:030]' onclick='grin("[M:030]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/029.gif' alt='[M:029]' onclick='grin("[M:029]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/028.gif' alt='[M:028]' onclick='grin("[M:028]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/027.gif' alt='[M:027]' onclick='grin("[M:027]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/026.gif' alt='[M:026]' onclick='grin("[M:026]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/025.gif' alt='[M:025]' onclick='grin("[M:025]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/024.gif' alt='[M:024]' onclick='grin("[M:024]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/023.gif' alt='[M:023]' onclick='grin("[M:023]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/022.gif' alt='[M:022]' onclick='grin("[M:022]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/021.gif' alt='[M:021]' onclick='grin("[M:021]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/020.gif' alt='[M:020]' onclick='grin("[M:020]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/019.gif' alt='[M:019]' onclick='grin("[M:019]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/018.gif' alt='[M:018]' onclick='grin("[M:018]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/017.gif' alt='[M:017]' onclick='grin("[M:017]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/016.gif' alt='[M:016]' onclick='grin("[M:016]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/015.gif' alt='[M:015]' onclick='grin("[M:015]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/014.gif' alt='[M:014]' onclick='grin("[M:014]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/013.gif' alt='[M:013]' onclick='grin("[M:013]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/012.gif' alt='[M:012]' onclick='grin("[M:012]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/011.gif' alt='[M:011]' onclick='grin("[M:011]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/010.gif' alt='[M:010]' onclick='grin("[M:010]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/009.gif' alt='[M:009]' onclick='grin("[M:009]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/008.gif' alt='[M:008]' onclick='grin("[M:008]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/007.gif' alt='[M:007]' onclick='grin("[M:007]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/006.gif' alt='[M:006]' onclick='grin("[M:006]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/005.gif' alt='[M:005]' onclick='grin("[M:005]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/004.gif' alt='[M:004]' onclick='grin("[M:004]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/003.gif' alt='[M:003]' onclick='grin("[M:003]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/002.gif' alt='[M:002]' onclick='grin("[M:002]")' class='wp-smiley-select' /> <img src='http://mindlee.net/wp-includes/images/smilies/001.gif' alt='[M:001]' onclick='grin("[M:001]")' class='wp-smiley-select' /> </span> <span id="wp-smiley-toggle"><a href="javascript:moreSmilies()">more&nbsp;&raquo;</a></span><p><input type="checkbox" name="comment_mail_notify" id="comment_mail_notify" value="comment_mail_notify" checked="checked" style="width: auto;" /><label for="comment_mail_notify">有人回复时邮件通知我</label></p>		</form>
				<script type="text/javascript">
			<!--//--><![CDATA[//><!--
			var commenttextarea = document.getElementById('comment');
			commenttextarea.onkeydown = function quickSubmit(e) {
			if (!e) var e = window.event;
			if (e.ctrlKey && e.keyCode == 13){
			document.getElementById('submit').click();
			}
			};
			//--><!]]>
		</script>
	</div>
    

<div class="post_nav">

<span class="alignleft">&laquo; <a href="http://mindlee.net/2011/09/26/binomial-heaps/" rel="prev">二项堆(Binomial Heaps)</a></span>

<span class="alignright"><a href="http://mindlee.net/2011/10/10/national-day-travel/" rel="next">国庆出行</a> &raquo;</span>

<div class="clear"></div>

</div>



</div>

<div class="content_bot"></div>



<div class="navigation">




<div class="clear"></div>

</div>



</div>



 <div id="sidebar">
<ul>

<li id=”search-3”><form method="get" id="searchform" action="http://mindlee.net/">
<div>
	<input type="text" value="" name="s" id="s" size="25" />
	<input type="submit" id="searchsubmit" value="搜查" />
</div>
</form></li><li id=”text-3”><h2>关于我</h2>			<div class="textwidget"><p><font size="2" face="微软雅黑">&#160; <font color="#fabf14">&#160; </font><font color="#51a5dc"><strong>&#160;</strong></font></font><font color="#51a5dc" size="2" face="微软雅黑"><strong>HDU大三学生，不合格程序员，立志用Code改变世界，正在学习算法，Python，PyQt，Linux, Andorid等。对所在世界越来越感到好奇，正在为实现梦想而努力……</strong></font></p>
<p><font color="#e69d00" size="2" face="微软雅黑"><strong>QQ</strong> <font color="#000000">：</font></font><font size="2" face="微软雅黑"><a href="http://wpa.qq.com/msgrd?v=3&amp;uin=625570113&amp;site=qq&amp;menu=yes" target="_blank"><img title="点击这里给我发消息" border="0" alt="点击这里给我发消息" src="http://wpa.qq.com/pa?p=2:625570113:44" /></a></font></p>
<p><font color="#e69d00" face="微软雅黑"><font size="2"><strong>Mail</strong><font color="#000000">：</font></font></font><img src="http://services.nexodyne.com/email/icon/6GKcBm4HRXlhBw%3D%3D/fK5K9Co%3D/R01haWw%3D/0/image.png" /></p>
<p><a href="http://zhihu.com/people/mindlee" target="_blank"><strong><font color="#2e963d">发现世界@知乎</font></strong></a>&#160; <a href="https://github.com/welon" target="_blank"><strong><font color="#2e963d">代码仓库@GitHub</font></strong></a></p>
<p><a href="http://www.douban.com/people/mindlee/" target="_blank"><strong><font color="#2e963d">读书电影@豆瓣</font></strong></a></font></font>&#160; <a href="http://delicious.com/welon" target="_blank"><strong><font color="#2e963d">好文分享@Delicious</font></strong></a> </p>
<p><a href="http://weibo.com/mindlee" target="_blank"><strong><font color="#2e963d">偶尔抽风@微博</font></strong></a>&#160; <a href="http://statigr.am/welon" target="_blank"><strong><font color="#2e963d">也拍照片@Instagram</font></strong></a></p>
</div>
		</li><li id=”text-4”><h2>时间在流逝</h2>			<div class="textwidget"><script charset="Shift_JIS" src="http://chabudai.sakura.ne.jp/blogparts/honehoneclock/honehone_clock_wh.js"></script> </div>
		</li><li id=”categories-3”><h2>分类目录</h2>		<ul>
	<li class="cat-item cat-item-1"><a href="http://mindlee.net/category/acm-algorithm/" title="学习算法，每天A题……">ACM历程</a> (7)
</li>
	<li class="cat-item cat-item-50"><a href="http://mindlee.net/category/android/" title="除了APP，还是APP……">Android</a> (4)
</li>
	<li class="cat-item cat-item-45"><a href="http://mindlee.net/category/c-c-plus-plus/" title="记录学习C和C++的过程……">C/C++</a> (3)
</li>
	<li class="cat-item cat-item-32"><a href="http://mindlee.net/category/learn-java/" title="记录学习JAVA的过程……">JAVA</a> (6)
</li>
	<li class="cat-item cat-item-6"><a href="http://mindlee.net/category/lets-go-on-a-trip/" title="不只是旅行，包括生命体验">出去走走</a> (2)
</li>
	<li class="cat-item cat-item-75"><a href="http://mindlee.net/category/technology-enlightenment/" title="还在学">技术启蒙</a> (10)
</li>
	<li class="cat-item cat-item-43"><a href="http://mindlee.net/category/algorithm-learning/" title="算法学习笔记">算法学习</a> (26)
</li>
	<li class="cat-item cat-item-8"><a href="http://mindlee.net/category/sub-talking/" title="平常日子……">闲心碎语</a> (12)
</li>
		</ul>
</li><li id=”recent-comments-2”><h2>近期评论</h2><ul id="recentcomments"><li class="recentcomments"><a href='http://mindlee.net' rel='external nofollow' class='url'>酷~行天下</a> 在 <a href="http://mindlee.net/2011/09/26/binomial-heaps/comment-page-1/#comment-696">二项堆(Binomial Heaps)</a> 上的评论</li><li class="recentcomments"><a href='http://mindlee.net' rel='external nofollow' class='url'>酷~行天下</a> 在 <a href="http://mindlee.net/2011/09/26/binomial-heaps/comment-page-1/#comment-695">二项堆(Binomial Heaps)</a> 上的评论</li><li class="recentcomments"><a href='http://mindlee.net' rel='external nofollow' class='url'>酷~行天下</a> 在 <a href="http://mindlee.net/2011/09/29/fibonacci-heaps/comment-page-1/#comment-694">斐波那契堆(Fibonacci heaps)</a> 上的评论</li><li class="recentcomments"><a href='http://mindlee.net' rel='external nofollow' class='url'>酷~行天下</a> 在 <a href="http://mindlee.net/2011/11/19/network-flow/comment-page-1/#comment-693">网络流(Network Flow)</a> 上的评论</li><li class="recentcomments">wangyu 在 <a href="http://mindlee.net/2011/11/19/network-flow/comment-page-1/#comment-692">网络流(Network Flow)</a> 上的评论</li><li class="recentcomments">wangyu 在 <a href="http://mindlee.net/2011/11/19/network-flow/comment-page-1/#comment-691">网络流(Network Flow)</a> 上的评论</li><li class="recentcomments"><a href='http://mindlee.net' rel='external nofollow' class='url'>酷~行天下</a> 在 <a href="http://mindlee.net/2011/11/19/network-flow/comment-page-1/#comment-690">网络流(Network Flow)</a> 上的评论</li><li class="recentcomments">wangyu 在 <a href="http://mindlee.net/2011/11/19/network-flow/comment-page-1/#comment-689">网络流(Network Flow)</a> 上的评论</li></ul></li><li id=”views-3”><h2>Most Viewed</h2><ul>
<li><a href="http://mindlee.net/2011/06/22/dream/"  title="15年内要实现的（梦想）">15年内要实现的（梦想）</a> - 4,481 views</li><li><a href="http://mindlee.net/2011/08/21/study-notes-directory/"  title="《算法导论》笔记汇总">《算法导论》笔记汇总</a> - 4,222 views</li><li><a href="http://mindlee.net/2012/02/05/kindle-dxg/"  title="入手了Kindle DXG">入手了Kindle DXG</a> - 2,829 views</li><li><a href="http://mindlee.net/2011/02/15/the-first-blog-talking/"  title="开博碎碎念">开博碎碎念</a> - 2,534 views</li><li><a href="http://mindlee.net/2011/06/23/hackers-and-painters/"  title="《黑客与画家》简单读书笔记">《黑客与画家》简单读书笔记</a> - 2,341 views</li><li><a href="http://mindlee.net/2011/04/19/first-time-to-acm-provincial-competition/"  title="第一次ACM省赛">第一次ACM省赛</a> - 2,193 views</li><li><a href="http://mindlee.net/2011/08/01/c-traps-and-pitfalls/"  title="《C陷进与缺陷》读书笔记">《C陷进与缺陷》读书笔记</a> - 2,193 views</li><li><a href="http://mindlee.net/2011/08/01/change-july/"  title="七月：跌宕起伏，波澜不惊">七月：跌宕起伏，波澜不惊</a> - 2,094 views</li><li><a href="http://mindlee.net/2011/07/24/java-little-calculator/"  title="JAVA之小型计算器">JAVA之小型计算器</a> - 2,067 views</li><li><a href="http://mindlee.net/2011/07/29/quick-sort-optimization/"  title="快速排序优化">快速排序优化</a> - 2,051 views</li></ul>
</li>		<li id=”recent-posts-2”>		<h2>最近文章</h2>		<ul>
				<li><a href="http://mindlee.net/2012/04/27/learning-git/" title="Git学习笔记">Git学习笔记</a></li>
				<li><a href="http://mindlee.net/2012/04/11/devil-language-study/" title="魔王语言小窥">魔王语言小窥</a></li>
				<li><a href="http://mindlee.net/2012/04/05/hurriedly/" title="匆匆">匆匆</a></li>
				<li><a href="http://mindlee.net/2012/02/05/kindle-dxg/" title="入手了Kindle DXG">入手了Kindle DXG</a></li>
				<li><a href="http://mindlee.net/2012/01/06/my-2011/" title="2011年终总结">2011年终总结</a></li>
				<li><a href="http://mindlee.net/2011/12/23/just-for-fun-hdu-navigater/" title="Just For Fun，HDU Navigater">Just For Fun，HDU Navigater</a></li>
				<li><a href="http://mindlee.net/2011/12/02/thanks-god%ef%bc%8cits-friday/" title="Thanks God，It&#8217;s Friday">Thanks God，It&#8217;s Friday</a></li>
				<li><a href="http://mindlee.net/2011/11/27/computational-geometry/" title="计算几何学(Computational Geometry)">计算几何学(Computational Geometry)</a></li>
				</ul>
		</li><li id=”tag_cloud-3”><h2>标签</h2><div class="tagcloud"><a href='http://mindlee.net/tag/acm/' class='tag-link-17' title='9 个话题' style='font-size: 16.2352941176pt;'>ACM</a>
<a href='http://mindlee.net/tag/android-2/' class='tag-link-51' title='3 个话题' style='font-size: 11.5294117647pt;'>Android</a>
<a href='http://mindlee.net/tag/cc-plus-plus/' class='tag-link-65' title='3 个话题' style='font-size: 11.5294117647pt;'>C/C++</a>
<a href='http://mindlee.net/tag/git/' class='tag-link-80' title='1 个话题' style='font-size: 8pt;'>git</a>
<a href='http://mindlee.net/tag/java/' class='tag-link-34' title='5 个话题' style='font-size: 13.6470588235pt;'>JAVA</a>
<a href='http://mindlee.net/tag/kindle-dxg/' class='tag-link-78' title='1 个话题' style='font-size: 8pt;'>kindle dxg</a>
<a href='http://mindlee.net/tag/median/' class='tag-link-71' title='1 个话题' style='font-size: 8pt;'>中位数</a>
<a href='http://mindlee.net/tag/binary-matching/' class='tag-link-30' title='1 个话题' style='font-size: 8pt;'>二分匹配</a>
<a href='http://mindlee.net/tag/graph-algorithms/' class='tag-link-73' title='4 个话题' style='font-size: 12.7058823529pt;'>图论</a>
<a href='http://mindlee.net/tag/heap/' class='tag-link-66' title='3 个话题' style='font-size: 11.5294117647pt;'>堆</a>
<a href='http://mindlee.net/tag/string-matching/' class='tag-link-74' title='1 个话题' style='font-size: 8pt;'>字符串匹配</a>
<a href='http://mindlee.net/tag/yearend-summary/' class='tag-link-77' title='1 个话题' style='font-size: 8pt;'>年终总结</a>
<a href='http://mindlee.net/tag/sort/' class='tag-link-60' title='4 个话题' style='font-size: 12.7058823529pt;'>排序</a>
<a href='http://mindlee.net/tag/hash/' class='tag-link-70' title='2 个话题' style='font-size: 10.1176470588pt;'>散列</a>
<a href='http://mindlee.net/tag/data-structure/' class='tag-link-79' title='23 个话题' style='font-size: 20.7058823529pt;'>数据结构</a>
<a href='http://mindlee.net/tag/travel/' class='tag-link-59' title='2 个话题' style='font-size: 10.1176470588pt;'>旅行</a>
<a href='http://mindlee.net/tag/tree/' class='tag-link-67' title='5 个话题' style='font-size: 13.6470588235pt;'>树</a>
<a href='http://mindlee.net/tag/binary-indexed-tree/' class='tag-link-29' title='1 个话题' style='font-size: 8pt;'>树状数组</a>
<a href='http://mindlee.net/tag/dream/' class='tag-link-25' title='2 个话题' style='font-size: 10.1176470588pt;'>梦想</a>
<a href='http://mindlee.net/tag/life/' class='tag-link-24' title='12 个话题' style='font-size: 17.5294117647pt;'>生活</a>
<a href='http://mindlee.net/tag/matrix-multiplication/' class='tag-link-28' title='2 个话题' style='font-size: 10.1176470588pt;'>矩阵乘法</a>
<a href='http://mindlee.net/tag/notes/' class='tag-link-62' title='24 个话题' style='font-size: 20.9411764706pt;'>笔记</a>
<a href='http://mindlee.net/tag/algorithm/' class='tag-link-10' title='30 个话题' style='font-size: 22pt;'>算法</a>
<a href='http://mindlee.net/tag/introduction-to-algorithms/' class='tag-link-37' title='23 个话题' style='font-size: 20.7058823529pt;'>算法导论</a>
<a href='http://mindlee.net/tag/reading/' class='tag-link-61' title='4 个话题' style='font-size: 12.7058823529pt;'>读书</a>
<a href='http://mindlee.net/tag/software/' class='tag-link-52' title='3 个话题' style='font-size: 11.5294117647pt;'>软件</a>
<a href='http://mindlee.net/tag/sports/' class='tag-link-72' title='2 个话题' style='font-size: 10.1176470588pt;'>运动</a></div>
</li><li id=”archives-2”><h2>文章归档</h2>		<ul>
			<li><a href='http://mindlee.net/2012/04/' title='2012 年四月'>2012 年四月</a>&nbsp;(3)</li>
	<li><a href='http://mindlee.net/2012/02/' title='2012 年二月'>2012 年二月</a>&nbsp;(1)</li>
	<li><a href='http://mindlee.net/2012/01/' title='2012 年一月'>2012 年一月</a>&nbsp;(1)</li>
	<li><a href='http://mindlee.net/2011/12/' title='2011 年十二月'>2011 年十二月</a>&nbsp;(2)</li>
	<li><a href='http://mindlee.net/2011/11/' title='2011 年十一月'>2011 年十一月</a>&nbsp;(8)</li>
	<li><a href='http://mindlee.net/2011/10/' title='2011 年十月'>2011 年十月</a>&nbsp;(5)</li>
	<li><a href='http://mindlee.net/2011/09/' title='2011 年九月'>2011 年九月</a>&nbsp;(7)</li>
	<li><a href='http://mindlee.net/2011/08/' title='2011 年八月'>2011 年八月</a>&nbsp;(8)</li>
	<li><a href='http://mindlee.net/2011/07/' title='2011 年七月'>2011 年七月</a>&nbsp;(7)</li>
	<li><a href='http://mindlee.net/2011/06/' title='2011 年六月'>2011 年六月</a>&nbsp;(3)</li>
	<li><a href='http://mindlee.net/2011/05/' title='2011 年五月'>2011 年五月</a>&nbsp;(4)</li>
	<li><a href='http://mindlee.net/2011/04/' title='2011 年四月'>2011 年四月</a>&nbsp;(1)</li>
	<li><a href='http://mindlee.net/2011/03/' title='2011 年三月'>2011 年三月</a>&nbsp;(2)</li>
	<li><a href='http://mindlee.net/2011/02/' title='2011 年二月'>2011 年二月</a>&nbsp;(1)</li>
		</ul>
</li>
 
		<li id=”links-3”><h2>My Hero</h2>
	<ul class='xoxo blogroll'>
<li><a href="http://alexmaccaw.co.uk/" rel="friend" title="需翻墙" target="_blank">Alex MacCaw</a></li>
<li><a href="http://markbao.com/" title="精神偶像" target="_blank">MarkBao</a></li>
<li><a href="http://www.matrix67.com/blog/about" title="对这样的广博很是羡慕" target="_blank">Matrix67</a></li>
<li><a href="http://www.paulgraham.com/index.html" title="保罗·格雷厄姆" target="_blank">Paul Graham</a></li>
<li><a href="http://mindhacks.cn/" target="_blank">刘未鹏</a></li>
<li><a href="http://blog.youxu.info/" target="_blank">徐宥</a></li>
<li><a href="http://www.ruanyifeng.com/blog/" target="_blank">阮一峰</a></li>

	</ul>
</li>
<li id=”links-4”><h2>Spirit of Water</h2>
	<ul class='xoxo blogroll'>
<li><a href="http://calmrey.diandian.com/" target="_blank">CalmRey</a></li>
<li><a href="http://blog.sina.com.cn/purofhap" rel="friend" target="_blank">Pursuit Of Happiness</a></li>
<li><a href="http://tikiet.blog.163.com/" rel="friend" title="基友" target="_blank">东东</a></li>
<li><a href="http://cindywise.blog.163.com/" rel="friend" target="_blank">丝绒</a></li>
<li><a href="http://weiweihe.com/" rel="friend" target="_blank">左岸</a></li>
<li><a href="http://zhaqiang.com/" rel="friend" target="_blank">揸枪</a></li>

	</ul>
</li>
<li id=”links-2”><h2>Code Fighter</h2>
	<ul class='xoxo blogroll'>
<li><a href="http://www.roading.org/" target="_blank">Adoo</a></li>
<li><a href="http://www.cnblogs.com/ambition/" title="Amb教主" target="_blank">Amb</a></li>
<li><a href="http://blog.163.com/zheng_feng_hi/" title="HDOJ管理员" target="_blank">Black KniGht</a></li>
<li><a href="http://www.flyingcat.me/" title="大神" target="_blank">FlyingCat</a></li>
<li><a href="http://www.geekermx.com/" rel="friend" target="_blank">SAI_佐為</a></li>
<li><a href="http://starfall512.com" rel="friend" title="队友+ 师傅" target="_blank">Starfall</a></li>
<li><a href="http://www.wutianqi.com/" title="北化的大牛" target="_blank">Tanky Woo</a></li>
<li><a href="http://haipo.me/" title="腾讯的大牛" target="_blank">杨海坡</a></li>
<li><a href="http://www.keepsimply.org/" target="_blank">独酌逸醉</a></li>

	</ul>
</li>
<li id=”meta-3”><h2>功能</h2>			<ul>
			<li><a href="http://mindlee.net/wp-login.php?action=register">注册</a></li>			<li><a href="http://mindlee.net/wp-login.php">登录</a></li>
			<li><a href="http://mindlee.net/feed/" title="使用 RSS 2.0 同步站点内容">文章 <abbr title="Really Simple Syndication">RSS</abbr></a></li>
			<li><a href="http://mindlee.net/comments/feed/" title="使用 RSS 同步站点的近期评论">评论 <abbr title="Really Simple Syndication">RSS</abbr></a></li>
			<li><a href="http://wordpress.org/" title="基于 WordPress，优美的个人信息发布平台。">WordPress.org</a></li>
						</ul>
</li>		<!-- #secondary .widget-area -->


</ul>
</div>
<div class="clear"></div>

</div>

 <div id="foot">
Except where otherwise noted, this site is licensed under <a href="http://creativecommons.org/licenses/by-nc-sa/2.5/">a Creative Commons License</a>. <br /> 
&copy;2010-2011 酷~行天下 All Rights Reservied (Designed by <a href="http://www.liudaiquan.com" target="_blank">huanjue</a>). 
</div>
 <script type='text/javascript' src='http://mindlee.net/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shCore.js?ver=3.0.83c'></script>
<script type='text/javascript' src='http://mindlee.net/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushCpp.js?ver=3.0.83c'></script>
<script type='text/javascript'>
	(function(){
		var corecss = document.createElement('link');
		var themecss = document.createElement('link');
		var corecssurl = "http://mindlee.net/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shCore.css?ver=3.0.83c";
		if ( corecss.setAttribute ) {
				corecss.setAttribute( "rel", "stylesheet" );
				corecss.setAttribute( "type", "text/css" );
				corecss.setAttribute( "href", corecssurl );
		} else {
				corecss.rel = "stylesheet";
				corecss.href = corecssurl;
		}
		document.getElementsByTagName("head")[0].insertBefore( corecss, document.getElementById("syntaxhighlighteranchor") );
		var themecssurl = "http://mindlee.net/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shThemeDefault.css?ver=3.0.83c";
		if ( themecss.setAttribute ) {
				themecss.setAttribute( "rel", "stylesheet" );
				themecss.setAttribute( "type", "text/css" );
				themecss.setAttribute( "href", themecssurl );
		} else {
				themecss.rel = "stylesheet";
				themecss.href = themecssurl;
		}
		//document.getElementById("syntaxhighlighteranchor").appendChild(themecss);
		document.getElementsByTagName("head")[0].insertBefore( themecss, document.getElementById("syntaxhighlighteranchor") );
	})();
	SyntaxHighlighter.config.strings.expandSource = '+ expand source';
	SyntaxHighlighter.config.strings.help = '帮助';
	SyntaxHighlighter.config.strings.alert = 'SyntaxHighlighter\n\n';
	SyntaxHighlighter.config.strings.noBrush = '无法找到Brush：';
	SyntaxHighlighter.config.strings.brushNotHtmlScript = 'Brush不能设置 html-script选项';
	SyntaxHighlighter.defaults['collapse'] = true;
	SyntaxHighlighter.defaults['light'] = true;
	SyntaxHighlighter.defaults['pad-line-numbers'] = true;
	SyntaxHighlighter.all();
</script>
</div>
<script src="http://www.clicki.cn/boot/42838"></script>
<div id="clicki_group_203" title="clicki"></div>
</body>
</html>
