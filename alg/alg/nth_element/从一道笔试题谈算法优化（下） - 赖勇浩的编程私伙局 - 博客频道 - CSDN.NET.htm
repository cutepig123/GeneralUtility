<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>从一道笔试题谈算法优化（下） - 赖勇浩的编程私伙局 - 博客频道 - CSDN.NET</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="description" content="因为受到经济危机的影响，我在 bokee.com 的博客可能随时出现无法访问的情况；因此将2005年到2006年间在 bokee.com 撰写的博客文章全部迁移到 csdn 博客中来，本文正是其中一篇迁移的文章。&#160;声明：本文最初发表于《电脑编程技巧与维护》2006年第5期，版本所有，如蒙转载，敬请连此声明一起转载，否则追究侵权责任。从一道笔试题谈算法优化（下）作者：赖勇浩（http" />
<script src="http://static.blog.csdn.net/scripts/jquery.js" type="text/javascript"></script>
<script type="text/javascript" src="http://static.blog.csdn.net/scripts/ad.js?v=1.1"></script>
<link rel="Stylesheet" type="text/css" href="http://static.blog.csdn.net/skin/ink/css/style.css?v=1.1" />
<link id="RSSLink" title="RSS" type="application/rss+xml" rel="alternate" href="/lanphaday/rss/list" />
<link rel="shortcut icon" href="/favicon.ico" />
<link type="text/css" rel="stylesheet" href="http://static.blog.csdn.net/scripts/SyntaxHighlighter/styles/default.css" />
</head>
<body>
<script src="http://csdnimg.cn/pubnav/js/pub_topnav_2011.js"type="text/javascript"></script>

<div id="container">
<div id="header">
    <div class="header">
        <div id="blog_title">
            <h1><a href="http://blog.csdn.net/gzlaiyonghao">赖勇浩的编程私伙局</a></h1>
            <h2>game -&gt; webgame -&gt; web，一路走来，风雨兼程。</h2>
            <div class="clear"></div>
        </div>
        <div class="clear"></div>
    </div>
</div>
<div id="navigator">
    <div class="navigator_bg"></div>
    <div class="navigator">
        <ul>
            <li id="btnContents"><a href="http://blog.csdn.net/gzlaiyonghao?viewmode=contents"><span><img src="http://static.blog.csdn.net/images/ico_list.gif">目录视图</span></a></li>
            <li id="btnView"><a href="http://blog.csdn.net/gzlaiyonghao?viewmode=list"><span><img src="http://static.blog.csdn.net/images/ico_summary.gif">摘要视图</span></a></li>
            <li id="btnRss"><a href="http://blog.csdn.net/gzlaiyonghao/rss/list"><span><img src="http://static.blog.csdn.net/images/ico_rss.gif">订阅</span></a></li>
</ul>
    </div>
</div>
<script type="text/javascript">
    var username = "lanphaday";
    var _blogger = username;
    var blog_address = "http://blog.csdn.net/gzlaiyonghao";
    var static_host = "http://static.blog.csdn.net";
    var currentUserName = "";
</script>

<div id="body">
<div id="main">
<div class="main">
<div class="notice"> 

<a href="https://code.csdn.net/blog/12" target="_blank">
<font color=red>公告：博客新增直接引用代码功能</font></a>



&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;

<a href="http://www.csdn.net/article/2013-07-24/2816320" target="_blank"><font color=blue>专访谭海燕：移动互联网开发的那些事
</font></a>

&nbsp;&nbsp;&nbsp;&nbsp;

<a href="http://blog.csdn.net/csdnproduct/article/details/9495139
"target="_blank">
<font color=red>CSDN博客频道自定义域名、标签搜索功能上线啦！


 </font></a>

&nbsp;&nbsp;&nbsp;&nbsp;

<a href=""target="_blank">
<font color=blue>
 </font></a>




</div>
<div id="article_details" class="details">
    <div class="article_title">
    <span class="ico ico_type_Original"></span>
    <h3>
        <span class="link_title"><a href="/gzlaiyonghao/article/details/3547899">
        从一道笔试题谈算法优化（下）
        </a></span>
    </h3>
</div>

        
    <div class="article_manage">
        <span class="link_categories">
        分类：
            <a href="/lanphaday/article/category/328685">Algorithms</a> 
            <a href="/lanphaday/article/category/328647">C++</a> 
            <a href="/lanphaday/article/category/328657">Optimize</a> 
        </span>
    <span class="link_postdate">2008-12-18 11:32</span>
    <span class="link_view" title="阅读次数">11091人阅读</span>
    <span class="link_comments" title="评论次数"><a href="#comments">评论</a>(27)</span>
    <span class="link_collect"><a href="javascript:void(0);" onclick="javascript:collectArticle('从一道笔试题谈算法优化（下）','3547899');return false;" title="收藏">收藏</a></span>
    <span class="link_report"><a href="#report"  onclick="javascript:report(3547899,2);return false;" title="举报">举报</a></span>
    
</div>
<div class="tag2box"><a href='http://blog.csdn.net/tag/details.html?tag=%e7%ae%97%e6%b3%95' target=_blank>算法</a><a href='http://blog.csdn.net/tag/details.html?tag=%e4%bc%98%e5%8c%96' target=_blank>优化</a><a href='http://blog.csdn.net/tag/details.html?tag=%e6%b5%8b%e8%af%95' target=_blank>测试</a><a href='http://blog.csdn.net/tag/details.html?tag=microsoft' target=_blank>microsoft</a><a href='http://blog.csdn.net/tag/details.html?tag=class' target=_blank>class</a><a href='http://blog.csdn.net/tag/details.html?tag=merge' target=_blank>merge</a></div>


    
<div id="article_content" class="article_content">
<p><font color="#000080">因为受到经济危机的影响，我在 bokee.com 的博客可能随时出现无法访问的情况；因此将2005年到2006年间在 bokee.com 撰写的博客文章全部迁移到 csdn 博客中来，本文正是其中一篇迁移的文章。</font></p>
<p>&nbsp;</p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><font size="3"><font color="#000000"><span style="font-family: 宋体;">声明：本文最初发表于《电脑编程技巧与维护》</span><span lang="EN-US">2006</span><span style="font-family: 宋体;">年第</span><span lang="EN-US">5</span><span style="font-family: 宋体;">期，版本所有，如蒙转载，敬请连此声明一起转载，否则追究侵权责任。</span></font></font></p>
<h1 style="margin: 17pt 0cm 16.5pt;"><span style="font-family: 宋体;"><font color="#000000">从一道笔试题谈算法优化（下）</font></span></h1>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><font size="3"><span style="font-family: 宋体;"><font color="#000000">作者：赖勇浩（</font></span><span lang="EN-US"><a href="http://blog.csdn.net/lanphaday"><u><font color="#800080">http://blog.csdn.net/lanphaday</font></u></a></span><span style="font-family: 宋体;"><font color="#000000">）</font></span></font></p>
<h2 style="margin: 13pt 0cm;"><span style="font-family: 黑体;"><font color="#000000">苦想冥思</font></span></h2>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><font size="3"><font color="#000000"><span style="font-family: 宋体;">这次优化从</span><span lang="EN-US">solution_4</span><span style="font-family: 宋体;">产生的输出来入手。把</span><span lang="EN-US">solution_4</span><span style="font-family: 宋体;">的输出写到文件，查看后发现数组基本无序了。这说明在程序运行一定时间后，频繁的替换几乎将原本有序的结果数组全部换血。结果数组被替换的元素越多，查找最小元素要遍历的范围就越大，当被替换的元素个数接近结果数组的大小时，</span><span lang="EN-US">solution_4</span><span style="font-family: 宋体;">就退化成</span><span lang="EN-US">solution_3</span><span style="font-family: 宋体;">。因为</span><span lang="EN-US">solution_4</span><span style="font-family: 宋体;">很快退化也就直接导致它的效率没有本质上的提高。</span></font></font></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><font size="3"><font color="#000000"><span style="font-family: 宋体;">找出了原因，就应该找出一个解决的办法。通过上面的分析，知道</span><span lang="EN-US">solution_3</span><span style="font-family: 宋体;">和</span><span lang="EN-US">solution_4</span><span style="font-family: 宋体;">最消耗时间的是查找最小元素这一操作，将它减少（或去除）才有可能从本质上提高效率。这样思路又回到保持结果数组有序这一条老路上来。在上一节我们谈到保持数组有序的插入算法将带来大量的元素移动，频繁的插入操作将使这一方法在效率上得不偿失。有没有办法让元素移动去掉呢？答案也是有的——那就是使用链表。这时新的问题又来了，链表因为是非随机存取数据结构，插入前寻找位置的算法又是</span><span lang="EN-US">O(n)</span><span style="font-family: 宋体;">的。解决新的问题的答案是使用</span><span lang="EN-US">AVL</span><span style="font-family: 宋体;">树，但</span><span lang="EN-US">AVL</span><span style="font-family: 宋体;">树虽然插入和查找都是</span><span lang="EN-US">O(logn)</span><span style="font-family: 宋体;">，可是需要在插入后进行调整保持平衡，这又是一个耗费大量时间的操作。分析到现在，发现我们像进了迷宫，左冲右突都找不到突破口。</span></font></font></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><font size="3"><font color="#000000"><span style="font-family: 宋体;">现在请静下来想一想，如果思考结果没有跳出上面这个怪圈，那我不幸地告诉你：你被我误导了。这个故意的误导是要告诫大家：进行算法优化必须时刻保持自己头脑清醒，否则时刻都有可能陷入这样的迷宫当中。现在跳出这个怪圈重新思考，根据前文的分析，可知目标是减少（或去除）查找最小元素的操作次数（或查找时间），途径是让</span><span lang="EN-US">ResArr</span><span style="font-family: 宋体;">保持有序，难点在于给</span><span lang="EN-US">ResArr</span><span style="font-family: 宋体;">排序太费时。反过来想一想，是否需要时刻保持</span><span lang="EN-US">ResArr</span><span style="font-family: 宋体;">有序？答案为否，因为当查找最小元素需要遍历的范围较小时，速度还是很快的，这样就犯不着在每替换一个元素的时候都排序一次，而仅需要在无序元素较多的时候适时地排序即可（即保持查找最小元素要遍历的范围较小）。这个思想有用吗？写代码来测试一下：</span></font></font></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font size="3" color="#000000">template&lt; class T, class I &gt;</font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font size="3" color="#000000">void solution_5( T BigArr[], T ResArr[] )</font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font size="3" color="#000000">{</font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><font size="3"><font color="#000000"><span lang="EN-US"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>//</span><span style="font-family: 宋体;">同</span><span lang="EN-US">solution_4</span><span style="font-family: 宋体;">，略</span></font></font></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><font size="3"><font color="#000000"><span lang="EN-US"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>//</span><span style="font-family: 宋体;">这个后续元素比</span><span lang="EN-US">ResArr</span><span style="font-family: 宋体;">中最小的元素大，则替换。</span></font></font></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font size="3"><font color="#000000"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>if( BigArr[i] &gt; ResArr[MinElemIdx] )</font></font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font size="3"><font color="#000000"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>{</font></font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font size="3"><font color="#000000"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>ResArr[MinElemIdx] = BigArr[i];</font></font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font size="3"><font color="#000000"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>if( MinElemIdx == ZoneBeginIdx )</font></font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font size="3"><font color="#000000"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>--ZoneBeginIdx;</font></font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><font size="3"><font color="#000000"><span lang="EN-US"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>//</span><span style="font-family: 宋体;">太多杂乱元素的时候排序</span></font></font></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font size="3"><font color="#000000"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>if( ZoneBeginIdx &lt; 9400 )</font></font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font size="3"><font color="#000000"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>{</font></font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font size="3"><font color="#000000"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>std::sort( ResArr, ResArr + RES_ARR_SIZE, std::greater() );</font></font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font size="3"><font color="#000000"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>ZoneBeginIdx = MinElemIdx = RES_ARR_SIZE - 1;</font></font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font size="3"><font color="#000000"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>continue;</font></font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font size="3"><font color="#000000"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>}</font></font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><font size="3"><font color="#000000"><span lang="EN-US"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>//</span><span style="font-family: 宋体;">同</span><span lang="EN-US">solution_4</span><span style="font-family: 宋体;">，略</span></font></font></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font size="3" color="#000000">}</font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><font size="3"><font color="#000000"><span style="font-family: 宋体;">代码中的</span><span lang="EN-US">9400</span><span style="font-family: 宋体;">是经过试验得出的最好数值，即在有</span><span lang="EN-US">600</span><span style="font-family: 宋体;">个元素无序的时候进行一次排序。测试的结果令人惊喜，用时仅</span><span lang="EN-US">400</span><span style="font-family: 宋体;">毫秒左右，约为</span><span lang="EN-US">solution_4</span><span style="font-family: 宋体;">的五分之一，这也证明了上述思想是正确的。</span></font></font></p>
<h2 style="margin: 13pt 0cm;"><span style="font-family: 黑体;"><font color="#000000">殚思极虑</font></span></h2>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><font size="3"><font color="#000000"><span style="font-family: 宋体;">脚步永远向前，在取得</span><span lang="EN-US">solution_5</span><span style="font-family: 宋体;">这样的成果之后，仍然有必要分析和优化它。对这一看似已经完美的算法进行下一次优化要从哪里着手？这时候要借助于性能剖分工具了，常用的有</span><span lang="EN-US">Intel</span><span style="font-family: 宋体;">的</span><span lang="EN-US">VTune</span><span style="font-family: 宋体;">以及</span><span lang="EN-US">Microsoft Visual C++</span><span style="font-family: 宋体;">自带的</span><span lang="EN-US">profile</span><span style="font-family: 宋体;">等。使用</span><span lang="EN-US">MS profile</span><span style="font-family: 宋体;">对</span><span lang="EN-US">solution_5</span><span style="font-family: 宋体;">分析产生的报告如下（略去一些无关数据）：</span></font></font></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font size="3"><font color="#000000"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Func<span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Func+Child<span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Hit</font></font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font size="3"><font color="#000000"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Time<span style="">&nbsp;&nbsp; </span>%<span style="">&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="">&nbsp;&nbsp;&nbsp;&nbsp;</span>Time<span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>%<span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Count<span style="">&nbsp; </span>Function</font></font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font size="3" color="#000000">---------------------------------------------------------</font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font size="3"><font color="#000000"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>37.718<span style="">&nbsp;&nbsp; </span>1.0<span style="">&nbsp;&nbsp;&nbsp;&nbsp; </span>3835.317<span style="">&nbsp; </span>99.5<span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>1 _main (algo.obj)</font></font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font size="3"><font color="#000000"><span style="">&nbsp;&nbsp;&nbsp;&nbsp; </span>111.900<span style="">&nbsp;&nbsp; </span>2.9<span style="">&nbsp;&nbsp;&nbsp;&nbsp; </span>3220.082<span style="">&nbsp; </span>83.6<span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>1 solution_5(int * ...</font></font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font size="3"><font color="#000000"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>0.000<span style="">&nbsp;&nbsp; </span>0.0<span style="">&nbsp;&nbsp;&nbsp;&nbsp; </span>3074.063<span style="">&nbsp; </span>79.8<span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>112 _STL::sort(int *,...</font></font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font size="3"><font color="#000000"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>……</font></font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><font size="3"><font color="#000000"><span style="font-family: 宋体;">可以发现</span><span lang="EN-US">sort</span><span style="font-family: 宋体;">函数的调用用去了将近</span><span lang="EN-US">80%</span><span style="font-family: 宋体;">的时间，这表明</span><span lang="EN-US">sort</span><span style="font-family: 宋体;">函数是问题所在，优化应该从这里着手。但正如前文所说，</span><span lang="EN-US">STL</span><span style="font-family: 宋体;">的</span><span lang="EN-US">sort</span><span style="font-family: 宋体;">已经高度优化速度很快了，再对他作优化是极难的；而且</span><span lang="EN-US">sort</span><span style="font-family: 宋体;">函数里又调用了其它</span><span lang="EN-US">STL</span><span style="font-family: 宋体;">内部函数，如蛛丝般牵来绕去，读得懂已经不是一般人可完成的了，优化从何谈起？</span></font></font></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><font size="3"><font color="#000000"><span style="font-family: 宋体;">我们不能左右天气，但我们可以左右心情；我们不能修改</span><span lang="EN-US">sort</span><span style="font-family: 宋体;">函数，但我们可以控制</span><span lang="EN-US">sort</span><span style="font-family: 宋体;">的调用。再看看</span><span lang="EN-US">solution_5</span><span style="font-family: 宋体;">里对</span><span lang="EN-US">sort</span><span style="font-family: 宋体;">的调用有没有什么蛛丝马迹可寻：</span></font></font></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font size="3"><font color="#000000"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>std::sort( ResArr, ResArr + RES_ARR_SIZE, std::greater() );</font></font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><font size="3"><font color="#000000"><span style="font-family: 宋体;">这个调用是把结果数组</span><span lang="EN-US">ResArr</span><span style="font-family: 宋体;">重新排序一遍。需要把整个</span><span lang="EN-US">ResArr</span><span style="font-family: 宋体;">完全重新排序吗？答案是需要的，但可以不使用这个方法。因为</span><span lang="EN-US">ResArr</span><span style="font-family: 宋体;">里的元素绝大部分是有序的（结合上文可知前面</span><span lang="EN-US">94%</span><span style="font-family: 宋体;">的元素都有序），待排序的只是</span><span lang="EN-US">6%</span><span style="font-family: 宋体;">。只要把这</span><span lang="EN-US">600</span><span style="font-family: 宋体;">个数据重新排序然后将前后两个有序数组归并为一个有序数组即可（归并算法的时间复杂度为</span><span lang="EN-US">O(n+m)</span><span style="font-family: 宋体;">），将因为排序的数据量较少而大大节约时间。写代码如下：</span></font></font></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font size="3" color="#000000">template&lt; class T, class I &gt;</font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font size="3" color="#000000">void solution_6( T BigArr[], T ResArr[] )</font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font size="3" color="#000000">{</font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><font size="3"><font color="#000000"><span lang="EN-US"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>//</span><span style="font-family: 宋体;">同</span><span lang="EN-US">solution_5</span><span style="font-family: 宋体;">，略</span></font></font></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><font size="3"><font color="#000000"><span lang="EN-US"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>//</span><span style="font-family: 宋体;">太多杂乱元素的时候排序</span></font></font></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font size="3"><font color="#000000"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>if( ZoneBeginIdx &lt; 9400 )</font></font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font size="3"><font color="#000000"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>{</font></font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font size="3"><font color="#000000"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>std::sort( ResArr + 9400, ResArr + RES_ARR_SIZE, std::greater() );</font></font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font size="3"><font color="#000000"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>std::merge(ResArr, ResArr + 9400, ResArr + 9400, ResArr + RES_ARR_SIZE, BigArr, std::greater() );</font></font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font size="3"><font color="#000000"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>memcpy( ResArr, BigArr, sizeof(T) * RES_ARR_SIZE );</font></font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><font size="3"><font color="#000000"><span lang="EN-US"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>//</span><span style="font-family: 宋体;">同</span><span lang="EN-US">solution_5</span><span style="font-family: 宋体;">，略</span></font></font></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font size="3" color="#000000">}</font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><font size="3"><font color="#000000"><span style="font-family: 宋体;">经测试，</span><span lang="EN-US">solutio_6</span><span style="font-family: 宋体;">的运行时间为</span><span lang="EN-US">250</span><span style="font-family: 宋体;">毫秒左右，比</span><span lang="EN-US">solution_5</span><span style="font-family: 宋体;">快了将近一半，通过</span><span lang="EN-US">profile</span><span style="font-family: 宋体;">分析报告计算</span><span lang="EN-US">sort</span><span style="font-family: 宋体;">函数和</span><span lang="EN-US">merge</span><span style="font-family: 宋体;">函数的占用时间总计约为执行时间的</span><span lang="EN-US">19.6%</span><span style="font-family: 宋体;">，远小于</span><span lang="EN-US">solution_5</span><span style="font-family: 宋体;">的占用时间。</span></font></font></p>
<h2 style="margin: 13pt 0cm;"><span style="font-family: 黑体;"><font color="#000000">结束语</font></span></h2>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><font size="3"><font color="#000000"><span style="font-family: 宋体;">一番努力之后，终于将一个原来需要近一个小时才能解决的问题用</span><span lang="EN-US">250</span><span style="font-family: 宋体;">毫秒完成，文章到这里要完结，不过上述算法仍有可优化的余地，这就要读者朋友自己去挖掘了。我希望看到这篇文章的人不仅仅是赞叹算法的奇妙，更希望能够学会算法优化的方法和技巧。对于算法优化的方法，我总结如下（仅供参考及抛砖引玉之用）：</span></font></font></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt 21pt; text-indent: -21pt;"><font color="#000000"><span style="font-family: Wingdings;" lang="EN-US"><span style=""><font size="3">l</font><span style="font-family: 'Times New Roman'; font-style: normal; font-variant: normal; font-weight: normal; font-size: 7pt; line-height: normal; font-size-adjust: none; font-stretch: normal; -x-system-font: none;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><span style="font-family: 宋体;"><font size="3">不断地否定自己的方法</font></span><span lang="EN-US"><font size="3">[</font></span><span style="font-family: 宋体;"><font size="3">全文</font></span><span lang="EN-US"><font size="3">]</font></span></font></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt 21pt; text-indent: -21pt;"><font color="#000000"><span style="font-family: Wingdings;" lang="EN-US"><span style=""><font size="3">l</font><span style="font-family: 'Times New Roman'; font-style: normal; font-variant: normal; font-weight: normal; font-size: 7pt; line-height: normal; font-size-adjust: none; font-stretch: normal; -x-system-font: none;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><span style="font-family: 宋体;"><font size="3">减少重复计算</font></span><span lang="EN-US"><font size="3">[solution_3]</font></span><span style="font-family: 宋体;"><font size="3">；</font></span></font></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt 21pt; text-indent: -21pt;"><font color="#000000"><span style="font-family: Wingdings;" lang="EN-US"><span style=""><font size="3">l</font><span style="font-family: 'Times New Roman'; font-style: normal; font-variant: normal; font-weight: normal; font-size: 7pt; line-height: normal; font-size-adjust: none; font-stretch: normal; -x-system-font: none;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><span style="font-family: 宋体;"><font size="3">不要做没要求你做的事</font></span><span lang="EN-US"><font size="3">[solution_3]</font></span><font size="3"><span style="font-family: 宋体;">；</span> </font></font></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt 21pt; text-indent: -21pt;"><font color="#000000"><span style="font-family: Wingdings;" lang="EN-US"><span style=""><font size="3">l</font><span style="font-family: 'Times New Roman'; font-style: normal; font-variant: normal; font-weight: normal; font-size: 7pt; line-height: normal; font-size-adjust: none; font-stretch: normal; -x-system-font: none;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><span style="font-family: 宋体;"><font size="3">深化对需求的理解</font></span><span lang="EN-US"><font size="3">[solution_4]</font></span><span style="font-family: 宋体;"><font size="3">；</font></span></font></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt 21pt; text-indent: -21pt;"><font color="#000000"><span style="font-family: Wingdings;" lang="EN-US"><span style=""><font size="3">l</font><span style="font-family: 'Times New Roman'; font-style: normal; font-variant: normal; font-weight: normal; font-size: 7pt; line-height: normal; font-size-adjust: none; font-stretch: normal; -x-system-font: none;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><span style="font-family: 宋体;"><font size="3">温故而知新，多重读自己的算法代码</font></span><span lang="EN-US"><font size="3">[solution_4]</font></span><span style="font-family: 宋体;"><font size="3">；</font></span></font></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt 21pt; text-indent: -21pt;"><font color="#000000"><span style="font-family: Wingdings;" lang="EN-US"><span style=""><font size="3">l</font><span style="font-family: 'Times New Roman'; font-style: normal; font-variant: normal; font-weight: normal; font-size: 7pt; line-height: normal; font-size-adjust: none; font-stretch: normal; -x-system-font: none;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><span style="font-family: 宋体;"><font size="3">从程序的输出（或者中间结果）里找突破</font></span><span lang="EN-US"><font size="3">[solution_5]</font></span><span style="font-family: 宋体;"><font size="3">；</font></span></font></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt 21pt; text-indent: -21pt;"><font color="#000000"><span style="font-family: Wingdings;" lang="EN-US"><span style=""><font size="3">l</font><span style="font-family: 'Times New Roman'; font-style: normal; font-variant: normal; font-weight: normal; font-size: 7pt; line-height: normal; font-size-adjust: none; font-stretch: normal; -x-system-font: none;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><span style="font-family: 宋体;"><font size="3">时刻保持头脑清醒，常常跳出习惯的框框</font></span><span lang="EN-US"><font size="3">[solution_5]</font></span><span style="font-family: 宋体;"><font size="3">；</font></span></font></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt 21pt; text-indent: -21pt;"><font color="#000000"><span style="font-family: Wingdings;" lang="EN-US"><span style=""><font size="3">l</font><span style="font-family: 'Times New Roman'; font-style: normal; font-variant: normal; font-weight: normal; font-size: 7pt; line-height: normal; font-size-adjust: none; font-stretch: normal; -x-system-font: none;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><span style="font-family: 宋体;"><font size="3">善于使用工具</font></span><span lang="EN-US"><font size="3">[solution_6]</font></span><span style="font-family: 宋体;"><font size="3">；</font></span></font></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt 21pt; text-indent: -21pt;"><font color="#000000"><span style="font-family: Wingdings;" lang="EN-US"><span style=""><font size="3">l</font><span style="font-family: 'Times New Roman'; font-style: normal; font-variant: normal; font-weight: normal; font-size: 7pt; line-height: normal; font-size-adjust: none; font-stretch: normal; -x-system-font: none;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><span style="font-family: 宋体;"><font size="3">养成解决一个问题思考多个方案的习惯</font></span><span lang="EN-US"><font size="3">[</font></span><span style="font-family: 宋体;"><font size="3">全文</font></span><font size="3"><span lang="EN-US">]</span><span style="font-family: 宋体;">。</span></font></font></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><font size="3"><font color="#000000"><span style="font-family: 宋体;">最后要讲的一点就是</span><span lang="EN-US">STL</span><span style="font-family: 宋体;">里提供了一个可以直接完成这一问题的算法——</span><span lang="EN-US">nth_element</span><span style="font-family: 宋体;">。经测试，</span><span lang="EN-US">nth_element</span><span style="font-family: 宋体;">在大数组比较小的时候速度比以上算法都要快，但在大数组尺寸为</span><span lang="EN-US">1</span><span style="font-family: 宋体;">亿的时候所用的时间为</span><span lang="EN-US">1.3</span><span style="font-family: 宋体;">秒左右，是</span><span lang="EN-US">solution_6</span><span style="font-family: 宋体;">运行时间的</span><span lang="EN-US">5</span><span style="font-family: 宋体;">倍。原因在于</span><span lang="EN-US">nth_elenemt</span><span style="font-family: 宋体;">的实现方法跟本文介绍的算法大不相同，有兴趣的朋友可以去阅读其源码。建议大家在一般情况下使用</span><span lang="EN-US">STL</span><span style="font-family: 宋体;">的</span><span lang="EN-US">nth_element</span><span style="font-family: 宋体;">，它在数量为十万级的时候仍有极好的性能。</span></font></font></p>
<h2 style="margin: 13pt 0cm;"><span style="font-family: 黑体;"><font color="#000000">参考资料：</font></span></h2>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><font size="3"><font color="#000000"><span lang="EN-US"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>[1] </span><span style="font-family: 宋体;">侯捷</span> <span style="font-family: 宋体;">《</span><span lang="EN-US">STL</span><span style="font-family: 宋体;">源码剖析》</span> <span style="font-family: 宋体;">华中科技大学出版社</span><span lang="EN-US"> 2002</span><span style="font-family: 宋体;">年</span><span lang="EN-US">6</span><span style="font-family: 宋体;">月</span></font></font></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><font size="3"><font color="#000000"><span lang="EN-US"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>[2] Anany Levitin </span><span style="font-family: 宋体;">潘彦</span><span lang="EN-US">[</span><span style="font-family: 宋体;">译</span><span lang="EN-US">] </span><span style="font-family: 宋体;">《算法设计与分析基础》</span> <span style="font-family: 宋体;">清华大学出版社</span><span lang="EN-US"> 2004</span><span style="font-family: 宋体;">年</span><span lang="EN-US">6</span><span style="font-family: 宋体;">月</span></font></font></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font size="3"><font color="#000000"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>[3] http://job.csdn.net/n/20051216/31105.html</font></font></span></p>
<h2 style="margin: 13pt 0cm;"><span style="font-family: 黑体;"><font color="#000000">注：</font></span></h2>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><font size="3"><font color="#000000"><span lang="EN-US"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>[1] </span><span style="font-family: 宋体;">此题目版权归出题人或者其单位所有</span></font></font></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><font size="3"><font color="#000000"><span lang="EN-US"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>[2] </span><span style="font-family: 宋体;">本文所有的优化都针对于平均情况，即大数组由随机数构成且无序</span></font></font></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><font size="3"><font color="#000000"><span lang="EN-US"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>[3] </span><span style="font-family: 宋体;">所有测试均设</span><span lang="EN-US">BIG_ARR_SIZE = 1</span><span style="font-family: 宋体;">亿，</span><span lang="EN-US">RES_ARR_SIZE = 1</span><span style="font-family: 宋体;">万，测试的机器配置为：</span><span lang="EN-US">CPU P4EE <st1:chmetcnv w:st="on" tcsc="0" numbertype="1" negative="False" hasspace="False" sourcevalue="3" unitname="g">3.0G</st1:chmetcnv> + <st1:chmetcnv w:st="on" tcsc="0" numbertype="1" negative="False" hasspace="True" sourcevalue="512" unitname="m">512 M</st1:chmetcnv> memory</span><span style="font-family: 宋体;">，</span><span lang="EN-US">HyperThreading Enabled</span><span style="font-family: 宋体;">，操作系统：</span><span lang="EN-US">Windows 2000 pro</span><span style="font-family: 宋体;">，编译器：</span><span lang="EN-US"> MS VC++ 6.0 + sp6</span><span style="font-family: 宋体;">，</span><span lang="EN-US">STL</span><span style="font-family: 宋体;">库：</span><span lang="EN-US"> STLport <st1:chsdate w:st="on" isrocdate="False" islunardate="False" day="30" month="12" year="1899">4.6.2</st1:chsdate></span><span style="font-family: 宋体;">。</span></font></font></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><font size="3"><font color="#000000"><span lang="EN-US"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>[4] </span><span style="font-family: 宋体;">如果要求有序，可以通过先找出结果，再对结果排序完成要求</span></font></font></p>
<p>&nbsp;</p>
</div>

<div class="share_buttons" id="sharePanel"></div>
<!--192.168.100.33-->
<div class="article_next_prev">
    <li class="prev_article"><span>上一篇：</span><a href="/gzlaiyonghao/article/details/3547776">从一道笔试题谈算法优化（上）</a></li>
    <li class="next_article"><span>下一篇：</span><a href="/gzlaiyonghao/article/details/3599699">《非诚勿扰》</a></li>
</div>


    
</div>
<div id="ad_cen">
<script type="text/javascript" >BAIDU_CLB_SLOT_ID = "117306";</script>
<script type="text/javascript" src="http://cbjs.baidu.com/js/o.js"></script>
</div>
<script type="text/javascript">
    //new Ad(4, 'ad_cen');
</script>
<div id="comment_title" class="panel_head">查看评论<a name="comments"></a></div>
<div id="comment_list"></div>
<div id="comment_bar"></div>
<div id="comment_form"></div>
<div class="announce">* 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场<a name="reply"></a><a name="quote"></a></div>
<script type="text/javascript">
    var fileName = '3547899';
    var commentscount = 27;
    var islock = false
</script>
<script type="text/javascript" src="http://static.blog.csdn.net/scripts/comment.js"></script>
<div id="ad_bot"></div>
<script type="text/javascript">
    new Ad(5, 'ad_bot');
</script>
<div id="report_dialog"></div>

<div id="d-top" style="display:none;">
<a id="d-top-a" href="#" title="回到顶部">
<img src="http://static.blog.csdn.net/images/top.png" alt="TOP" /></a>
</div>
<script type="text/javascript">
    $(function(){
        var d_top=$('#d-top');
        document.onscroll=function(){
            var scrTop=(document.body.scrollTop||document.documentElement.scrollTop);
            if(scrTop>500){
                d_top.show();
            }else{
                d_top.hide();
            }
        }
        $('#d-top-a').click(function(){
            scrollTo(0,0);
            this.blur();
            return false;
        });
    });
</script>

<div class="clear"></div>
</div>
</div>

<div id="side">
<div class="side">
<div class="panel" id="panel_Search">
    <ul class="panel_head"><span>文章搜索</span></ul>
    <ul class="panel_body">
        <form id="frmSearch" action="http://so.csdn.net/search" class="form_search" target="_blank">
        <span><input id="inputSearch" type="text" class="blogsearch" title="请输入关键字" /></span>
        <input id="btnSubmit" type="submit" value="搜索" title="search in blog" />
        <input type="hidden" name="q" id="inputQ" />
        <input type="hidden" name="t" value="blog" />
        <a id="btnSearchBlog" target="_blank"></a>
        </form>
    </ul>
</div><div id="panel_Profile" class="panel">
<ul class="panel_head"><span>个人资料</span></ul>
<ul class="panel_body profile">
<div id="blog_userface">
    <a href="http://my.csdn.net/lanphaday" target="_blank">
    <img src="http://avatar.csdn.net/F/C/4/1_lanphaday.jpg" title="访问我的空间" style="max-width:90%"/>
    </a>
    <br />
    <span><a href="http://my.csdn.net/lanphaday" class="user_name" target="_blank">lanphaday</a></span>
</div>
<div class="interact">
<a href="javascript:void(0);" class="attent" id="span_add_follow" title="[加关注]"></a>
<a href="javascript:void(0);" class="letter" onclick="loginto(1)" title="[发私信]"></a>
</div>
<div id="blog_medal">
        <div class="ico_expert" title="CSDN认证专家"></div>
</div>
<ul id="blog_rank">
    <li>访问：<span>1802398次</span></li>
    <li>积分：<span>18638分</span></li>
    <li>排名：<span>第91名</span></li>
</ul>
<ul id="blog_statistics">
    <li>原创：<span>193篇</span></li>
    <li>转载：<span>12篇</span></li>
    <li>译文：<span>33篇</span></li>
    <li>评论：<span>3430条</span></li>
</ul>
</ul>
</div>

<div class="panel">
<ul class="panel_body" style="padding:0;">
<script type="text/javascript" src="http://cbjs.baidu.com/js/m.js"></script> 
<script type="text/javascript"> 
BAIDU_CLB_preloadSlots("724643","117306"); 
</script>
<script type="text/javascript">BAIDU_CLB_fillSlot("724643");</script> 
</ul>
</div>
<div id="custom_column_8615922" class="panel">
<ul class="panel_head"><span>weibo</span></ul>
<ul class="panel_body">
<iframe width="100%" height="550" class="share_self"  frameborder="0" scrolling="no" src="http://widget.weibo.com/weiboshow/index.php?language=&width=0&height=550&fansRow=2&ptype=1&speed=0&skin=1&isTitle=0&noborder=1&isWeibo=1&isFans=0&uid=1924010407&verifier=240a04bd&dpc=1"></iframe>
</ul>
</div><div id="hotarticls" class="panel">
<ul class="panel_head"><span>阅读排行</span></ul>
<ul class="panel_body itemlist">
<li>
<a href="/gzlaiyonghao/article/details/6564162" title="C++11中值得关注的几大变化">C++11中值得关注的几大变化</a><span>(65115)</span>
</li>
<li>
<a href="/gzlaiyonghao/article/details/7217506" title="2012 不宜进入的三个技术点（上）">2012 不宜进入的三个技术点（上）</a><span>(61373)</span>
</li>
<li>
<a href="/gzlaiyonghao/article/details/7223385" title="2012 不宜进入的三个技术点（下）">2012 不宜进入的三个技术点（下）</a><span>(48066)</span>
</li>
<li>
<a href="/gzlaiyonghao/article/details/7218611" title="2012 不宜进入的三个技术点（中）">2012 不宜进入的三个技术点（中）</a><span>(46551)</span>
</li>
<li>
<a href="/gzlaiyonghao/article/details/8372839" title="记一次薪酬谈判的教训">记一次薪酬谈判的教训</a><span>(41732)</span>
</li>
<li>
<a href="/gzlaiyonghao/article/details/6204639" title="三本可以一买的 Python 书">三本可以一买的 Python 书</a><span>(39396)</span>
</li>
<li>
<a href="/gzlaiyonghao/article/details/2845258" title="为什么《Dive into Python》不值得推荐">为什么《Dive into Python》不值得推荐</a><span>(35063)</span>
</li>
<li>
<a href="/gzlaiyonghao/article/details/1852726" title="用Python做图像处理">用Python做图像处理</a><span>(34310)</span>
</li>
<li>
<a href="/gzlaiyonghao/article/details/3166735" title="（已加马赛克）10 行代码判定色*情*图片——Python 也可以系列之二">（已加马赛克）10 行代码判定色*情*图片——Python 也可以系列之二</a><span>(31560)</span>
</li>
<li>
<a href="/gzlaiyonghao/article/details/6303944" title="一本超越期待的 C++ 书——简评《Boost程序库完全开发指南：深入C++“准”标准库》">一本超越期待的 C++ 书——简评《Boost程序库完全开发指南：深入C++“准”标准库》</a><span>(24834)</span>
</li>
</ul>
</div>
<div id="panel_Category" class="panel">
    <ul class="panel_head"><span>博客专栏</span></ul>
    <ul class="panel_body" id="sp_column">
    <table cellpadding="0" cellspacing="0"><tr>
    <td style="padding:10px 10px 0 0;">
    <a href="http://blog.csdn.net/column/details/books.html" target="_blank"><img src="http://avatar.csdn.net/blogpic/20130731150440125.jpg" style="width:75px;height:75px;" /></a>
    </td>
    <td style="padding:10px 0; vertical-align:top;">
    <a href="http://blog.csdn.net/column/details/books.html" target="_blank">老赖谈书</a>
    <p>文章：9篇</p>
    <span>阅读：143763</span>
    </td>
    </tr></table>
    <table cellpadding="0" cellspacing="0"><tr>
    <td style="padding:10px 10px 0 0;">
    <a href="http://blog.csdn.net/column/details/trac.html" target="_blank"><img src="http://avatar.csdn.net/blogpic/20130720172211750.jpg" style="width:75px;height:75px;" /></a>
    </td>
    <td style="padding:10px 0; vertical-align:top;">
    <a href="http://blog.csdn.net/column/details/trac.html" target="_blank">Trac 经验谈</a>
    <p>文章：8篇</p>
    <span>阅读：42091</span>
    </td>
    </tr></table>
    <table cellpadding="0" cellspacing="0"><tr>
    <td style="padding:10px 10px 0 0;">
    <a href="http://blog.csdn.net/column/details/python-can.html" target="_blank"><img src="http://avatar.csdn.net/blogpic/20120202110752573.jpg" style="width:75px;height:75px;" /></a>
    </td>
    <td style="padding:10px 0; vertical-align:top;">
    <a href="http://blog.csdn.net/column/details/python-can.html" target="_blank">Python 也可以</a>
    <p>文章：4篇</p>
    <span>阅读：98250</span>
    </td>
    </tr></table>
    </ul>
</div><div id="newcomments" class="panel">
<ul class="panel_head"><span>最新评论</span></ul>
<ul class="panel_body itemlist">
    <li>
    <a href="/lanphaday/article/details/8372839#comments">记一次薪酬谈判的教训</a>
    <p style="margin:0px;"><a href="/heehee163" class="user_name">heehee163</a>:
博主现在还在游戏行业吗？创业还是公司上班？对你在智能体开发特别有兴趣。现在有个创新移动社交游戏想找你...
    </p>
    </li>
    <li>
    <a href="/lanphaday/article/details/8372839#comments">记一次薪酬谈判的教训</a>
    <p style="margin:0px;"><a href="/u011577408" class="user_name">u011577408</a>:
不知道为什么这篇旧文突然又出现在我的RSS里了。。。顺便评论下吧。谈判的本质是实力和合作。技巧是最次...
    </p>
    </li>
    <li>
    <a href="/lanphaday/article/details/8139626#comments">Python 于 webgame 的应用（上）</a>
    <p style="margin:0px;"><a href="/alexsunmiu" class="user_name">alexsunmiu</a>:
@sb3day:1、你有1W桌的需求？每桌至少两人也要两万人同时在线。。。2、即使有这种需求，简单多...
    </p>
    </li>
    <li>
    <a href="/lanphaday/article/details/7162907#comments">强制 code review：reviewboard+svn 的方案</a>
    <p style="margin:0px;"><a href="/wedwind" class="user_name">wedwind</a>:
接上条  File &quot;E:\Python26\Lib\site-packages\pkg_resou...
    </p>
    </li>
    <li>
    <a href="/lanphaday/article/details/7162907#comments">强制 code review：reviewboard+svn 的方案</a>
    <p style="margin:0px;"><a href="/wedwind" class="user_name">wedwind</a>:
非常感谢楼主，按照您所述的配置，我弄好之后，在提交的时候无论是否填写review:id都会报以下错误...
    </p>
    </li>
    <li>
    <a href="/lanphaday/article/details/6321415#comments">以小见大——那些基于 protobuf 的五花八门的 RPC（4）</a>
    <p style="margin:0px;"><a href="/wzl0507" class="user_name">wzl0507</a>:
我觉得使用这种自动生成代码的方法实现的RPC都会很乱的。。。
    </p>
    </li>
    <li>
    <a href="/lanphaday/article/details/9168193#comments">给有兴趣、有责任要讲课、分享的朋友推荐两本书</a>
    <p style="margin:0px;"><a href="/GJYSK" class="user_name">GJYSK</a>:
博主推荐的两本书相当的不错呀！
    </p>
    </li>
    <li>
    <a href="/lanphaday/article/details/1656969#comments">[python] Mixin 扫盲班</a>
    <p style="margin:0px;"><a href="/YIDAY" class="user_name">YIDAY</a>:
这根本不是minix
    </p>
    </li>
    <li>
    <a href="/lanphaday/article/details/6564162#comments">C++11中值得关注的几大变化</a>
    <p style="margin:0px;"><a href="/reff1" class="user_name">reff1</a>:
到最后C++与Java的区别就只是编译器不同了～。
    </p>
    </li>
    <li>
    <a href="/lanphaday/article/details/3547899#comments">从一道笔试题谈算法优化（下）</a>
    <p style="margin:0px;"><a href="/felix021" class="user_name">felix021</a>:
@vimney:这种问题你要用上链表就不用说了，性能肯定不行。然后你在链表里二分查找？你真的明白你在...
    </p>
    </li>
</ul>
</div>
<div id="panel_Archive" class="panel">
<ul class="panel_head"><span>文章存档</span></ul>
<ul class="panel_body">
<div id="archive_list">
<!--归档统计-->
<li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2013/06">2013年06月</a><span>(1)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2013/03">2013年03月</a><span>(1)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2013/01">2013年01月</a><span>(1)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2012/12">2012年12月</a><span>(2)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2012/11">2012年11月</a><span>(2)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2012/10">2012年10月</a><span>(1)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2012/09">2012年09月</a><span>(1)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2012/06">2012年06月</a><span>(1)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2012/02">2012年02月</a><span>(4)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2012/01">2012年01月</a><span>(4)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2011/12">2011年12月</a><span>(5)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2011/11">2011年11月</a><span>(2)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2011/09">2011年09月</a><span>(3)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2011/08">2011年08月</a><span>(3)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2011/07">2011年07月</a><span>(5)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2011/06">2011年06月</a><span>(3)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2011/05">2011年05月</a><span>(2)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2011/04">2011年04月</a><span>(7)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2011/03">2011年03月</a><span>(3)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2011/02">2011年02月</a><span>(1)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2011/01">2011年01月</a><span>(1)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2010/12">2010年12月</a><span>(6)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2010/11">2010年11月</a><span>(3)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2010/09">2010年09月</a><span>(1)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2010/05">2010年05月</a><span>(3)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2010/04">2010年04月</a><span>(1)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2010/03">2010年03月</a><span>(5)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2010/02">2010年02月</a><span>(2)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2010/01">2010年01月</a><span>(3)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2009/12">2009年12月</a><span>(5)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2009/11">2009年11月</a><span>(7)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2009/10">2009年10月</a><span>(3)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2009/09">2009年09月</a><span>(5)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2009/05">2009年05月</a><span>(4)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2009/04">2009年04月</a><span>(4)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2009/03">2009年03月</a><span>(4)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2009/02">2009年02月</a><span>(11)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2009/01">2009年01月</a><span>(5)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2008/12">2008年12月</a><span>(16)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2008/11">2008年11月</a><span>(2)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2008/10">2008年10月</a><span>(6)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2008/09">2008年09月</a><span>(6)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2008/08">2008年08月</a><span>(4)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2008/07">2008年07月</a><span>(2)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2008/06">2008年06月</a><span>(4)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2008/05">2008年05月</a><span>(4)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2008/04">2008年04月</a><span>(2)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2008/03">2008年03月</a><span>(2)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2008/02">2008年02月</a><span>(3)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2008/01">2008年01月</a><span>(7)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2007/12">2007年12月</a><span>(2)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2007/11">2007年11月</a><span>(2)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2007/10">2007年10月</a><span>(3)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2007/09">2007年09月</a><span>(2)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2007/08">2007年08月</a><span>(8)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2007/07">2007年07月</a><span>(6)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2007/06">2007年06月</a><span>(4)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2007/05">2007年05月</a><span>(2)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2007/04">2007年04月</a><span>(3)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2007/03">2007年03月</a><span>(1)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2007/02">2007年02月</a><span>(4)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2007/01">2007年01月</a><span>(4)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2006/12">2006年12月</a><span>(1)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2006/11">2006年11月</a><span>(2)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2006/10">2006年10月</a><span>(2)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2006/09">2006年09月</a><span>(1)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2006/07">2006年07月</a><span>(3)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2006/06">2006年06月</a><span>(5)</span></li>
</div>
</ul>
</div>
<div id="custom_column_955236" class="panel">
<ul class="panel_head"><span>编程语言</span></ul>
<ul class="panel_body">
<ul><li><a href="http://shootout.alioth.debian.org/gp4/benchmark.php?test=all&amp;amp;amp;lang=all" target="_blank">性能排名</a></li><li><a href="http://www.tiobe.com/index.php/content/paperinfo/tpci/index.html" target="_blank">TIOBE 流行度</a></li><li><a href="http://langpop.com/" target="_blank">LangPop 流行度</a></li><li><a href="http://lang-index.sourceforge.net/" target="_blank">透明排行榜</a></li>

<li><a href="https://github.com/languages" target="_blank">Github top lang</a></li>

<li><a href="http://www.statisticbrain.com/computer-programming-language-statistics/" target="_blank">Computer Programming Language Statistics</a></li>

<li><a href="http://db-engines.com/en/ranking" target="_blank">DB Engines</a></li>


</ul>
</ul>
</div></div>
<div class="clear"></div>
</div>

<div class="clear"></div>
</div>

<script type="text/javascript" src="http://static.blog.csdn.net/scripts/newblog.min.js?v=1.1"></script>
<script type="text/javascript" src="http://medal.blog.csdn.net/showblogmedal.ashx?blogid=57230"></script>

<script type="text/javascript">
document.write('<script type="text/javascript" src="http://csdnimg.cn/pubfooter/js/publib_footer.js?' + Math.floor(new Date()/120000).toString(36) + '="></'+'script>');
</script>

<script type="text/javascript" src="http://passport.csdn.net/content/loginbox/login.js"></script>
<script type="text/javascript" src="http://js.tongji.linezing.com/2673176/tongji.js"></script>
<script type="text/javascript">document.write("<img src=http://counter.csdn.net/pv.aspx?id=24 border=0 width=0 height=0>");</script>
<script type="text/javascript" src="http://www.csdn.net/ui/scripts/Csdn/counter.js?v=1"></script>


<script type="text/javascript" src="http://ad.csdn.net/scripts/ad-blog.js"></script>

<script type="text/javascript" src="http://zz.csdn.net/js/count.js"></script>

</div>
</body>
</html>