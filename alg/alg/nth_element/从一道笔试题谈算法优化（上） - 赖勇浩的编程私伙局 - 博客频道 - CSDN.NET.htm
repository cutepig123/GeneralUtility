<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>从一道笔试题谈算法优化（上） - 赖勇浩的编程私伙局 - 博客频道 - CSDN.NET</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="description" content="&#160;因为受到经济危机的影响，我在 bokee.com 的博客可能随时出现无法访问的情况；因此将2005年到2006年间在 bokee.com 撰写的博客文章全部迁移到 csdn 博客中来，本文正是其中一篇迁移的文章。 &#160;声明：本文最初发表于《电脑编程技巧与维护》2006年第5期，版本所有，如蒙转载，敬请连此声明一起转载，否则追究侵权责任。从一道笔试题谈算法优化（上）作者：赖勇浩（ht" />
<script src="http://static.blog.csdn.net/scripts/jquery.js" type="text/javascript"></script>
<script type="text/javascript" src="http://static.blog.csdn.net/scripts/ad.js?v=1.1"></script>
<link rel="Stylesheet" type="text/css" href="http://static.blog.csdn.net/skin/ink/css/style.css?v=1.1" />
<link id="RSSLink" title="RSS" type="application/rss+xml" rel="alternate" href="/lanphaday/rss/list" />
<link rel="shortcut icon" href="/favicon.ico" />
<link type="text/css" rel="stylesheet" href="http://static.blog.csdn.net/scripts/SyntaxHighlighter/styles/default.css" />
</head>
<body>
<script src="http://csdnimg.cn/pubnav/js/pub_topnav_2011.js"type="text/javascript"></script>

<div id="container">
<div id="header">
    <div class="header">
        <div id="blog_title">
            <h1><a href="http://blog.csdn.net/gzlaiyonghao">赖勇浩的编程私伙局</a></h1>
            <h2>game -&gt; webgame -&gt; web，一路走来，风雨兼程。</h2>
            <div class="clear"></div>
        </div>
        <div class="clear"></div>
    </div>
</div>
<div id="navigator">
    <div class="navigator_bg"></div>
    <div class="navigator">
        <ul>
            <li id="btnContents"><a href="http://blog.csdn.net/gzlaiyonghao?viewmode=contents"><span><img src="http://static.blog.csdn.net/images/ico_list.gif">目录视图</span></a></li>
            <li id="btnView"><a href="http://blog.csdn.net/gzlaiyonghao?viewmode=list"><span><img src="http://static.blog.csdn.net/images/ico_summary.gif">摘要视图</span></a></li>
            <li id="btnRss"><a href="http://blog.csdn.net/gzlaiyonghao/rss/list"><span><img src="http://static.blog.csdn.net/images/ico_rss.gif">订阅</span></a></li>
</ul>
    </div>
</div>
<script type="text/javascript">
    var username = "lanphaday";
    var _blogger = username;
    var blog_address = "http://blog.csdn.net/gzlaiyonghao";
    var static_host = "http://static.blog.csdn.net";
    var currentUserName = "";
</script>

<div id="body">
<div id="main">
<div class="main">
<div class="notice"> 

<a href="https://code.csdn.net/blog/12" target="_blank">
<font color=red>公告：博客新增直接引用代码功能</font></a>



&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;

<a href="http://www.csdn.net/article/2013-07-24/2816320" target="_blank"><font color=blue>专访谭海燕：移动互联网开发的那些事
</font></a>

&nbsp;&nbsp;&nbsp;&nbsp;

<a href="http://blog.csdn.net/csdnproduct/article/details/9495139
"target="_blank">
<font color=red>CSDN博客频道自定义域名、标签搜索功能上线啦！


 </font></a>

&nbsp;&nbsp;&nbsp;&nbsp;

<a href=""target="_blank">
<font color=blue>
 </font></a>




</div>
<div id="article_details" class="details">
    <div class="article_title">
    <span class="ico ico_type_Original"></span>
    <h3>
        <span class="link_title"><a href="/gzlaiyonghao/article/details/3547776">
        从一道笔试题谈算法优化（上）
        </a></span>
    </h3>
</div>

        
    <div class="article_manage">
        <span class="link_categories">
        分类：
            <a href="/lanphaday/article/category/328647">C++</a> 
            <a href="/lanphaday/article/category/328685">Algorithms</a> 
            <a href="/lanphaday/article/category/328657">Optimize</a> 
        </span>
    <span class="link_postdate">2008-12-18 11:22</span>
    <span class="link_view" title="阅读次数">11194人阅读</span>
    <span class="link_comments" title="评论次数"><a href="#comments">评论</a>(47)</span>
    <span class="link_collect"><a href="javascript:void(0);" onclick="javascript:collectArticle('从一道笔试题谈算法优化（上）','3547776');return false;" title="收藏">收藏</a></span>
    <span class="link_report"><a href="#report"  onclick="javascript:report(3547776,2);return false;" title="举报">举报</a></span>
    
</div>
<div class="tag2box"><a href='http://blog.csdn.net/tag/details.html?tag=%e7%ae%97%e6%b3%95' target=_blank>算法</a><a href='http://blog.csdn.net/tag/details.html?tag=%e4%bc%98%e5%8c%96' target=_blank>优化</a><a href='http://blog.csdn.net/tag/details.html?tag=class' target=_blank>class</a><a href='http://blog.csdn.net/tag/details.html?tag=%e6%b5%8b%e8%af%95' target=_blank>测试</a><a href='http://blog.csdn.net/tag/details.html?tag=%e5%b9%b3%e5%8f%b0' target=_blank>平台</a><a href='http://blog.csdn.net/tag/details.html?tag=%e9%9d%a2%e8%af%95' target=_blank>面试</a></div>


    
<div id="article_content" class="article_content">
<p><font color="#000080">&nbsp;因为受到经济危机的影响，我在 bokee.com 的博客可能随时出现无法访问的情况；因此将2005年到2006年间在 bokee.com 撰写的博客文章全部迁移到 csdn 博客中来，本文正是其中一篇迁移的文章。</font> </p><font size="3" color="#000000" face="宋体">
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><o:p><font face="Times New Roman">&nbsp;</font></o:p></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span style="font-family: 宋体;">声明：本文最初发表于《电脑编程技巧与维护》</span><span lang="EN-US"><font face="Times New Roman">2006</font></span><span style="font-family: 宋体;">年第</span><span lang="EN-US"><font face="Times New Roman">5</font></span><span style="font-family: 宋体;">期，版本所有，如蒙转载，敬请连此声明一起转载，否则追究侵权责任。</span></p>
<h1 style="margin: 17pt 0cm 16.5pt;"><span style="font-family: 宋体;">从一道笔试题谈算法优化（上）</span><span lang="EN-US"><o:p></o:p></span></h1>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span style="font-family: 宋体;">作者：赖勇浩（</span><span lang="EN-US"><font face="Times New Roman">http://blog.csdn.net/lanphaday</font></span><span style="font-family: 宋体;">）</span></p>
<h2 style="margin: 13pt 0cm;"><span style="font-family: 黑体;">引子</span><span lang="EN-US"><o:p></o:p></span></h2>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span style="font-family: 宋体;">每年十一月各大</span><span lang="EN-US"><font face="Times New Roman">IT</font></span><span style="font-family: 宋体;">公司都不约而同、争后恐后地到各大高校进行全国巡回招聘。与此同时，网上也开始出现大量笔试面试题；网上流传的题目往往都很精巧，既能让考查基础知识，又在平淡中隐含了广阔的天地供优秀学生驰骋。</span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span style="font-family: 宋体;">这两天在网上淘到一道笔试题目（注</span><span lang="EN-US"><font face="Times New Roman">1</font></span><span style="font-family: 宋体;">），虽然真假未知，但的确是道好题，题目如下：</span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><i style=""><span lang="EN-US"><span style=""><font face="Times New Roman">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font></span></span></i><i style=""><span style="font-family: 宋体;">从</span><span lang="EN-US"><font face="Times New Roman">10</font></span></i><i style=""><span style="font-family: 宋体;">亿个浮点数中找出最大的</span><span lang="EN-US"><font face="Times New Roman">1</font></span></i><i style=""><span style="font-family: 宋体;">万个。</span><span lang="EN-US"><o:p></o:p></span></i></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span style="font-family: 宋体;">这是一道似易实难的题目，一般同学最容易中的陷阱就是没有重视这个“亿”字。因为有</span><span lang="EN-US"><font face="Times New Roman">10</font></span><span style="font-family: 宋体;">亿个单精度浮点数元素的数组在</span><span lang="EN-US"><font face="Times New Roman">32</font></span><span style="font-family: 宋体;">位平台上已经达到</span><span lang="EN-US"><font face="Times New Roman">3.7GB</font></span><span style="font-family: 宋体;">之巨，在常见计算机平台（如</span><span lang="EN-US"><font face="Times New Roman">Win32</font></span><span style="font-family: 宋体;">）上声明一个这样的数组将导致堆栈溢出。正确的解决方法是分治法，比如每次处理</span><span lang="EN-US"><font face="Times New Roman">100</font></span><span style="font-family: 宋体;">万个数，然后再综合起来。不过这不是本文要讨论的主旨，所以本文把上题的</span><span lang="EN-US"><font face="Times New Roman">10</font></span><span style="font-family: 宋体;">亿改为</span><span lang="EN-US"><font face="Times New Roman">1</font></span><span style="font-family: 宋体;">亿，把浮点数改为整数，这样可以直接地完成这个问题，有利于清晰地讨论相关算法的优化（注</span><span lang="EN-US"><font face="Times New Roman">2</font></span><span style="font-family: 宋体;">）。</span></p>
<h2 style="margin: 13pt 0cm;"><span style="font-family: 黑体;">不假思索</span><span lang="EN-US"><o:p></o:p></span></h2>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span style="font-family: 宋体;">拿到这道题，马上就会想到的方法是建立一个数组把</span><span lang="EN-US"><font face="Times New Roman">1</font></span><span style="font-family: 宋体;">亿个数装起来，然后用</span><span lang="EN-US"><font face="Times New Roman">for</font></span><span style="font-family: 宋体;">循环遍历这个数组，找出最大的</span><span lang="EN-US"><font face="Times New Roman">1</font></span><span style="font-family: 宋体;">万个数来。原因很简单，因为如果要找出最大的那个数，就是这样解决的；而找最大的</span><span lang="EN-US"><font face="Times New Roman">1</font></span><span style="font-family: 宋体;">万个数，只是重复</span><span lang="EN-US"><font face="Times New Roman">1</font></span><span style="font-family: 宋体;">万遍而已。</span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font face="Times New Roman">template&lt; class T &gt;</font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font face="Times New Roman">void solution_1( T BigArr[], T ResArr[] )</font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font face="Times New Roman">{</font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font face="Times New Roman"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>for( int i = 0; i &lt; RES_ARR_SIZE; ++i )</font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font face="Times New Roman"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>{</font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font face="Times New Roman"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>int idx = i;</font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font face="Times New Roman"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>for( int j = i+1; j &lt; BIG_ARR_SIZE; ++j )</font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font face="Times New Roman"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>{</font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font face="Times New Roman"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>if( BigArr[j] &gt; BigArr[idx] )</font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font face="Times New Roman"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>idx = j;</font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font face="Times New Roman"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>}</font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font face="Times New Roman"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>ResArr[i] = BigArr[idx];</font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font face="Times New Roman"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>std::swap( BigArr[idx], BigArr[i] );</font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font face="Times New Roman"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>}</font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font face="Times New Roman">}</font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span style="font-family: 宋体;">设</span><span lang="EN-US"><font face="Times New Roman">BIG_ARR_SIZE </font></span><span style="font-family: 宋体;">＝</span><span lang="EN-US"><font face="Times New Roman"> 1</font></span><span style="font-family: 宋体;">亿，</span><span lang="EN-US"><font face="Times New Roman">RES_ARR_SIZE = 1</font></span><span style="font-family: 宋体;">万，运行以上算法已经超过</span><span lang="EN-US"><font face="Times New Roman">40</font></span><span style="font-family: 宋体;">分钟（注</span><span lang="EN-US"><font face="Times New Roman">3</font></span><span style="font-family: 宋体;">），远远超过我们的可接受范围。</span></p>
<h2 style="margin: 13pt 0cm;"><span style="font-family: 黑体;">稍作思考</span><span lang="EN-US"><o:p></o:p></span></h2>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span style="font-family: 宋体;">从上面的代码可以看出跟</span><span lang="EN-US"><font face="Times New Roman">SelectSort</font></span><span style="font-family: 宋体;">算法的核心代码是一样的。因为</span><span lang="EN-US"><font face="Times New Roman">SelectSort</font></span><span style="font-family: 宋体;">是一个</span><span lang="EN-US"><font face="Times New Roman">O(n^2)</font></span><span style="font-family: 宋体;">的算法（</span><span lang="EN-US"><font face="Times New Roman">solution_1</font></span><span style="font-family: 宋体;">的时间复杂度为</span><span lang="EN-US"><font face="Times New Roman">O(n*m)</font></span><span style="font-family: 宋体;">，因为</span><span lang="EN-US"><font face="Times New Roman">solution_1</font></span><span style="font-family: 宋体;">没有将整个大数组全部排序），而我们又知道排序算法可以优化到</span><span lang="EN-US"><font face="Times New Roman">O(nlogn)</font></span><span style="font-family: 宋体;">，那们是否可以从这方面入手使用更快的排序算法如</span><span lang="EN-US"><font face="Times New Roman">MergeSor</font></span><span style="font-family: 宋体;">、</span><span lang="EN-US"><font face="Times New Roman">QuickSort</font></span><span style="font-family: 宋体;">呢？但这些算法都不具备从大至小选择最大的</span><span lang="EN-US"><font face="Times New Roman">N</font></span><span style="font-family: 宋体;">个数的功能，因此只有将</span><span lang="EN-US"><font face="Times New Roman">1</font></span><span style="font-family: 宋体;">亿个数按从大到小用</span><span lang="EN-US"><font face="Times New Roman">QuickSort</font></span><span style="font-family: 宋体;">排序，然后提取最前面的</span><span lang="EN-US"><font face="Times New Roman">1</font></span><span style="font-family: 宋体;">万个。</span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font face="Times New Roman">template&lt; class T, class I &gt;</font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font face="Times New Roman">void solution_2( T BigArr[], T ResArr[] )</font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font face="Times New Roman">{</font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font face="Times New Roman"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>std::sort( BigArr, BigArr + BIG_ARR_SIZE, std::greater_equal() );</font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font face="Times New Roman"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>memcpy( ResArr, BigArr, sizeof(T) * RES_ARR_SIZE );</font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font face="Times New Roman">}</font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span style="font-family: 宋体;">因为</span><span lang="EN-US"><font face="Times New Roman">STL</font></span><span style="font-family: 宋体;">里的</span><span lang="EN-US"><font face="Times New Roman">sort</font></span><span style="font-family: 宋体;">算法使用的是</span><span lang="EN-US"><font face="Times New Roman">QuickSort</font></span><span style="font-family: 宋体;">，在这里直接拿来用了，是因为不想写一个写一个众人皆知的</span><span lang="EN-US"><font face="Times New Roman">QuickSort</font></span><span style="font-family: 宋体;">代码来占篇幅（而且</span><span lang="EN-US"><font face="Times New Roman">STL</font></span><span style="font-family: 宋体;">的</span><span lang="EN-US"><font face="Times New Roman">sort</font></span><span style="font-family: 宋体;">高度优化、速度快）。</span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span style="font-family: 宋体;">对</span><span lang="EN-US"><font face="Times New Roman">solution_2</font></span><span style="font-family: 宋体;">进行测试，运行时间是</span><span lang="EN-US"><font face="Times New Roman">32</font></span><span style="font-family: 宋体;">秒，约为</span><span lang="EN-US"><font face="Times New Roman">solution_1</font></span><span style="font-family: 宋体;">的</span><span lang="EN-US"><font face="Times New Roman">1.5%</font></span><span style="font-family: 宋体;">的时间，已经取得了几何数量级的进展。</span></p>
<h2 style="margin: 13pt 0cm;"><span style="font-family: 黑体;">深入思考</span><span lang="EN-US"><o:p></o:p></span></h2>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span style="font-family: 宋体;">压抑住兴奋回头再仔细看看</span><span lang="EN-US"><font face="Times New Roman">solution_2</font></span><span style="font-family: 宋体;">，你将发现一个大问题，那就是在</span><span lang="EN-US"><font face="Times New Roman">solution_2</font></span><span style="font-family: 宋体;">里所有的元素都排序了！而事实上只需找出最大的</span><span lang="EN-US"><font face="Times New Roman">1</font></span><span style="font-family: 宋体;">万个即可，我们不是做了很多无用功吗？应该怎么样来消除这些无用功？</span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span style="font-family: 宋体;">如果你一时没有头绪，那就让我慢慢引导你。首先，发掘一个事实：如果这个大数组本身已经按从大到小有序，那么数组的前</span><span lang="EN-US"><font face="Times New Roman">1</font></span><span style="font-family: 宋体;">万个元素就是结果；然后，可以假设这个大数组已经从大到小有序，并将前</span><span lang="EN-US"><font face="Times New Roman">1</font></span><span style="font-family: 宋体;">万个元素放到结果数组；再次，事实上这结果数组里放的未必是最大的一万个，因此需要将前</span><span lang="EN-US"><font face="Times New Roman">1</font></span><span style="font-family: 宋体;">万个数字后续的元素跟结果数组的最小的元素比较，如果所有后续的元素都比结果数组的最小元素还小，那结果数组就是想要的结果，如果某一后续的元素比结果数组的最小元素大，那就用它替换结果数组里最小的数字；最后，遍历完大数组，得到的结果数组就是想要的结果了。</span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font face="Times New Roman">template&lt; class T &gt;</font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font face="Times New Roman">void solution_3( T BigArr[], T ResArr[] )</font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font face="Times New Roman">{</font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font face="Times New Roman"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>//</font></span><span style="font-family: 宋体;">取最前面的一万个</span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font face="Times New Roman"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>memcpy( ResArr, BigArr, sizeof(T) * RES_ARR_SIZE );</font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font face="Times New Roman"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>//</font></span><span style="font-family: 宋体;">标记是否发生过交换</span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font face="Times New Roman"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>bool bExchanged = true;</font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font face="Times New Roman"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>//</font></span><span style="font-family: 宋体;">遍历后续的元素</span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font face="Times New Roman"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>for( int i = RES_ARR_SIZE; i &lt; BIG_ARR_SIZE; ++i )</font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font face="Times New Roman"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>{</font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font face="Times New Roman"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>int idx;</font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font face="Times New Roman"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>//</font></span><span style="font-family: 宋体;">如果上一轮发生过交换</span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font face="Times New Roman"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>if( bExchanged )</font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font face="Times New Roman"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>{</font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font face="Times New Roman"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>//</font></span><span style="font-family: 宋体;">找出</span><span lang="EN-US"><font face="Times New Roman">ResArr</font></span><span style="font-family: 宋体;">中最小的元素</span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font face="Times New Roman"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>int j;</font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font face="Times New Roman"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="">&nbsp;&nbsp;&nbsp;</span>for( idx = 0, j = 1; j &lt; RES_ARR_SIZE; ++j )</font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font face="Times New Roman"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>{</font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font face="Times New Roman"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>if( ResArr[idx] &gt; ResArr[j] )</font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font face="Times New Roman"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>idx = j;</font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font face="Times New Roman"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>}</font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font face="Times New Roman"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>}</font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font face="Times New Roman"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>//</font></span><span style="font-family: 宋体;">这个后续元素比</span><span lang="EN-US"><font face="Times New Roman">ResArr</font></span><span style="font-family: 宋体;">中最小的元素大，则替换。</span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font face="Times New Roman"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>if( BigArr[i] &gt; ResArr[idx] )</font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font face="Times New Roman"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>{</font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font face="Times New Roman"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>bExchanged = true;</font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font face="Times New Roman"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>ResArr[idx] = BigArr[i];</font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font face="Times New Roman"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>}</font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font face="Times New Roman"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>else</font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font face="Times New Roman"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>bExchanged = false;</font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font face="Times New Roman"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>}</font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font face="Times New Roman">}</font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span style="font-family: 宋体;">上面的代码使用了一个布尔变量</span><span lang="EN-US"><font face="Times New Roman">bExchanged</font></span><span style="font-family: 宋体;">标记是否发生过交换，这是一个前文没有谈到的优化手段——用以标记元素交换的状态，可以大大减少查找</span><span lang="EN-US"><font face="Times New Roman">ResArr</font></span><span style="font-family: 宋体;">中最小元素的次数。也对</span><span lang="EN-US"><font face="Times New Roman">solution_3</font></span><span style="font-family: 宋体;">进行测试一下，结果用时</span><span lang="EN-US"><font face="Times New Roman">2.0</font></span><span style="font-family: 宋体;">秒左右（不使用</span><span lang="EN-US"><font face="Times New Roman">bExchanged</font></span><span style="font-family: 宋体;">则高达</span><span lang="EN-US"><font face="Times New Roman">32</font></span><span style="font-family: 宋体;">分钟），远小于</span><span lang="EN-US"><font face="Times New Roman">solution_2</font></span><span style="font-family: 宋体;">的用时。</span></p>
<h2 style="margin: 13pt 0cm;"><span style="font-family: 黑体;">深思熟虑</span><span lang="EN-US"><o:p></o:p></span></h2>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span style="font-family: 宋体;">在进入下一步优化之前，分析一下</span><span lang="EN-US"><font face="Times New Roman">solution_3</font></span><span style="font-family: 宋体;">的成功之处。第一、</span><span lang="EN-US"><font face="Times New Roman">solution_3</font></span><span style="font-family: 宋体;">的算法只遍历大数组一次，即它是一个</span><span lang="EN-US"><font face="Times New Roman">O(n)</font></span><span style="font-family: 宋体;">的算法，而</span><span lang="EN-US"><font face="Times New Roman">solution_1</font></span><span style="font-family: 宋体;">是</span><span lang="EN-US"><font face="Times New Roman">O(n*m)</font></span><span style="font-family: 宋体;">的算法，</span><span lang="EN-US"><font face="Times New Roman">solution_2</font></span><span style="font-family: 宋体;">是</span><span lang="EN-US"><font face="Times New Roman">O(nlogn)</font></span><span style="font-family: 宋体;">的算法，可见它在本质上有着天然的优越性；第二、在</span><span lang="EN-US"><font face="Times New Roman">solution_3</font></span><span style="font-family: 宋体;">中引入了</span><span lang="EN-US"><font face="Times New Roman">bExchanged</font></span><span style="font-family: 宋体;">这一标志变量，从测试数据可见引入</span><span lang="EN-US"><font face="Times New Roman">bExchanged</font></span><span style="font-family: 宋体;">减少了约</span><span lang="EN-US"><font face="Times New Roman">99.99%</font></span><span style="font-family: 宋体;">的时间，这是一个非常大的成功。</span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span style="font-family: 宋体;">上面这段话绝非仅仅说明了</span><span lang="EN-US"><font face="Times New Roman">solution_3</font></span><span style="font-family: 宋体;">的优点，更重要的是把</span><span lang="EN-US"><font face="Times New Roman">solution_3</font></span><span style="font-family: 宋体;">的主要矛盾摆上了桌面——为什么一个</span><span lang="EN-US"><font face="Times New Roman">O(n)</font></span><span style="font-family: 宋体;">的算法效率会跟</span><span lang="EN-US"><font face="Times New Roman">O(n*m)</font></span><span style="font-family: 宋体;">的算法差不多（不使用</span><span lang="EN-US"><font face="Times New Roman">bExchanged</font></span><span style="font-family: 宋体;">）？为什么使用了</span><span lang="EN-US"><font face="Times New Roman">bExchanged</font></span><span style="font-family: 宋体;">能够减少</span><span lang="EN-US"><font face="Times New Roman">99.99%</font></span><span style="font-family: 宋体;">的时间？带着这两个问题再次审视</span><span lang="EN-US"><font face="Times New Roman">solution_3</font></span><span style="font-family: 宋体;">的代码，发现</span><span lang="EN-US"><font face="Times New Roman">bExchanged</font></span><span style="font-family: 宋体;">的引入实际上减少了如下代码段的执行次数：</span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font face="Times New Roman">for( idx = 0, j = 1; j &lt; RES_ARR_SIZE; ++j )</font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font face="Times New Roman">{</font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font face="Times New Roman"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>if( ResArr[idx] &gt; ResArr[j] )</font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font face="Times New Roman"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>idx = j;</font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font face="Times New Roman">}</font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span style="font-family: 宋体;">上面的代码段即是查找</span><span lang="EN-US"><font face="Times New Roman">ResArr</font></span><span style="font-family: 宋体;">中最小元素的算法，分析它可知这是一个</span><span lang="EN-US"><font face="Times New Roman">O(n)</font></span><span style="font-family: 宋体;">的算法，到此时就水落石出了！原来虽然</span><span lang="EN-US"><font face="Times New Roman">solution_3</font></span><span style="font-family: 宋体;">是一个</span><span lang="EN-US"><font face="Times New Roman">O(n)</font></span><span style="font-family: 宋体;">的算法，但因为内部使用的查找最小元素的算法也是</span><span lang="EN-US"><font face="Times New Roman">O(n)</font></span><span style="font-family: 宋体;">的算法，所以就退化为</span><span lang="EN-US"><font face="Times New Roman">O(n*m)</font></span><span style="font-family: 宋体;">的算法了。难怪不使用</span><span lang="EN-US"><font face="Times New Roman">bExchanged</font></span><span style="font-family: 宋体;">使用的时间跟</span><span lang="EN-US"><font face="Times New Roman">solution_1</font></span><span style="font-family: 宋体;">差不多；这也从反面证明了</span><span lang="EN-US"><font face="Times New Roman">solution_3</font></span><span style="font-family: 宋体;">被上面的这一代码段导致性能退化。使用了</span><span lang="EN-US"><font face="Times New Roman">bExchanged</font></span><span style="font-family: 宋体;">之后因为减少了很多查找最小元素的代码段执行，所以能够节省</span><span lang="EN-US"><font face="Times New Roman">99.99%</font></span><span style="font-family: 宋体;">的时间！</span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span style="font-family: 宋体;">至此可知元凶就是查找最小元素的代码段，但查找最小元素是必不可少的操作，在这个两难的情况下该怎么去优化呢？答案就是保持结果数组（即</span><span lang="EN-US"><font face="Times New Roman">ResArr</font></span><span style="font-family: 宋体;">）有序，那样的话最小的元素总是最后一个，从而省去查找最小元素的时间，解决上面的问题。但这也引入了一个新的问题：保持数组有序的插入算法的时间复杂度是</span><span lang="EN-US"><font face="Times New Roman">O(n)</font></span><span style="font-family: 宋体;">的，虽然在这个问题里插入的数次比例较小，但因为基数太大（</span><span lang="EN-US"><font face="Times New Roman">1</font></span><span style="font-family: 宋体;">亿），这一开销仍然会令本方案得不偿失。</span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span style="font-family: 宋体;">难道就没有办法了吗？记得小学解应用题<st1:personname w:st="on" productid="时">时</st1:personname>老师教导过我们如果解题没有思路，那就多读几遍题目。再次审题，注意到题目并没有要求找到的最大的</span><span lang="EN-US"><font face="Times New Roman">1</font></span><span style="font-family: 宋体;">万个数要有序（注</span><span lang="EN-US"><font face="Times New Roman">4</font></span><span style="font-family: 宋体;">），这意味着可以通过如下算法来解决：</span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt 27pt; text-indent: -27pt;"><span style="" lang="EN-US"><span style=""><font face="Times New Roman">1)<span style="font-family: 'Times New Roman'; font-style: normal; font-variant: normal; font-weight: normal; font-size: 7pt; line-height: normal; font-size-adjust: none; font-stretch: normal; -x-system-font: none;"><font size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font></span></font></span></span><span style="font-family: 宋体;">将</span><span lang="EN-US"><font face="Times New Roman">BigArr</font></span><span style="font-family: 宋体;">的前</span><span lang="EN-US"><font face="Times New Roman">1</font></span><span style="font-family: 宋体;">万个元素复制到</span><span lang="EN-US"><font face="Times New Roman">ResArr</font></span><span style="font-family: 宋体;">并用</span><span lang="EN-US"><font face="Times New Roman">QuickSort</font></span><span style="font-family: 宋体;">使</span><span lang="EN-US"><font face="Times New Roman">ResArr</font></span><span style="font-family: 宋体;">有序，并定义变量</span><span lang="EN-US"><font face="Times New Roman">MinElemIdx</font></span><span style="font-family: 宋体;">保存最小元素的索引，并定义变量</span><span lang="EN-US"><font face="Times New Roman">ZoneBeginIdx</font></span><span style="font-family: 宋体;">保存可能发生交换的区域的最小索引；</span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt 27pt; text-indent: -27pt;"><span style="" lang="EN-US"><span style=""><font face="Times New Roman">2)<span style="font-family: 'Times New Roman'; font-style: normal; font-variant: normal; font-weight: normal; font-size: 7pt; line-height: normal; font-size-adjust: none; font-stretch: normal; -x-system-font: none;"><font size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font></span></font></span></span><span style="font-family: 宋体;">遍历</span><span lang="EN-US"><font face="Times New Roman">BigArr</font></span><span style="font-family: 宋体;">其它的元素，如果某一元素比</span><span lang="EN-US"><font face="Times New Roman">ResArr</font></span><span style="font-family: 宋体;">最小元素小，则将</span><span lang="EN-US"><font face="Times New Roman">ResArr</font></span><span style="font-family: 宋体;">中</span><span lang="EN-US"><font face="Times New Roman">MinElemIdx</font></span><span style="font-family: 宋体;">指向的元素替换，如果</span><span lang="EN-US"><font face="Times New Roman">ZoneBeginIdx == MinElemIdx</font></span><span style="font-family: 宋体;">则扩展</span><span lang="EN-US"><font face="Times New Roman">ZoneBeginIdx</font></span><span style="font-family: 宋体;">；</span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt 27pt; text-indent: -27pt;"><span style="" lang="EN-US"><span style=""><font face="Times New Roman">3)<span style="font-family: 'Times New Roman'; font-style: normal; font-variant: normal; font-weight: normal; font-size: 7pt; line-height: normal; font-size-adjust: none; font-stretch: normal; -x-system-font: none;"><font size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font></span></font></span></span><span style="font-family: 宋体;">重新在</span><span lang="EN-US"><font face="Times New Roman">ZoneBeginIdx</font></span><span style="font-family: 宋体;">至</span><span lang="EN-US"><font face="Times New Roman">RES_ARR_SIZE</font></span><span style="font-family: 宋体;">元素段中寻找最小元素，并用</span><span lang="EN-US"><font face="Times New Roman">MinElemIdx</font></span><span style="font-family: 宋体;">保存其它索引；</span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt 27pt; text-indent: -27pt;"><span style="" lang="EN-US"><span style=""><font face="Times New Roman">4)<span style="font-family: 'Times New Roman'; font-style: normal; font-variant: normal; font-weight: normal; font-size: 7pt; line-height: normal; font-size-adjust: none; font-stretch: normal; -x-system-font: none;"><font size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font></span></font></span></span><span style="font-family: 宋体;">重复</span><span lang="EN-US"><font face="Times New Roman">2)</font></span><span style="font-family: 宋体;">直至遍历完所有</span><span lang="EN-US"><font face="Times New Roman">BigArr</font></span><span style="font-family: 宋体;">的元素。</span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span style="font-family: 宋体;">依上算法，写代码如下：</span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font face="Times New Roman">template&lt; class T, class I &gt;</font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font face="Times New Roman">void solution_4( T BigArr[], T ResArr[] )</font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font face="Times New Roman">{</font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font face="Times New Roman"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>//</font></span><span style="font-family: 宋体;">取最前面的一万个</span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font face="Times New Roman"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>memcpy( ResArr, BigArr, sizeof(T) * RES_ARR_SIZE );</font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font face="Times New Roman"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>//</font></span><span style="font-family: 宋体;">排序</span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font face="Times New Roman"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>std::sort( ResArr, ResArr + RES_ARR_SIZE, std::greater_equal() );</font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font face="Times New Roman"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>//</font></span><span style="font-family: 宋体;">最小元素索引</span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font face="Times New Roman"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>unsigned int MinElemIdx = RES_ARR_SIZE - 1;</font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font face="Times New Roman"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>//</font></span><span style="font-family: 宋体;">可能产生交换的区域的最小索引</span><font face="Times New Roman"> </font></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font face="Times New Roman"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>unsigned int ZoneBeginIdx = MinElemIdx;</font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font face="Times New Roman"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>//</font></span><span style="font-family: 宋体;">遍历后续的元素</span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font face="Times New Roman"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>for( unsigned int i = RES_ARR_SIZE; i &lt; BIG_ARR_SIZE; ++i )</font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font face="Times New Roman"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>{<span style="">&nbsp;&nbsp;&nbsp;&nbsp; </span></font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font face="Times New Roman"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>//</font></span><span style="font-family: 宋体;">这个后续元素比</span><span lang="EN-US"><font face="Times New Roman">ResArr</font></span><span style="font-family: 宋体;">中最小的元素大，则替换。</span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font face="Times New Roman"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>if( BigArr[i] &gt; ResArr[MinElemIdx] )</font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font face="Times New Roman"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>{</font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font face="Times New Roman"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>ResArr[MinElemIdx] = BigArr[i];</font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font face="Times New Roman"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>if( MinElemIdx == ZoneBeginIdx )</font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font face="Times New Roman"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>--ZoneBeginIdx;</font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font face="Times New Roman"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>//</font></span><span style="font-family: 宋体;">查找最小元素</span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font face="Times New Roman"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>unsigned int idx = ZoneBeginIdx;</font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font face="Times New Roman"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>unsigned int j = idx + 1;</font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font face="Times New Roman"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>for( ; j &lt; RES_ARR_SIZE; ++j )</font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font face="Times New Roman"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>{</font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font face="Times New Roman"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>if( ResArr[idx] &gt; ResArr[j] )</font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font face="Times New Roman"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>idx = j;</font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font face="Times New Roman"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>}</font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font face="Times New Roman"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>MinElemIdx = idx;</font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font face="Times New Roman"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>}</font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font face="Times New Roman"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>}</font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><font face="Times New Roman">}</font></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span style="font-family: 宋体;">经过测试，同样情况下</span><span lang="EN-US"><font face="Times New Roman">solution_4</font></span><span style="font-family: 宋体;">用时约</span><span lang="EN-US"><font face="Times New Roman">1.8</font></span><span style="font-family: 宋体;">秒，较</span><span lang="EN-US"><font face="Times New Roman">solution_3</font></span><span style="font-family: 宋体;">效率略高，总算不负一番努力。</span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><o:p><font face="Times New Roman">&nbsp;</font></o:p></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span style="font-family: 宋体;">待续……</span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><o:p><font face="Times New Roman">&nbsp;</font></o:p></span></p></font>
</div>

<div class="share_buttons" id="sharePanel"></div>
<!--192.168.100.33-->
<div class="article_next_prev">
    <li class="prev_article"><span>上一篇：</span><a href="/gzlaiyonghao/article/details/3547746">平凡的母亲</a></li>
    <li class="next_article"><span>下一篇：</span><a href="/gzlaiyonghao/article/details/3547899">从一道笔试题谈算法优化（下）</a></li>
</div>


    
</div>
<div id="ad_cen">
<script type="text/javascript" >BAIDU_CLB_SLOT_ID = "117306";</script>
<script type="text/javascript" src="http://cbjs.baidu.com/js/o.js"></script>
</div>
<script type="text/javascript">
    //new Ad(4, 'ad_cen');
</script>
<div id="comment_title" class="panel_head">查看评论<a name="comments"></a></div>
<div id="comment_list"></div>
<div id="comment_bar"></div>
<div id="comment_form"></div>
<div class="announce">* 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场<a name="reply"></a><a name="quote"></a></div>
<script type="text/javascript">
    var fileName = '3547776';
    var commentscount = 47;
    var islock = false
</script>
<script type="text/javascript" src="http://static.blog.csdn.net/scripts/comment.js"></script>
<div id="ad_bot"></div>
<script type="text/javascript">
    new Ad(5, 'ad_bot');
</script>
<div id="report_dialog"></div>

<div id="d-top" style="display:none;">
<a id="d-top-a" href="#" title="回到顶部">
<img src="http://static.blog.csdn.net/images/top.png" alt="TOP" /></a>
</div>
<script type="text/javascript">
    $(function(){
        var d_top=$('#d-top');
        document.onscroll=function(){
            var scrTop=(document.body.scrollTop||document.documentElement.scrollTop);
            if(scrTop>500){
                d_top.show();
            }else{
                d_top.hide();
            }
        }
        $('#d-top-a').click(function(){
            scrollTo(0,0);
            this.blur();
            return false;
        });
    });
</script>

<div class="clear"></div>
</div>
</div>

<div id="side">
<div class="side">
<div class="panel" id="panel_Search">
    <ul class="panel_head"><span>文章搜索</span></ul>
    <ul class="panel_body">
        <form id="frmSearch" action="http://so.csdn.net/search" class="form_search" target="_blank">
        <span><input id="inputSearch" type="text" class="blogsearch" title="请输入关键字" /></span>
        <input id="btnSubmit" type="submit" value="搜索" title="search in blog" />
        <input type="hidden" name="q" id="inputQ" />
        <input type="hidden" name="t" value="blog" />
        <a id="btnSearchBlog" target="_blank"></a>
        </form>
    </ul>
</div><div id="panel_Profile" class="panel">
<ul class="panel_head"><span>个人资料</span></ul>
<ul class="panel_body profile">
<div id="blog_userface">
    <a href="http://my.csdn.net/lanphaday" target="_blank">
    <img src="http://avatar.csdn.net/F/C/4/1_lanphaday.jpg" title="访问我的空间" style="max-width:90%"/>
    </a>
    <br />
    <span><a href="http://my.csdn.net/lanphaday" class="user_name" target="_blank">lanphaday</a></span>
</div>
<div class="interact">
<a href="javascript:void(0);" class="attent" id="span_add_follow" title="[加关注]"></a>
<a href="javascript:void(0);" class="letter" onclick="loginto(1)" title="[发私信]"></a>
</div>
<div id="blog_medal">
        <div class="ico_expert" title="CSDN认证专家"></div>
</div>
<ul id="blog_rank">
    <li>访问：<span>1802398次</span></li>
    <li>积分：<span>18638分</span></li>
    <li>排名：<span>第91名</span></li>
</ul>
<ul id="blog_statistics">
    <li>原创：<span>193篇</span></li>
    <li>转载：<span>12篇</span></li>
    <li>译文：<span>33篇</span></li>
    <li>评论：<span>3430条</span></li>
</ul>
</ul>
</div>

<div class="panel">
<ul class="panel_body" style="padding:0;">
<script type="text/javascript" src="http://cbjs.baidu.com/js/m.js"></script> 
<script type="text/javascript"> 
BAIDU_CLB_preloadSlots("724643","117306"); 
</script>
<script type="text/javascript">BAIDU_CLB_fillSlot("724643");</script> 
</ul>
</div>
<div id="custom_column_8615922" class="panel">
<ul class="panel_head"><span>weibo</span></ul>
<ul class="panel_body">
<iframe width="100%" height="550" class="share_self"  frameborder="0" scrolling="no" src="http://widget.weibo.com/weiboshow/index.php?language=&width=0&height=550&fansRow=2&ptype=1&speed=0&skin=1&isTitle=0&noborder=1&isWeibo=1&isFans=0&uid=1924010407&verifier=240a04bd&dpc=1"></iframe>
</ul>
</div><div id="hotarticls" class="panel">
<ul class="panel_head"><span>阅读排行</span></ul>
<ul class="panel_body itemlist">
<li>
<a href="/gzlaiyonghao/article/details/6564162" title="C++11中值得关注的几大变化">C++11中值得关注的几大变化</a><span>(65115)</span>
</li>
<li>
<a href="/gzlaiyonghao/article/details/7217506" title="2012 不宜进入的三个技术点（上）">2012 不宜进入的三个技术点（上）</a><span>(61373)</span>
</li>
<li>
<a href="/gzlaiyonghao/article/details/7223385" title="2012 不宜进入的三个技术点（下）">2012 不宜进入的三个技术点（下）</a><span>(48066)</span>
</li>
<li>
<a href="/gzlaiyonghao/article/details/7218611" title="2012 不宜进入的三个技术点（中）">2012 不宜进入的三个技术点（中）</a><span>(46551)</span>
</li>
<li>
<a href="/gzlaiyonghao/article/details/8372839" title="记一次薪酬谈判的教训">记一次薪酬谈判的教训</a><span>(41732)</span>
</li>
<li>
<a href="/gzlaiyonghao/article/details/6204639" title="三本可以一买的 Python 书">三本可以一买的 Python 书</a><span>(39396)</span>
</li>
<li>
<a href="/gzlaiyonghao/article/details/2845258" title="为什么《Dive into Python》不值得推荐">为什么《Dive into Python》不值得推荐</a><span>(35063)</span>
</li>
<li>
<a href="/gzlaiyonghao/article/details/1852726" title="用Python做图像处理">用Python做图像处理</a><span>(34310)</span>
</li>
<li>
<a href="/gzlaiyonghao/article/details/3166735" title="（已加马赛克）10 行代码判定色*情*图片——Python 也可以系列之二">（已加马赛克）10 行代码判定色*情*图片——Python 也可以系列之二</a><span>(31560)</span>
</li>
<li>
<a href="/gzlaiyonghao/article/details/6303944" title="一本超越期待的 C++ 书——简评《Boost程序库完全开发指南：深入C++“准”标准库》">一本超越期待的 C++ 书——简评《Boost程序库完全开发指南：深入C++“准”标准库》</a><span>(24834)</span>
</li>
</ul>
</div>
<div id="panel_Category" class="panel">
    <ul class="panel_head"><span>博客专栏</span></ul>
    <ul class="panel_body" id="sp_column">
    <table cellpadding="0" cellspacing="0"><tr>
    <td style="padding:10px 10px 0 0;">
    <a href="http://blog.csdn.net/column/details/books.html" target="_blank"><img src="http://avatar.csdn.net/blogpic/20130731150440125.jpg" style="width:75px;height:75px;" /></a>
    </td>
    <td style="padding:10px 0; vertical-align:top;">
    <a href="http://blog.csdn.net/column/details/books.html" target="_blank">老赖谈书</a>
    <p>文章：9篇</p>
    <span>阅读：143763</span>
    </td>
    </tr></table>
    <table cellpadding="0" cellspacing="0"><tr>
    <td style="padding:10px 10px 0 0;">
    <a href="http://blog.csdn.net/column/details/trac.html" target="_blank"><img src="http://avatar.csdn.net/blogpic/20130720172211750.jpg" style="width:75px;height:75px;" /></a>
    </td>
    <td style="padding:10px 0; vertical-align:top;">
    <a href="http://blog.csdn.net/column/details/trac.html" target="_blank">Trac 经验谈</a>
    <p>文章：8篇</p>
    <span>阅读：42091</span>
    </td>
    </tr></table>
    <table cellpadding="0" cellspacing="0"><tr>
    <td style="padding:10px 10px 0 0;">
    <a href="http://blog.csdn.net/column/details/python-can.html" target="_blank"><img src="http://avatar.csdn.net/blogpic/20120202110752573.jpg" style="width:75px;height:75px;" /></a>
    </td>
    <td style="padding:10px 0; vertical-align:top;">
    <a href="http://blog.csdn.net/column/details/python-can.html" target="_blank">Python 也可以</a>
    <p>文章：4篇</p>
    <span>阅读：98250</span>
    </td>
    </tr></table>
    </ul>
</div><div id="newcomments" class="panel">
<ul class="panel_head"><span>最新评论</span></ul>
<ul class="panel_body itemlist">
    <li>
    <a href="/lanphaday/article/details/8372839#comments">记一次薪酬谈判的教训</a>
    <p style="margin:0px;"><a href="/heehee163" class="user_name">heehee163</a>:
博主现在还在游戏行业吗？创业还是公司上班？对你在智能体开发特别有兴趣。现在有个创新移动社交游戏想找你...
    </p>
    </li>
    <li>
    <a href="/lanphaday/article/details/8372839#comments">记一次薪酬谈判的教训</a>
    <p style="margin:0px;"><a href="/u011577408" class="user_name">u011577408</a>:
不知道为什么这篇旧文突然又出现在我的RSS里了。。。顺便评论下吧。谈判的本质是实力和合作。技巧是最次...
    </p>
    </li>
    <li>
    <a href="/lanphaday/article/details/8139626#comments">Python 于 webgame 的应用（上）</a>
    <p style="margin:0px;"><a href="/alexsunmiu" class="user_name">alexsunmiu</a>:
@sb3day:1、你有1W桌的需求？每桌至少两人也要两万人同时在线。。。2、即使有这种需求，简单多...
    </p>
    </li>
    <li>
    <a href="/lanphaday/article/details/7162907#comments">强制 code review：reviewboard+svn 的方案</a>
    <p style="margin:0px;"><a href="/wedwind" class="user_name">wedwind</a>:
接上条  File &quot;E:\Python26\Lib\site-packages\pkg_resou...
    </p>
    </li>
    <li>
    <a href="/lanphaday/article/details/7162907#comments">强制 code review：reviewboard+svn 的方案</a>
    <p style="margin:0px;"><a href="/wedwind" class="user_name">wedwind</a>:
非常感谢楼主，按照您所述的配置，我弄好之后，在提交的时候无论是否填写review:id都会报以下错误...
    </p>
    </li>
    <li>
    <a href="/lanphaday/article/details/6321415#comments">以小见大——那些基于 protobuf 的五花八门的 RPC（4）</a>
    <p style="margin:0px;"><a href="/wzl0507" class="user_name">wzl0507</a>:
我觉得使用这种自动生成代码的方法实现的RPC都会很乱的。。。
    </p>
    </li>
    <li>
    <a href="/lanphaday/article/details/9168193#comments">给有兴趣、有责任要讲课、分享的朋友推荐两本书</a>
    <p style="margin:0px;"><a href="/GJYSK" class="user_name">GJYSK</a>:
博主推荐的两本书相当的不错呀！
    </p>
    </li>
    <li>
    <a href="/lanphaday/article/details/1656969#comments">[python] Mixin 扫盲班</a>
    <p style="margin:0px;"><a href="/YIDAY" class="user_name">YIDAY</a>:
这根本不是minix
    </p>
    </li>
    <li>
    <a href="/lanphaday/article/details/6564162#comments">C++11中值得关注的几大变化</a>
    <p style="margin:0px;"><a href="/reff1" class="user_name">reff1</a>:
到最后C++与Java的区别就只是编译器不同了～。
    </p>
    </li>
    <li>
    <a href="/lanphaday/article/details/3547899#comments">从一道笔试题谈算法优化（下）</a>
    <p style="margin:0px;"><a href="/felix021" class="user_name">felix021</a>:
@vimney:这种问题你要用上链表就不用说了，性能肯定不行。然后你在链表里二分查找？你真的明白你在...
    </p>
    </li>
</ul>
</div>
<div id="panel_Archive" class="panel">
<ul class="panel_head"><span>文章存档</span></ul>
<ul class="panel_body">
<div id="archive_list">
<!--归档统计-->
<li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2013/06">2013年06月</a><span>(1)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2013/03">2013年03月</a><span>(1)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2013/01">2013年01月</a><span>(1)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2012/12">2012年12月</a><span>(2)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2012/11">2012年11月</a><span>(2)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2012/10">2012年10月</a><span>(1)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2012/09">2012年09月</a><span>(1)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2012/06">2012年06月</a><span>(1)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2012/02">2012年02月</a><span>(4)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2012/01">2012年01月</a><span>(4)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2011/12">2011年12月</a><span>(5)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2011/11">2011年11月</a><span>(2)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2011/09">2011年09月</a><span>(3)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2011/08">2011年08月</a><span>(3)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2011/07">2011年07月</a><span>(5)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2011/06">2011年06月</a><span>(3)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2011/05">2011年05月</a><span>(2)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2011/04">2011年04月</a><span>(7)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2011/03">2011年03月</a><span>(3)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2011/02">2011年02月</a><span>(1)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2011/01">2011年01月</a><span>(1)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2010/12">2010年12月</a><span>(6)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2010/11">2010年11月</a><span>(3)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2010/09">2010年09月</a><span>(1)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2010/05">2010年05月</a><span>(3)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2010/04">2010年04月</a><span>(1)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2010/03">2010年03月</a><span>(5)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2010/02">2010年02月</a><span>(2)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2010/01">2010年01月</a><span>(3)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2009/12">2009年12月</a><span>(5)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2009/11">2009年11月</a><span>(7)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2009/10">2009年10月</a><span>(3)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2009/09">2009年09月</a><span>(5)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2009/05">2009年05月</a><span>(4)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2009/04">2009年04月</a><span>(4)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2009/03">2009年03月</a><span>(4)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2009/02">2009年02月</a><span>(11)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2009/01">2009年01月</a><span>(5)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2008/12">2008年12月</a><span>(16)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2008/11">2008年11月</a><span>(2)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2008/10">2008年10月</a><span>(6)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2008/09">2008年09月</a><span>(6)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2008/08">2008年08月</a><span>(4)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2008/07">2008年07月</a><span>(2)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2008/06">2008年06月</a><span>(4)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2008/05">2008年05月</a><span>(4)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2008/04">2008年04月</a><span>(2)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2008/03">2008年03月</a><span>(2)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2008/02">2008年02月</a><span>(3)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2008/01">2008年01月</a><span>(7)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2007/12">2007年12月</a><span>(2)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2007/11">2007年11月</a><span>(2)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2007/10">2007年10月</a><span>(3)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2007/09">2007年09月</a><span>(2)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2007/08">2007年08月</a><span>(8)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2007/07">2007年07月</a><span>(6)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2007/06">2007年06月</a><span>(4)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2007/05">2007年05月</a><span>(2)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2007/04">2007年04月</a><span>(3)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2007/03">2007年03月</a><span>(1)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2007/02">2007年02月</a><span>(4)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2007/01">2007年01月</a><span>(4)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2006/12">2006年12月</a><span>(1)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2006/11">2006年11月</a><span>(2)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2006/10">2006年10月</a><span>(2)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2006/09">2006年09月</a><span>(1)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2006/07">2006年07月</a><span>(3)</span></li><li><a href="http://blog.csdn.net/gzlaiyonghao/article/month/2006/06">2006年06月</a><span>(5)</span></li>
</div>
</ul>
</div>
<div id="custom_column_955236" class="panel">
<ul class="panel_head"><span>编程语言</span></ul>
<ul class="panel_body">
<ul><li><a href="http://shootout.alioth.debian.org/gp4/benchmark.php?test=all&amp;amp;amp;lang=all" target="_blank">性能排名</a></li><li><a href="http://www.tiobe.com/index.php/content/paperinfo/tpci/index.html" target="_blank">TIOBE 流行度</a></li><li><a href="http://langpop.com/" target="_blank">LangPop 流行度</a></li><li><a href="http://lang-index.sourceforge.net/" target="_blank">透明排行榜</a></li>

<li><a href="https://github.com/languages" target="_blank">Github top lang</a></li>

<li><a href="http://www.statisticbrain.com/computer-programming-language-statistics/" target="_blank">Computer Programming Language Statistics</a></li>

<li><a href="http://db-engines.com/en/ranking" target="_blank">DB Engines</a></li>


</ul>
</ul>
</div></div>
<div class="clear"></div>
</div>

<div class="clear"></div>
</div>

<script type="text/javascript" src="http://static.blog.csdn.net/scripts/newblog.min.js?v=1.1"></script>
<script type="text/javascript" src="http://medal.blog.csdn.net/showblogmedal.ashx?blogid=57230"></script>

<script type="text/javascript">
document.write('<script type="text/javascript" src="http://csdnimg.cn/pubfooter/js/publib_footer.js?' + Math.floor(new Date()/120000).toString(36) + '="></'+'script>');
</script>

<script type="text/javascript" src="http://passport.csdn.net/content/loginbox/login.js"></script>
<script type="text/javascript" src="http://js.tongji.linezing.com/2673176/tongji.js"></script>
<script type="text/javascript">document.write("<img src=http://counter.csdn.net/pv.aspx?id=24 border=0 width=0 height=0>");</script>
<script type="text/javascript" src="http://www.csdn.net/ui/scripts/Csdn/counter.js?v=1"></script>


<script type="text/javascript" src="http://ad.csdn.net/scripts/ad-blog.js"></script>

<script type="text/javascript" src="http://zz.csdn.net/js/count.js"></script>

</div>
</body>
</html>