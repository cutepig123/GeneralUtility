<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head id="Head"><title>
	岁月流转，往昔空明 - C++博客
</title><meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><meta id="metaKeywords" name="keywords" content="C++,cppblog,vc,mfc,博客,C++ blog,C++博客" /><link type="text/css" rel="stylesheet" href="/css/common.css" /><link id="MainCss" type="text/css" rel="stylesheet" href="http://www.cppblog.com/Skins/WinXPSilver/style.css" /><link id="RSSLink" title="RSS" type="application/rss+xml" rel="alternate" href="http://www.cppblog.com/lingjingqiu/rss.aspx" /></head>
<body>
    <form name="Form1" method="post" action="default.aspx" id="Form1">
<div>
<input type="hidden" name="__VIEWSTATE" id="
__VIEWSTATE" value="" />
</div>

        
<div id="top">
	
<div>
	<table>
		<tr>
			<td class="HeaderTitles">
                <h1 class="HeaderTitle"><a id="Header1_HeaderTitle" class="HeaderMainTitle" href="http://www.cppblog.com/lingjingqiu/">岁月流转，往昔空明</a></h1>
				<p id="tagline"></p>
			</td>
		</tr>
	</table>
</div>
<div class="HeaderBar">
	<table id="HeaderBar" class="HeaderBar">
		<tr>
		    <td class="HeaderBarTab" nowrap>
		        <img id="Header1_StartButton" src="../Skins/WinXPSilver/Images/WinXP-Silver_Spacer.gif" align="absmiddle" style="border-width:0px;" />
		        <a id="Header1_MyLinks1_HomeLink" href="http://www.cppblog.com/">C++博客</a><img id="Header1_MyLinks1_Divider1" src="../Skins/WinXPSilver/Images/WinXP-Silver_Divider.gif" align="absmiddle" style="border-width:0px;" />
<a id="Header1_MyLinks1_MyHomeLink" href="http://www.cppblog.com/lingjingqiu/">首页</a><img id="Header1_MyLinks1_Image1" src="../Skins/WinXPSilver/Images/WinXP-Silver_Divider.gif" align="absmiddle" style="border-width:0px;" />
<a id="Header1_MyLinks1_NewPostLink" href="http://www.cppblog.com/lingjingqiu/admin/EditPosts.aspx?opt=1">新随笔</a><img id="Header1_MyLinks1_Image2" src="../Skins/WinXPSilver/Images/WinXP-Silver_Divider.gif" align="absmiddle" style="border-width:0px;" />
<a id="Header1_MyLinks1_ContactLink" accesskey="9" href="http://www.cppblog.com/lingjingqiu/contact.aspx?id=1">联系</a><img id="Header1_MyLinks1_Divider2" src="../Skins/WinXPSilver/Images/WinXP-Silver_Divider.gif" align="absmiddle" style="border-width:0px;" />
<a id="Header1_MyLinks1_Syndication" href="http://www.cppblog.com/lingjingqiu/Rss.aspx" target="_blank">聚合</a><img id="Header1_MyLinks1_Divider3" src="../Skins/WinXPSilver/Images/WinXP-Silver_Divider.gif" align="absmiddle" style="border-width:0px;" />
<!--<a id="Header1_MyLinks1_Syndication2" href="../Atom.aspx" target="_blank">Syndicate this Site (Atom)</a><img id="Header1_MyLinks1_Divider6" src="../Skins/WinXPSilver/Images/WinXP-Silver_Divider.gif" align="absmiddle" style="border-width:0px;" />
<a id="Header1_MyLinks1_XMLLink" class="XMLLink" href="http://www.cppblog.com/lingjingqiu/Rss.aspx" target="_blank"><img src="http://www.cppblog.com/images/xml.gif" style="border-width:0px;" /></a>-->
<a id="Header1_MyLinks1_Admin" href="http://www.cppblog.com/lingjingqiu/admin/EditPosts.aspx">管理</a><img id="Header1_MyLinks1_Divider5" src="../Skins/WinXPSilver/Images/WinXP-Silver_Divider.gif" align="absmiddle" style="border-width:0px;" />

			</td>
			<td class="HeaderBarTabBack" nowrap width="100%">
				
<div class="BlogStatsBar">
	<table class="BlogStatsBar">
		<tr>
			<td width="100%">
			</td>
			<td class="BlogStatsBar" nowrap>
				&nbsp;
				115 
				Posts&nbsp;::
				3 Stories
				::
				383 Comments
				::
				0 Trackbacks
			</td>
		</tr>
	</table>
</div>

			</td>
		</tr>
	</table>
</div>

</div>
<div id="leftmenu" style="display:none">
	
		
		
<h3>常用链接</h3>
<ul>
		<li><a id="SingleColumn1_ctl00_repeaterLinks_ctl01_lnkLinkItem" href="http://www.cppblog.com/lingjingqiu/MyPosts.html">我的随笔</a></li>
	
		<li><a id="SingleColumn1_ctl00_repeaterLinks_ctl02_lnkLinkItem" href="http://www.cppblog.com/lingjingqiu/MyComments.html">我的评论</a></li>
	
		<li><a id="SingleColumn1_ctl00_repeaterLinks_ctl03_lnkLinkItem" href="http://www.cppblog.com/lingjingqiu/OtherPosts.html">我参与的随笔</a></li>
	</ul>
<H3>留言簿<span style="font-size:11px;font-weight:normal;">(13)</span></H3>
<ul>
	<li>
		<a id="SingleColumn1__3538d4d_lnkMessages" href="http://www.cppblog.com/lingjingqiu/Contact.aspx?id=1">给我留言</a>
	<li>
		<a id="SingleColumn1__3538d4d_lnkPublicMsgView" href="http://www.cppblog.com/lingjingqiu/default.aspx?opt=msg">查看公开留言</a>
	<li>
		<a id="SingleColumn1__3538d4d_lnkPrivateMsgView" href="http://www.cppblog.com/lingjingqiu/admin/MyMessages.aspx">查看私人留言</a>
	</li>
</ul>

		<h3>随笔档案<span style="font-size:11px;font-weight:normal">(115)</span></h3>
		
				<ul>
			
				<li> <a id="SingleColumn1_Categories_CatList_ctl00_LinkList_ctl01_Link" href="http://www.cppblog.com/lingjingqiu/archive/2012/03.html">2012年3月 (2)</a></li>
			
				<li> <a id="SingleColumn1_Categories_CatList_ctl00_LinkList_ctl02_Link" href="http://www.cppblog.com/lingjingqiu/archive/2012/02.html">2012年2月 (1)</a></li>
			
				<li> <a id="SingleColumn1_Categories_CatList_ctl00_LinkList_ctl03_Link" href="http://www.cppblog.com/lingjingqiu/archive/2011/12.html">2011年12月 (1)</a></li>
			
				<li> <a id="SingleColumn1_Categories_CatList_ctl00_LinkList_ctl04_Link" href="http://www.cppblog.com/lingjingqiu/archive/2011/11.html">2011年11月 (1)</a></li>
			
				<li> <a id="SingleColumn1_Categories_CatList_ctl00_LinkList_ctl05_Link" href="http://www.cppblog.com/lingjingqiu/archive/2011/08.html">2011年8月 (1)</a></li>
			
				<li> <a id="SingleColumn1_Categories_CatList_ctl00_LinkList_ctl06_Link" href="http://www.cppblog.com/lingjingqiu/archive/2011/07.html">2011年7月 (1)</a></li>
			
				<li> <a id="SingleColumn1_Categories_CatList_ctl00_LinkList_ctl07_Link" href="http://www.cppblog.com/lingjingqiu/archive/2011/06.html">2011年6月 (2)</a></li>
			
				<li> <a id="SingleColumn1_Categories_CatList_ctl00_LinkList_ctl08_Link" href="http://www.cppblog.com/lingjingqiu/archive/2011/05.html">2011年5月 (1)</a></li>
			
				<li> <a id="SingleColumn1_Categories_CatList_ctl00_LinkList_ctl09_Link" href="http://www.cppblog.com/lingjingqiu/archive/2011/04.html">2011年4月 (2)</a></li>
			
				<li> <a id="SingleColumn1_Categories_CatList_ctl00_LinkList_ctl10_Link" href="http://www.cppblog.com/lingjingqiu/archive/2011/03.html">2011年3月 (3)</a></li>
			
				<li> <a id="SingleColumn1_Categories_CatList_ctl00_LinkList_ctl11_Link" href="http://www.cppblog.com/lingjingqiu/archive/2011/01.html">2011年1月 (2)</a></li>
			
				<li> <a id="SingleColumn1_Categories_CatList_ctl00_LinkList_ctl12_Link" href="http://www.cppblog.com/lingjingqiu/archive/2010/12.html">2010年12月 (1)</a></li>
			
				<li> <a id="SingleColumn1_Categories_CatList_ctl00_LinkList_ctl13_Link" href="http://www.cppblog.com/lingjingqiu/archive/2010/09.html">2010年9月 (1)</a></li>
			
				<li> <a id="SingleColumn1_Categories_CatList_ctl00_LinkList_ctl14_Link" href="http://www.cppblog.com/lingjingqiu/archive/2010/08.html">2010年8月 (1)</a></li>
			
				<li> <a id="SingleColumn1_Categories_CatList_ctl00_LinkList_ctl15_Link" href="http://www.cppblog.com/lingjingqiu/archive/2010/07.html">2010年7月 (1)</a></li>
			
				<li> <a id="SingleColumn1_Categories_CatList_ctl00_LinkList_ctl16_Link" href="http://www.cppblog.com/lingjingqiu/archive/2010/06.html">2010年6月 (3)</a></li>
			
				<li> <a id="SingleColumn1_Categories_CatList_ctl00_LinkList_ctl17_Link" href="http://www.cppblog.com/lingjingqiu/archive/2010/05.html">2010年5月 (3)</a></li>
			
				<li> <a id="SingleColumn1_Categories_CatList_ctl00_LinkList_ctl18_Link" href="http://www.cppblog.com/lingjingqiu/archive/2010/04.html">2010年4月 (2)</a></li>
			
				<li> <a id="SingleColumn1_Categories_CatList_ctl00_LinkList_ctl19_Link" href="http://www.cppblog.com/lingjingqiu/archive/2010/03.html">2010年3月 (3)</a></li>
			
				<li> <a id="SingleColumn1_Categories_CatList_ctl00_LinkList_ctl20_Link" href="http://www.cppblog.com/lingjingqiu/archive/2009/12.html">2009年12月 (6)</a></li>
			
				<li> <a id="SingleColumn1_Categories_CatList_ctl00_LinkList_ctl21_Link" href="http://www.cppblog.com/lingjingqiu/archive/2009/10.html">2009年10月 (1)</a></li>
			
				<li> <a id="SingleColumn1_Categories_CatList_ctl00_LinkList_ctl22_Link" href="http://www.cppblog.com/lingjingqiu/archive/2009/03.html">2009年3月 (1)</a></li>
			
				<li> <a id="SingleColumn1_Categories_CatList_ctl00_LinkList_ctl23_Link" href="http://www.cppblog.com/lingjingqiu/archive/2009/02.html">2009年2月 (1)</a></li>
			
				<li> <a id="SingleColumn1_Categories_CatList_ctl00_LinkList_ctl24_Link" href="http://www.cppblog.com/lingjingqiu/archive/2009/01.html">2009年1月 (1)</a></li>
			
				<li> <a id="SingleColumn1_Categories_CatList_ctl00_LinkList_ctl25_Link" href="http://www.cppblog.com/lingjingqiu/archive/2008/12.html">2008年12月 (1)</a></li>
			
				<li> <a id="SingleColumn1_Categories_CatList_ctl00_LinkList_ctl26_Link" href="http://www.cppblog.com/lingjingqiu/archive/2008/11.html">2008年11月 (2)</a></li>
			
				<li> <a id="SingleColumn1_Categories_CatList_ctl00_LinkList_ctl27_Link" href="http://www.cppblog.com/lingjingqiu/archive/2008/09.html">2008年9月 (1)</a></li>
			
				<li> <a id="SingleColumn1_Categories_CatList_ctl00_LinkList_ctl28_Link" href="http://www.cppblog.com/lingjingqiu/archive/2008/07.html">2008年7月 (3)</a></li>
			
				<li> <a id="SingleColumn1_Categories_CatList_ctl00_LinkList_ctl29_Link" href="http://www.cppblog.com/lingjingqiu/archive/2008/06.html">2008年6月 (1)</a></li>
			
				<li> <a id="SingleColumn1_Categories_CatList_ctl00_LinkList_ctl30_Link" href="http://www.cppblog.com/lingjingqiu/archive/2008/05.html">2008年5月 (3)</a></li>
			
				<li> <a id="SingleColumn1_Categories_CatList_ctl00_LinkList_ctl31_Link" href="http://www.cppblog.com/lingjingqiu/archive/2008/03.html">2008年3月 (1)</a></li>
			
				<li> <a id="SingleColumn1_Categories_CatList_ctl00_LinkList_ctl32_Link" href="http://www.cppblog.com/lingjingqiu/archive/2008/02.html">2008年2月 (3)</a></li>
			
				<li> <a id="SingleColumn1_Categories_CatList_ctl00_LinkList_ctl33_Link" href="http://www.cppblog.com/lingjingqiu/archive/2007/12.html">2007年12月 (2)</a></li>
			
				<li> <a id="SingleColumn1_Categories_CatList_ctl00_LinkList_ctl34_Link" href="http://www.cppblog.com/lingjingqiu/archive/2007/11.html">2007年11月 (4)</a></li>
			
				<li> <a id="SingleColumn1_Categories_CatList_ctl00_LinkList_ctl35_Link" href="http://www.cppblog.com/lingjingqiu/archive/2007/10.html">2007年10月 (3)</a></li>
			
				<li> <a id="SingleColumn1_Categories_CatList_ctl00_LinkList_ctl36_Link" href="http://www.cppblog.com/lingjingqiu/archive/2007/08.html">2007年8月 (5)</a></li>
			
				<li> <a id="SingleColumn1_Categories_CatList_ctl00_LinkList_ctl37_Link" href="http://www.cppblog.com/lingjingqiu/archive/2007/07.html">2007年7月 (2)</a></li>
			
				<li> <a id="SingleColumn1_Categories_CatList_ctl00_LinkList_ctl38_Link" href="http://www.cppblog.com/lingjingqiu/archive/2007/06.html">2007年6月 (5)</a></li>
			
				<li> <a id="SingleColumn1_Categories_CatList_ctl00_LinkList_ctl39_Link" href="http://www.cppblog.com/lingjingqiu/archive/2007/05.html">2007年5月 (5)</a></li>
			
				<li> <a id="SingleColumn1_Categories_CatList_ctl00_LinkList_ctl40_Link" href="http://www.cppblog.com/lingjingqiu/archive/2007/04.html">2007年4月 (2)</a></li>
			
				<li> <a id="SingleColumn1_Categories_CatList_ctl00_LinkList_ctl41_Link" href="http://www.cppblog.com/lingjingqiu/archive/2007/01.html">2007年1月 (3)</a></li>
			
				<li> <a id="SingleColumn1_Categories_CatList_ctl00_LinkList_ctl42_Link" href="http://www.cppblog.com/lingjingqiu/archive/2006/12.html">2006年12月 (7)</a></li>
			
				<li> <a id="SingleColumn1_Categories_CatList_ctl00_LinkList_ctl43_Link" href="http://www.cppblog.com/lingjingqiu/archive/2006/11.html">2006年11月 (6)</a></li>
			
				<li> <a id="SingleColumn1_Categories_CatList_ctl00_LinkList_ctl44_Link" href="http://www.cppblog.com/lingjingqiu/archive/2006/10.html">2006年10月 (6)</a></li>
			
				<li> <a id="SingleColumn1_Categories_CatList_ctl00_LinkList_ctl45_Link" href="http://www.cppblog.com/lingjingqiu/archive/2006/09.html">2006年9月 (2)</a></li>
			
				<li> <a id="SingleColumn1_Categories_CatList_ctl00_LinkList_ctl46_Link" href="http://www.cppblog.com/lingjingqiu/archive/2006/05.html">2006年5月 (3)</a></li>
			
				<li> <a id="SingleColumn1_Categories_CatList_ctl00_LinkList_ctl47_Link" href="http://www.cppblog.com/lingjingqiu/archive/2005/12.html">2005年12月 (1)</a></li>
			
				<li> <a id="SingleColumn1_Categories_CatList_ctl00_LinkList_ctl48_Link" href="http://www.cppblog.com/lingjingqiu/archive/2005/11.html">2005年11月 (2)</a></li>
			
				</ul>
			
	
		<h3>文章分类<span style="font-size:11px;font-weight:normal">(3)</span></h3>
		
				<ul>
			
				<li><a id="SingleColumn1_Categories_CatList_ctl01_LinkList_ctl01_RssLink" title="Subscribe to Tips，Tricks(1)" href="http://www.cppblog.com/lingjingqiu/category/359.html/rss"><img border='0' src='/Skins/WinXPBlue/Images/xml.gif' align='center'></a> <a id="SingleColumn1_Categories_CatList_ctl01_LinkList_ctl01_Link" href="http://www.cppblog.com/lingjingqiu/category/359.html">Tips，Tricks(1)</a></li>
			
				<li><a id="SingleColumn1_Categories_CatList_ctl01_LinkList_ctl02_RssLink" title="Subscribe to 程序库实作" href="http://www.cppblog.com/lingjingqiu/category/354.html/rss"><img border='0' src='/Skins/WinXPBlue/Images/xml.gif' align='center'></a> <a id="SingleColumn1_Categories_CatList_ctl01_LinkList_ctl02_Link" href="http://www.cppblog.com/lingjingqiu/category/354.html">程序库实作</a></li>
			
				<li><a id="SingleColumn1_Categories_CatList_ctl01_LinkList_ctl03_RssLink" title="Subscribe to 链接区" href="http://www.cppblog.com/lingjingqiu/category/358.html/rss"><img border='0' src='/Skins/WinXPBlue/Images/xml.gif' align='center'></a> <a id="SingleColumn1_Categories_CatList_ctl01_LinkList_ctl03_Link" href="http://www.cppblog.com/lingjingqiu/category/358.html">链接区</a></li>
			
				<li><a id="SingleColumn1_Categories_CatList_ctl01_LinkList_ctl04_RssLink" title="Subscribe to 软件的蓝图(1)" href="http://www.cppblog.com/lingjingqiu/category/352.html/rss"><img border='0' src='/Skins/WinXPBlue/Images/xml.gif' align='center'></a> <a id="SingleColumn1_Categories_CatList_ctl01_LinkList_ctl04_Link" href="http://www.cppblog.com/lingjingqiu/category/352.html">软件的蓝图(1)</a></li>
			
				<li><a id="SingleColumn1_Categories_CatList_ctl01_LinkList_ctl05_RssLink" title="Subscribe to 数字魔方" href="http://www.cppblog.com/lingjingqiu/category/353.html/rss"><img border='0' src='/Skins/WinXPBlue/Images/xml.gif' align='center'></a> <a id="SingleColumn1_Categories_CatList_ctl01_LinkList_ctl05_Link" href="http://www.cppblog.com/lingjingqiu/category/353.html">数字魔方</a></li>
			
				<li><a id="SingleColumn1_Categories_CatList_ctl01_LinkList_ctl06_RssLink" title="Subscribe to 心情故事" href="http://www.cppblog.com/lingjingqiu/category/355.html/rss"><img border='0' src='/Skins/WinXPBlue/Images/xml.gif' align='center'></a> <a id="SingleColumn1_Categories_CatList_ctl01_LinkList_ctl06_Link" href="http://www.cppblog.com/lingjingqiu/category/355.html">心情故事</a></li>
			
				<li><a id="SingleColumn1_Categories_CatList_ctl01_LinkList_ctl07_RssLink" title="Subscribe to 众乐乐(1)" href="http://www.cppblog.com/lingjingqiu/category/356.html/rss"><img border='0' src='/Skins/WinXPBlue/Images/xml.gif' align='center'></a> <a id="SingleColumn1_Categories_CatList_ctl01_LinkList_ctl07_Link" href="http://www.cppblog.com/lingjingqiu/category/356.html">众乐乐(1)</a></li>
			
				<li><a id="SingleColumn1_Categories_CatList_ctl01_LinkList_ctl08_RssLink" title="Subscribe to 转贴区" href="http://www.cppblog.com/lingjingqiu/category/357.html/rss"><img border='0' src='/Skins/WinXPBlue/Images/xml.gif' align='center'></a> <a id="SingleColumn1_Categories_CatList_ctl01_LinkList_ctl08_Link" href="http://www.cppblog.com/lingjingqiu/category/357.html">转贴区</a></li>
			
				</ul>
			
	
		<h3>文章档案<span style="font-size:11px;font-weight:normal">(3)</span></h3>
		
				<ul>
			
				<li> <a id="SingleColumn1_Categories_CatList_ctl02_LinkList_ctl01_Link" href="http://www.cppblog.com/lingjingqiu/archives/2006/05.html">2006年5月 (1)</a></li>
			
				<li> <a id="SingleColumn1_Categories_CatList_ctl02_LinkList_ctl02_Link" href="http://www.cppblog.com/lingjingqiu/archives/2005/12.html">2005年12月 (1)</a></li>
			
				<li> <a id="SingleColumn1_Categories_CatList_ctl02_LinkList_ctl03_Link" href="http://www.cppblog.com/lingjingqiu/archives/2005/11.html">2005年11月 (1)</a></li>
			
				</ul>
			
	
		<h3>收藏夹<span style="font-size:11px;font-weight:normal">(1)</span></h3>
		
				<ul>
			
				<li><a id="SingleColumn1_Categories_CatList_ctl03_LinkList_ctl01_RssLink" title="Subscribe to 图形学(1)" href="http://www.cppblog.com/lingjingqiu/favorite/478.html/rss"><img border='0' src='/Skins/WinXPBlue/Images/xml.gif' align='center'></a> <a id="SingleColumn1_Categories_CatList_ctl03_LinkList_ctl01_Link" href="http://www.cppblog.com/lingjingqiu/favorite/478.html">图形学(1)</a></li>
			
				</ul>
			
	
		<h3>青青子衿</h3>
		
				<ul>
			
				</ul>
			
	
		<h3>友情链接</h3>
		
				<ul>
			
				<li> <a id="SingleColumn1_Categories_CatList_ctl05_LinkList_ctl01_Link" href="http://www.azure.com.cn">Azure的专栏</a></li>
			<li style='margin-top:2px;'>3D技术挺好的,博客(网站?)有很多值得学习的例子.高人一名.</li>
				<li> <a id="SingleColumn1_Categories_CatList_ctl05_LinkList_ctl02_Link" href="http://www.cnblogs.com/flyingis/">Flyingis的博客，GIS</a></li>
			<li style='margin-top:2px;'>GIS的高手，望尘莫及，努力学习中。</li>
				<li> <a id="SingleColumn1_Categories_CatList_ctl05_LinkList_ctl03_Link" href="http://www.cppblog.com/vczh">VCZH的博客</a></li>
			<li style='margin-top:2px;'>编译器小霸王，现在在Microsoft Search Tech Group实习</li>
				<li> <a id="SingleColumn1_Categories_CatList_ctl05_LinkList_ctl04_Link" href="http://jedimaster.cnblogs.com/">波波的Blog</a></li>
			<li style='margin-top:2px;'>离线大牛啊~</li>
				<li> <a id="SingleColumn1_Categories_CatList_ctl05_LinkList_ctl05_Link" href="http://sixwater.cnblogs.com">六水的主页</a></li>
			<li style='margin-top:2px;'>六水的主页，Inverse Kinematic，Ray Tracing， Photon Mapping皆有涉猎。CTO.</li>
				<li> <a id="SingleColumn1_Categories_CatList_ctl05_LinkList_ctl06_Link" href="http://blog.gameres.com/show.asp?BlogID=170&amp;column=0">我的心灵是一片湖蓝</a></li>
			<li style='margin-top:2px;'>我在GameRes上的Blog，经营了一段时间了。经常会翻翻以前的帖子，回味一下过去的快乐和悲伤。</li>
				</ul>
			
	

<h3>最新随笔</h3>
<div class="RecentComment">
<ul style="word-break:break-all">
	
	
			<li><a id="SingleColumn1__19af134_RecentPostsList_ctl00_RecentPostsList2_ctl00_Hyperlink1" href="http://www.cppblog.com/lingjingqiu/archive/2012/03/08/167444.html">1. SASL编译器Diagnostic信息的管理、格式化与输出</a></li>
		
		
	
			<li><a id="SingleColumn1__19af134_RecentPostsList_ctl01_RecentPostsList2_ctl00_Hyperlink1" href="http://www.cppblog.com/lingjingqiu/archive/2012/03/06/167256.html">2. SALVIA 0.3 发布：Pixel Shader添加了tex2D的支持</a></li>
		
		
	
			<li><a id="SingleColumn1__19af134_RecentPostsList_ctl02_RecentPostsList2_ctl00_Hyperlink1" href="http://www.cppblog.com/lingjingqiu/archive/2012/02/24/166438.html">3. 开源软件光栅化渲染器SALVIA 0.2.5发布：为Pixel Shader添加了分支与循环的支持</a></li>
		
		
	
			<li><a id="SingleColumn1__19af134_RecentPostsList_ctl03_RecentPostsList2_ctl00_Hyperlink1" href="http://www.cppblog.com/lingjingqiu/archive/2011/12/26/162868.html">4. SALVIA正式支持一站式编译</a></li>
		
		
	
			<li><a id="SingleColumn1__19af134_RecentPostsList_ctl04_RecentPostsList2_ctl00_Hyperlink1" href="http://www.cppblog.com/lingjingqiu/archive/2011/11/22/160736.html">5. LLVM随笔</a></li>
		
		
	
			<li><a id="SingleColumn1__19af134_RecentPostsList_ctl05_RecentPostsList2_ctl00_Hyperlink1" href="http://www.cppblog.com/lingjingqiu/archive/2011/08/17/153655.html">6. LLVM的调用协议与内存对齐</a></li>
		
		
	
			<li><a id="SingleColumn1__19af134_RecentPostsList_ctl06_RecentPostsList2_ctl00_Hyperlink1" href="http://www.cppblog.com/lingjingqiu/archive/2011/07/17/151230.html">7. SALVIA Milestone 1.1 Fix 1: 新Sponza Demo</a></li>
		
		
	
			<li><a id="SingleColumn1__19af134_RecentPostsList_ctl07_RecentPostsList2_ctl00_Hyperlink1" href="http://www.cppblog.com/lingjingqiu/archive/2011/06/25/149442.html">8. SALVIA的Vertex Shader已经可以work了</a></li>
		
		
	
			<li><a id="SingleColumn1__19af134_RecentPostsList_ctl08_RecentPostsList2_ctl00_Hyperlink1" href="http://www.cppblog.com/lingjingqiu/archive/2011/06/01/147891.html">9. SALVIA项目简报（Aug 24,2010 - Jun,01,2011）</a></li>
		
		
	
			<li><a id="SingleColumn1__19af134_RecentPostsList_ctl09_RecentPostsList2_ctl00_Hyperlink1" href="http://www.cppblog.com/lingjingqiu/archive/2011/05/16/146499.html">10. PPT: Introduction to SALVIA</a></li>
		
	
</ul>
</div>

<script language="JavaScript">
function SearchGoogle(key,evt,site)
		{
			if(evt.keyCode==13 || evt.keyCode==0 || evt.type =='click')
			{
				key.focus();
				var keystr = encodeURIComponent(key.value);
				url = "http://www.google.com/search?q=";
				url = url+keystr;
				url += "&ie=UTF-8&oe=GB2312&hl=zh-CN&domains="+site+"&sitesearch="+site;
				window.location=url;
				return false;
			}
		}
</script>
<H3>搜索</H3>
<ul>
	<li>
		<li><input style="WIDTH: 130px" type="text" name="q" id="q" onkeydown="return SearchGoogle(document.getElementById('q'),event,'www.cppblog.com/lingjingqiu')">&nbsp;<input onclick="SearchGoogle(document.getElementById('q'),event,'www.cppblog.com/lingjingqiu')" type="button" value="搜索" name="sa">
	</li>
</ul>

<H3>积分与排名</H3>
<ul>
	<li>
		积分 -
		198991
	<li>
		排名 -
		37
	</li>
</ul>

<h3>最新评论
	<a id="SingleColumn1__3d14c8d_RSSHyperlink1" href="http://www.cppblog.com/lingjingqiu/CommentsRSS.aspx"><img src="/images/xml.gif" style="border-width:0px;" /></a></h3>
<div class="RecentComment">
	
			<ul>
		
			<li style="word-break:break-all">
				<a id="SingleColumn1__3d14c8d_CommentList_ctl01_Hyperlink1" href="http://www.cppblog.com/lingjingqiu/archive/2012/05/28/162868.html#176544">1. re: SALVIA正式支持一站式编译</a>
			</li>
			<li style="word-break:break-all">
				@空明流转<br>不搞技术了？多可惜
			</li>
			<li style="text-align:right;margin-right:4px">
				--Scan</li>
		
			<li style="word-break:break-all">
				<a id="SingleColumn1__3d14c8d_CommentList_ctl02_Hyperlink1" href="http://www.cppblog.com/lingjingqiu/archive/2012/01/12/113959.html#164042">2. re: 硕士论文致谢[未登录]</a>
			</li>
			<li style="word-break:break-all">
				古典文学不错，文理双全
			</li>
			<li style="text-align:right;margin-right:4px">
				--春秋十二月</li>
		
			<li style="word-break:break-all">
				<a id="SingleColumn1__3d14c8d_CommentList_ctl03_Hyperlink1" href="http://www.cppblog.com/lingjingqiu/archive/2012/01/12/162868.html#164041">3. re: SALVIA正式支持一站式编译</a>
			</li>
			<li style="word-break:break-all">
				@春秋十二月<br>年前在Autodesk，现在换到一家小公司，做技术销售了。
			</li>
			<li style="text-align:right;margin-right:4px">
				--空明流转</li>
		
			<li style="word-break:break-all">
				<a id="SingleColumn1__3d14c8d_CommentList_ctl04_Hyperlink1" href="http://www.cppblog.com/lingjingqiu/archive/2012/01/12/162868.html#164040">4. re: SALVIA正式支持一站式编译[未登录]</a>
			</li>
			<li style="word-break:break-all">
				我今天好好看了下你的博文，写的不错，有个性，原来你是个硕士，你现在在哪工作
			</li>
			<li style="text-align:right;margin-right:4px">
				--春秋十二月</li>
		
			<li style="word-break:break-all">
				<a id="SingleColumn1__3d14c8d_CommentList_ctl05_Hyperlink1" href="http://www.cppblog.com/lingjingqiu/archive/2011/12/28/162868.html#162981">5. re: SALVIA正式支持一站式编译</a>
			</li>
			<li style="word-break:break-all">
				@陈梓瀚(vczh)<br>滚。。。
			</li>
			<li style="text-align:right;margin-right:4px">
				--空明流转</li>
		
			</ul>
		
</div>

<h3>阅读排行榜</h3>
<div class="RecentComment">
	
			<ul style="word-break:break-all">
		
			<li>
				<a id="SingleColumn1__2bf6217_TopList_ctl01_Hyperlink1" href="http://www.cppblog.com/lingjingqiu/archive/2009/01/06/71363.aspx">1. C++下Windows Forms + MFC + WTL + wxWidgets + Qt + GTK+  非官方综合比较(8145)</a>
			</li>
		
			<li>
				<a id="SingleColumn1__2bf6217_TopList_ctl02_Hyperlink1" href="http://www.cppblog.com/lingjingqiu/archive/2008/06/07/52463.aspx">2. 一个3D骨骼动画 2D版超精简Demo，原理和实现几乎同3D一致(4420)</a>
			</li>
		
			<li>
				<a id="SingleColumn1__2bf6217_TopList_ctl03_Hyperlink1" href="http://www.cppblog.com/lingjingqiu/archive/2010/06/24/118674.aspx">3. 告别的话(4362)</a>
			</li>
		
			<li>
				<a id="SingleColumn1__2bf6217_TopList_ctl04_Hyperlink1" href="http://www.cppblog.com/lingjingqiu/archive/2006/11/20/15453.aspx">4. [翻译]CUDA:GPU计算的革命(4098)</a>
			</li>
		
			<li>
				<a id="SingleColumn1__2bf6217_TopList_ctl05_Hyperlink1" href="http://www.cppblog.com/lingjingqiu/archive/2010/04/29/113959.aspx">5. 硕士论文致谢(3810)</a>
			</li>
		
			</ul>
		
</div>

<h3>评论排行榜</h3>
<div class="RecentComment">
	
			<ul style="word-break:break-all">
		
			<li>
				<a id="SingleColumn1__1bf37a_TopList_ctl01_Hyperlink1" href="http://www.cppblog.com/lingjingqiu/archive/2007/11/09/36184.aspx">1. [转贴]构造可配置的词法分析器(已完结)(19)</a>
			</li>
		
			<li>
				<a id="SingleColumn1__1bf37a_TopList_ctl02_Hyperlink1" href="http://www.cppblog.com/lingjingqiu/archive/2010/12/19/136967.aspx">2. 十年编程&mdash;&mdash;和本文罪魁祸首陈梓瀚一起悼念逝去的十年(17)</a>
			</li>
		
			<li>
				<a id="SingleColumn1__1bf37a_TopList_ctl03_Hyperlink1" href="http://www.cppblog.com/lingjingqiu/archive/2009/12/07/102698.aspx">3. SALVIA：A Direct 3D 10 Similar Software Renderer 项目新成员招募计划(15)</a>
			</li>
		
			<li>
				<a id="SingleColumn1__1bf37a_TopList_ctl04_Hyperlink1" href="http://www.cppblog.com/lingjingqiu/archive/2010/06/24/118674.aspx">4. 告别的话(14)</a>
			</li>
		
			<li>
				<a id="SingleColumn1__1bf37a_TopList_ctl05_Hyperlink1" href="http://www.cppblog.com/lingjingqiu/archive/2010/04/29/113959.aspx">5. 硕士论文致谢(13)</a>
			</li>
		
			</ul>
		
</div>

	

</div>
<div id="main">
	
					
<p class="date">
	置顶随笔		  
	<a id="_a8d42b5f172_HomePageDays_ctl04_ImageLink" Title="Day Archive" href="http://www.cppblog.com/lingjingqiu/" style="display:inline-block;border-width:0px;height:15px;width:12px;">#</a>
</p>


		<div class="post">
			<div class="postTitle">
				<a id="_a8d42b5f172_HomePageDays_ctl04_DayList_ctl00_TitleUrl" href="http://www.cppblog.com/lingjingqiu/archive/2009/12/07/102698.html">[置顶]SALVIA：A Direct 3D 10 Similar Software Renderer 项目新成员招募计划</a>
			</div>
			
			<div class="postText">
				<div id="blogContent" class="text-article"> <p><strong>SALVIA是一款光栅化的软件渲染器</strong>，设计目标是达到Direct3D 10/11的核心功能的实现。<strong>我们的设计目的主要包括以下几点</strong>：</p> <ul> <li>一个高度可移植的光栅化图形管线的软件实现  <li>图形硬件工作原理的展现和教学  <li>为下一代Many Core处理器架构的计算设备提供高性能的图形绘制能力  <li>提供在GPU一类的流处理器上难以实现，但在Many Core架构的设备上有着显著优势的Features  <li>比图形API更加易于使用的接口  <li>与复杂的渲染技术（如辐射度和光线追踪等）相结合的可伸缩的渲染体系，研究可以提供速度-质量相均衡的渲染架构 </li></ul> <p><br>SALVIA的接口重点参照了DX10的设计。<br>以流水线划分Stage；每个Stage及其相关设施的接口，均采用了Object-Oriented的设计风格。<br>这种设计与D3D9和OGL的状态机风格的设计相比更易于使用，同时也降低了流水线前后级的耦合，对于优化或扩展都是有利的。<br><br><strong>目前，SALVIA已经具有了完整的D3D9的流水线级，并有了基本的Demo。</strong> <br>在未来，SALVIA将在维持内核稳定的同时，通过扩展提供先进的图形技术支撑。<br>同时，我们还将尝试着将一些不易在GPU上实现的算法，以扩展的形式在SALVIA中实现出来，以期提供高于图形API的表现和特性。<br><br>SALVIA在<strong>近阶段的主要工作</strong>包括：</p> <ul> <li>Rasterizer的优化  <li>SALVIA Shading Language语言特性设计及编译器实现，为SALVIA提供文本化的Shader <li>MSAA，并提供可定制的Sampling Pattern（2x 和 4x，目前尚有Bug）  <li>EWA-based Anistropic Filtering  <li>以扩展形式提供的Geometry Shader，Hull Shader和Tesselassion Shader  <li>并行优化（持续优化中）  <li>Intel SCC的移植  <li>特性及性能的演示用例  <li>文档撰写 （已经有成员负责此事）</li></ul> <p><br>目前，SALVIA已经作为一个开源项目发布在<a href="http://code.google.com/p/softart" target="_blank">http://code.google.com/p/softart</a>上，最新的代码在Mercurial中。<br><strong>所有代码除特殊声明外，均为GPL 2协议，您可以在协议许可的范围内自由下载或使用。</strong> <br><br><strong>如果发现了软件的缺陷，或者有任何好的意见和建议</strong>，您可以在项目管理页面上留言，或者联系作者<br><a href="mailto:wuye9036@gmail.com">wuye9036@gmail.com</a> <br><a href="mailto:minmin.gong@gmail.com">minmin.gong@gmail.com</a> <br>我谨代表项目全体成员及用户，对您为本项目的发展做出的独一无二的贡献表示敬意和感谢！</p> <p><br>作为一款基于GPL2协议的开源光栅化渲染器，SALVIA的目的当然不仅仅是软件产品那么简单。<br><strong>我们也希望以SALVIA为基础，建设一个充满智慧与活力的社区。</strong> <br>这个社区里，每一个智慧的闪光，都能够给其他人以启迪；每一个智慧的闪光，都能够使SALVIA向更好的方向迈出一步。<br><br>随着SALVIA框架的完成，SALVIA复杂而有挑战性的特性扩充工作已经摆在面前。<br>无论你</p> <ul> <li>是喜欢Irregular Z Buffer一类不走寻常路的硬件架构技术，期望实现自己的硬件架构；  <li>还是痴迷于运用最新的图形学理论，制作让人眼花缭乱，叹为观止的Demo；  <li>还是希望将SALVIA与商业产品相结合，使其想用户所想，为用户所不能为； </li></ul> <p>我们都以100%的热忱欢迎您。<br><br>为了维持SALVIA核心框架的稳定性，保证代码质量，我们计划将全部的Project Members分为<strong>核心组</strong>和<strong>开发者组</strong>两部分。<br><strong><br>核心组</strong>暂时由 <a href="http://www.cppblog.com/lingjingqiu" target="_blank">空明流转(</a><a href="mailto:wuye9036@gmail.com">wuye9036@gmail.com</a>) 和 Minmin.Gong(<a href="mailto:minmin.gong@gmail.com">minmin.gong@gmail.com</a>) 组成，主要负责架构设计，Shading Language语言标准的制定，SALVIA内核的开发，设计文档和接口约定的撰写，以及主分支的维护工作。<br><br><strong>开发者组</strong>将按照工作内容大致分为三种：</p> <ul> <li>文档组：主要负责注释和文档的撰写工作等  <li>编译器组：负责编译器Host特性和Language Bridge的设计和扩充，编译器维护，性能调优等  <li>扩展组：撰写设备或辅助库扩展，如Geometry Shader的Host代码，数学库等 </li></ul> <p><strong>现有开发组成员均具有6-12年不等的开发经验，多数在业内著名企业担任主要开发人员或技术负责人的职位。</strong></p> <p><strong>我们对开发组成员充分信任</strong>，开发组成员将在各自的分支上完成开发工作，在您工作的分支上，您享有完全的写权限。<br>我们将按期进行所有分支修改的Review工作，并邀请您参与到Review中来，您既是分支的作者，也是其他分支的审阅者。<br>如果您的修改通过了Review并采纳到主分支中，我们希望能在您的协助下，将您对SALVIA的所思，所想，所为，原原本本的融入到SALVIA主分支中，令它如您所想般的成长。<br>同时，核心组将会视情况，组织线上或线下的技术交流活动，与大家一起交流技术心得、分享管理经验。当然，也会分享快乐的人生。<br><br><strong>如果您希望加入我们这个团队当中</strong>，为我们的团队，为SALVIA提供您宝贵的支持，<strong>请您准备好您的以下资料</strong>：</p> <ul> <li><strong>ID</strong>：常用的ID，最好包括真实姓名  <li><strong>Google Account</strong>：如果没有，可以申请一个。因为我们的SVN Repository是建立在Google Code上的）  <li><strong>联系方式</strong>：IM（QQ,MSN,GTALK）和Email，有手机最好  <li><strong>自我介绍</strong>：包括擅长的技术啦，项目经验啦，闲扯也可，呵呵  <li>希望参与的工作  <li><strong>其他要求</strong>：唔。。。随便什么要求 </li></ul> <p><br>发送至邮箱 <a href="mailto:wuye9036@gmail.com">wuye9036@gmail.com</a>，或在此站点以站内信的方式发送与我。我将尽可能的与您联系并面议。</p> <p><br><strong>我们真诚欢迎您的参与，并对您的加盟，表示真心的感谢和由衷的期待！</strong></p></div>
			</div>
			
			<div class="postFoot">
				posted @ <a href="http://www.cppblog.com/lingjingqiu/archive/2009/12/07/102698.html" Title = "permalink">2009-12-07 10:31</a> 空明流转 阅读(1891) | <a href="http://www.cppblog.com/lingjingqiu/archive/2009/12/07/102698.html#FeedBack" Title = "comments, pingbacks, trackbacks">评论 (15)</a> |&nbsp;<a href="http://www.cppblog.com/lingjingqiu/admin/EditPosts.aspx?postid=102698">编辑</a>&nbsp;<a href="http://www.cppblog.com/lingjingqiu/AddToFavorite.aspx?id=102698">收藏</a>
			</div>
		</div>
		<br>
	
		
<p class="date">
	2012年3月8日		  
	<a id="_a8d42b5f172_HomePageDays_DaysList_ctl00_DayItem_ImageLink" Title="Day Archive" href="http://www.cppblog.com/lingjingqiu/archive/2012/03/08.html" style="display:inline-block;border-width:0px;height:15px;width:12px;">#</a>
</p>


		<div class="post">
			<div class="postTitle">
				<a id="_a8d42b5f172_HomePageDays_DaysList_ctl00_DayItem_DayList_ctl00_TitleUrl" href="http://www.cppblog.com/lingjingqiu/archive/2012/03/08/167444.html">SASL编译器Diagnostic信息的管理、格式化与输出</a>
			</div>
			
			<div class="postText">
				<p>1. Diagnostic需要提供哪些数据</p> <p>出错处理和错误提示，是编译器开发过程中重要而繁琐的部分。</p> <p>诊断信息的格式因编译器和IDE而不同。</p> <p>SALVIA将采用Visual Studio的格式，即 <u>文件 + 行列 + 类别（等级） + 编号 + 出错信息</u>。例如：</p> <p>d:\programming\salvia\sasl\test\cgllvm_test\function_test_basic.cpp(16): error C2061: syntax error : identifier 'te'</p> <p>因此在出错分析的时候，也需要提供如上的一些信息。</p> <p><br>2. 诊断信息Diagnostic Item</p> <p>在以上信息中，文件名和行列号可以在词法分析的时候获得，我们将它作为属性附加在Token中。</p> <p>类别和编号，对于同一个编译器而言是相对固定的，尽管我们可以用ID来表示，但是它并不直观，编译器检查也较少。与参数匹配时，也比较容易出错。</p> <p>SASL中的诊断信息将每个错误都使用一个类型来表达：</p><pre class="code"><span style="background: white; color: #8000ff">class</span><span style="background: white"> </span><span style="background: white; color: black">diagnostic_item
</span><span style="background: white"></span><span style="background: white; color: navy">{
</span><span style="background: white"></span><span style="background: white; color: navy">};
</span><span style="background: white">

</span><span style="background: white; color: #8000ff">class</span><span style="background: white"> </span><span style="background: white; color: black">unrecognized_identifier</span><span style="background: white; color: navy">:</span><span style="background: white"> </span><span style="background: white; color: #8000ff">public</span><span style="background: white"> </span><span style="background: white; color: black">diagnostic_item
</span><span style="background: white"></span><span style="background: white; color: navy">{
</span><span style="background: white"></span><span style="background: white; color: #8000ff">public</span><span style="background: white; color: navy">:
</span><span style="background: white">    </span><span style="background: white; color: black">unrecognized_identifier</span><span style="background: white; color: navy">&amp;</span><span style="background: white"> </span><span style="background: white; color: black">token</span><span style="background: white; color: navy">(</span><span style="background: white"> </span><span style="background: white; color: black">token_t</span><span style="background: white"> </span><span style="background: white; color: black">tok</span><span style="background: white"> </span><span style="background: white; color: navy">);
</span><span style="background: white">    
</span><span style="background: white; color: #8000ff">private</span><span style="background: white; color: navy">:
</span><span style="background: white">    </span><span style="background: white; color: #8000ff">static</span><span style="background: white"> </span><span style="background: white; color: #8000ff">int</span><span style="background: white"> </span><span style="background: white; color: black">level</span><span style="background: white; color: navy">;
</span><span style="background: white">    </span><span style="background: white; color: #8000ff">static</span><span style="background: white"> </span><span style="background: white; color: #8000ff">int</span><span style="background: white"> </span><span style="background: white; color: black">id</span><span style="background: white; color: navy">;</span><span style="background: white; color: navy">
</span><span style="background: white">    </span><span style="background: white; color: #8000ff">static</span><span style="background: white"> </span><span style="background: white; color: black">std</span><span style="background: white; color: navy">::</span><span style="background: white; color: black">string</span><span style="background: white"> </span><span style="background: white; color: black">description_template</span><span style="background: white; color: navy">;
</span><span style="background: white">    
</span><span style="background: white; color: #8000ff">private</span><span style="background: white; color: navy">:
</span><span style="background: white">    </span><span style="background: white; color: black">std</span><span style="background: white; color: navy">::</span><span style="background: white; color: black">string</span><span style="background: white"> </span><span style="background: white; color: black">ident</span><span style="background: white; color: navy">;
</span><span style="background: white">    </span><span style="background: white; color: black">size_t</span><span style="background: white">      </span><span style="background: white; color: black">row</span><span style="background: white; color: navy">,</span><span style="background: white"> </span><span style="background: white; color: black">col</span><span style="background: white; color: navy">;
</span><span style="background: white">    </span><span style="background: white; color: green">// Other properties
</span><span style="background: white; color: navy">};</span></pre>
<p>这样的好处在于可以用Combinator的风格来撰写错误信息。例如这样：</p>
<p>diagnostic_chat.report&lt;unrecognized_identifier&gt;().token( err_tok );
<p>并且由于编译器的保证也比较不容易写错。
<p>&nbsp; <p>但是这种写法也有一个很关键的问题，需要为每个错误都定义一个类，工作量很大。SASL对这一问题的处理，自然是传统的大杀器：运用脚本进行生成。
<p>Clang使用了它内置的代码生成工具td来完成生成的工作。
<p>&nbsp; <p>3. 诊断信息管理器Diagnostic Chat
<p>Chat是诊断信息的管理工具。它主要要完成以下需求：添加和清理诊断信息，以及在诊断信息的添加清理时提供回调操作。
<p>后者是很有用的，尤其是在调试编译器的时候。你得分清楚究竟是真正的程序错误呢，还是编译器出了错。
<p>Diagnostic Chat的原型如下：<pre class="code"><span style="background: white; color: #8000ff">class</span><span style="background: white"> </span><span style="background: white; color: black">diagnostic_chat
</span><span style="background: white"></span><span style="background: white; color: navy">{
</span><span style="background: white"></span><span style="background: white; color: #8000ff">public</span><span style="background: white; color: navy">:
</span><span style="background: white">    </span><span style="background: white; color: #8000ff">template</span><span style="background: white"> </span><span style="background: white; color: navy">&lt;</span><span style="background: white; color: #8000ff">typename</span><span style="background: white"> </span><span style="background: white; color: black">T</span><span style="background: white; color: navy">&gt;</span><span style="background: white"> </span><span style="background: white; color: black">T</span><span style="background: white; color: navy">&amp;</span><span style="background: white"> </span><span style="background: white; color: black">report</span><span style="background: white; color: navy">();
</span><span style="background: white">    </span><span style="background: white; color: #8000ff">void</span><span style="background: white"> </span><span style="background: white; color: black">add_report_diagnostic_handler</span><span style="background: white; color: navy">(</span><span style="background: white"> </span><span style="background: white; color: black">DiagnosticHandlerT</span><span style="background: white"> </span><span style="background: white; color: black">handler</span><span style="background: white"> </span><span style="background: white; color: navy">);
</span><span style="background: white"></span><span style="background: white; color: navy">};</span></pre>
<p>同时，我们也将Treat Warning As Error，Error Count，Disable Warning，Stop compiling when error occurs等状态和功能所需要的支持添加到Chat中。
<p>所以，Chat除了提供管理之外，也要具有相应的诊断信息的统计功能。
<p>&nbsp; <p>4. 过滤器Diagnostic Filter
<p>Filter主要配合IDE使用，从Chat中取出符合条件的诊断信息。Error Count和Disable Warnings等功能也可以通过它来完成。
<p>&nbsp; <p>5. Formatter
<p>Formatter用于将DiagnosticItems中的信息转换成人可读的字符串。目前SASL只打算支持Visual Studio的格式，但是相信支持GCC的格式以更好的和Eclipse等第三方IDE集成并不困难。
<p>在C#里面，我们可以用“We need ‘{0}’ not ‘{1}’.”这样的方式来分离description template并延期的产生格式化的字符串。但是在C++中，这种做法并不容易。C的sprintf很难具有延期、渐增的绑定模板的特定，对自定义类型的字符串化的支持也不足，类型安全也比较差；而stream的话，也会面临着将好端端的格式化字符串割裂的问题。SASL使用了boost.format，从一定程度上搞定了这两个问题，从而像C#一样，使用格式化字符串的功能。</p>
			</div>
			
			<div class="postFoot">
				posted @ <a href="http://www.cppblog.com/lingjingqiu/archive/2012/03/08/167444.html" Title = "permalink">2012-03-08 21:25</a> 空明流转 阅读(1006) | <a href="http://www.cppblog.com/lingjingqiu/archive/2012/03/08/167444.html#FeedBack" Title = "comments, pingbacks, trackbacks">评论 (0)</a> |&nbsp;<a href="http://www.cppblog.com/lingjingqiu/admin/EditPosts.aspx?postid=167444">编辑</a>&nbsp;<a href="http://www.cppblog.com/lingjingqiu/AddToFavorite.aspx?id=167444">收藏</a>
			</div>
		</div>
		<br>
	
	
		
<p class="date">
	2012年3月6日		  
	<a id="_a8d42b5f172_HomePageDays_DaysList_ctl01_DayItem_ImageLink" Title="Day Archive" href="http://www.cppblog.com/lingjingqiu/archive/2012/03/06.html" style="display:inline-block;border-width:0px;height:15px;width:12px;">#</a>
</p>


		<div class="post">
			<div class="postTitle">
				<a id="_a8d42b5f172_HomePageDays_DaysList_ctl01_DayItem_DayList_ctl00_TitleUrl" href="http://www.cppblog.com/lingjingqiu/archive/2012/03/06/167256.html">SALVIA 0.3 发布：Pixel Shader添加了tex2D的支持</a>
			</div>
			
			<div class="postText">
				<p>SALVIA 0.3 出炉了！</p> <p><font color="#ff0000"><strong>这是自2010年8月份以来， SALVIA Milestone 1.0之后最重要的发布！</strong></font></p> <p>0.3开始，SALVIA正式支持了Pixel Shader。</p> <p>自2008年中开始的Shader设计与实现工作基本完成。</p> <p>未来一年内，SALVIA的工作将集中以下几点：</p> <ol> <li>在Shader编译器的完善上，比如友善的语法和语义错误提示。</li> <li>提升与管线的集成度，进而充分提升性能。</li> <li>编译器和编译器生成代码的优化，提高Shader的编译速度和运行速度。</li> <li>新的图形特性，如各向异性过滤等。</li></ol> <p>随着SALVIA整体的逐渐成熟，我们也希望有其他的朋友能来参与和支持这个项目，一同进步。</p> <p>如果您希望参与到这个项目中，请mail联系我：wuye9036 __at__ gmail dota com.</p> <p>&nbsp;</p> <p><a href="http://www.cppblog.com/images/cppblog_com/lingjingqiu/Windows-Live-Writer/SALVIA-0.3-_BB28/tex2D_2.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="tex2D" border="0" alt="tex2D" src="http://www.cppblog.com/images/cppblog_com/lingjingqiu/Windows-Live-Writer/SALVIA-0.3-_BB28/tex2D_thumb.png" width="680" height="264"></a></p>
			</div>
			
			<div class="postFoot">
				posted @ <a href="http://www.cppblog.com/lingjingqiu/archive/2012/03/06/167256.html" Title = "permalink">2012-03-06 17:41</a> 空明流转 阅读(869) | <a href="http://www.cppblog.com/lingjingqiu/archive/2012/03/06/167256.html#FeedBack" Title = "comments, pingbacks, trackbacks">评论 (0)</a> |&nbsp;<a href="http://www.cppblog.com/lingjingqiu/admin/EditPosts.aspx?postid=167256">编辑</a>&nbsp;<a href="http://www.cppblog.com/lingjingqiu/AddToFavorite.aspx?id=167256">收藏</a>
			</div>
		</div>
		<br>
	
	
		
<p class="date">
	2012年2月24日		  
	<a id="_a8d42b5f172_HomePageDays_DaysList_ctl02_DayItem_ImageLink" Title="Day Archive" href="http://www.cppblog.com/lingjingqiu/archive/2012/02/24.html" style="display:inline-block;border-width:0px;height:15px;width:12px;">#</a>
</p>


		<div class="post">
			<div class="postTitle">
				<a id="_a8d42b5f172_HomePageDays_DaysList_ctl02_DayItem_DayList_ctl00_TitleUrl" href="http://www.cppblog.com/lingjingqiu/archive/2012/02/24/166438.html">开源软件光栅化渲染器SALVIA 0.2.5发布：为Pixel Shader添加了分支与循环的支持</a>
			</div>
			
			<div class="postText">
				<p>SALVIA 0.2.5 发布！<br></p> <p>项目主页： <a href="http://code.google.com/p/softart/">http://code.google.com/p/softart/</a><br></p> <p>更新列表如下：</p> <p><br><strong>0.2.2 - 0.2.5 (Feb 24, 2012)</strong></p> <ul> <li>版本名称发生变化，从原先的Milestone X fix Y的命名方式正式更新为与主版本相同的版本号序列。  <li>取消了对DirectX的强制依赖。  <li>添加了对Visual C++ Express的支持  <li>Pixel Shader 进一步增强：</li></ul>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1. 提供了对分支语句 <strong>if</strong> 的支持&nbsp;&nbsp; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2. 支持 <strong>for, while, do-while</strong> 循环<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 3. 添加了新的内建函数：<strong>ddx ddy dot cross sqrt</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 4. 添加了纹理取样函数<strong>tex2D</strong>的原型  <ul> <li>对Rasterizer进行了进一步的优化  <li>修正了以下问题：</li></ul>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1. 在x86上执行vertex shader时可能会Crash的问题<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2. 不能再build配置文件中指定CMake路径的问题<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 3. 一些表达式调用时报告函数重载错误的问题
			</div>
			
			<div class="postFoot">
				posted @ <a href="http://www.cppblog.com/lingjingqiu/archive/2012/02/24/166438.html" Title = "permalink">2012-02-24 16:56</a> 空明流转 阅读(1015) | <a href="http://www.cppblog.com/lingjingqiu/archive/2012/02/24/166438.html#FeedBack" Title = "comments, pingbacks, trackbacks">评论 (0)</a> |&nbsp;<a href="http://www.cppblog.com/lingjingqiu/admin/EditPosts.aspx?postid=166438">编辑</a>&nbsp;<a href="http://www.cppblog.com/lingjingqiu/AddToFavorite.aspx?id=166438">收藏</a>
			</div>
		</div>
		<br>
	
	
		
<p class="date">
	2011年12月26日		  
	<a id="_a8d42b5f172_HomePageDays_DaysList_ctl03_DayItem_ImageLink" Title="Day Archive" href="http://www.cppblog.com/lingjingqiu/archive/2011/12/26.html" style="display:inline-block;border-width:0px;height:15px;width:12px;">#</a>
</p>


		<div class="post">
			<div class="postTitle">
				<a id="_a8d42b5f172_HomePageDays_DaysList_ctl03_DayItem_DayList_ctl00_TitleUrl" href="http://www.cppblog.com/lingjingqiu/archive/2011/12/26/162868.html">SALVIA正式支持一站式编译</a>
			</div>
			
			<div class="postText">
				<p>SALVIA在Milestone 1.2 Fix 2中，正式提供了一站式编译脚本的支持。</p> <p>项目主页：<a title="http://code.google.com/p/softart/" href="http://code.google.com/p/softart/">http://code.google.com/p/softart/</a></p> <p>新的编译步骤如下：</p> <p>1. 下载Python 3.2并安装。</p> <p>3. 下载boost 1.44或更新的版本，解压到某个目录下。</p> <p>5. Clone或下载SALVIA代码包，执行根目录下的build_all.py文件。第一次运行的时候会生成一个project.py，编辑project.py设置相应属性，包括boost代码目录，编译器，configuration等。</p> <p>6. 再次运行build_all.py，编译程序。</p>
			</div>
			
			<div class="postFoot">
				posted @ <a href="http://www.cppblog.com/lingjingqiu/archive/2011/12/26/162868.html" Title = "permalink">2011-12-26 21:09</a> 空明流转 阅读(1403) | <a href="http://www.cppblog.com/lingjingqiu/archive/2011/12/26/162868.html#FeedBack" Title = "comments, pingbacks, trackbacks">评论 (5)</a> |&nbsp;<a href="http://www.cppblog.com/lingjingqiu/admin/EditPosts.aspx?postid=162868">编辑</a>&nbsp;<a href="http://www.cppblog.com/lingjingqiu/AddToFavorite.aspx?id=162868">收藏</a>
			</div>
		</div>
		<br>
	
	
		
<p class="date">
	2011年11月22日		  
	<a id="_a8d42b5f172_HomePageDays_DaysList_ctl04_DayItem_ImageLink" Title="Day Archive" href="http://www.cppblog.com/lingjingqiu/archive/2011/11/22.html" style="display:inline-block;border-width:0px;height:15px;width:12px;">#</a>
</p>


		<div class="post">
			<div class="postTitle">
				<a id="_a8d42b5f172_HomePageDays_DaysList_ctl04_DayItem_DayList_ctl00_TitleUrl" href="http://www.cppblog.com/lingjingqiu/archive/2011/11/22/160736.html">LLVM随笔</a>
			</div>
			
			<div class="postText">
				<div>
<strong>1. </strong>LLVM在x86和x64下都和Microsft C++ ABI的吻合程度不够。目前已知在以下情况下会出错：<br /><ul><li>
参数为结构体的</li><li>
返回值为结构体 </li></ul>
以下情况我没有完整测试过：
<br /><ul><li>
返回值为单个浮点 </li><li>
返回值为向量（_m128 / &lt;4 x float&gt;） </li><li>
参数为向量（_m128 / &lt;4xfloat&gt;）
</li></ul>
所以建议大家统一将是结构体的返回值和参数以引用/指针的形式传递。<br />
对于大小为4个或者8个字节的结构体如果希望按值传递，那么需要在LLVM函数的签名上使用i32/i64作为参数类型，并使用bit cast在函数体内强制转换成结构体。<br /><br />
<strong>2. </strong>LLVM提供了很多的Intrinsics，例如SSE指令集。它在Module上提供了一个getOrCreateTargetIntrinsic，但实际上这个函数是坑爹的。有两个方法可以正确的创建并获取指令集：
<br /><ul><li>
使用Module::getOrInsertFunction( intrinsic_name, intrinsic_function_type )。它会自动识别intrinsic的名称并创建function或者是intrinsic。指令需要使用全名。例如 llvm.x86.sse.sqrt.ps.</li><li>
或者使用Ilvm::Intrinsic::getDeclaration( id ) 来创建。这个id可以在intrinsics.gen中找到。</li></ul>
因为LLVM生成的Intrinsic是全平台的，所以可以在x86上指定ARM汇编的生成，反之亦然。<br /><br />
<strong>3.</strong> 默认情况下，LLVM的JIT是不会启用InliningPass的，Optimization Level指定为Aggressive也不会。这意味着inlinehint和alwaysinline都是失效的。如果需要inlining得自己修改JIT的源代码。<br /><br />
<strong>4. </strong>UndefValue是个好东西。这个常量可以使生成的汇编少一条初始化指令。比方说用0初始化，可能对应的汇编就是 xor reg, reg。如果用了Undef，那这条指令就没了。<br />
<strong><br />5.</strong> TypeBuilder很好用，只是不能生成struct等复杂的类型。不过你可以对它做一些修改以让它支持struct和vector。这个时候Boost.MPL就能派上用场了。不过要当心MPL带来漫长的编译时间。
</div>
			</div>
			
			<div class="postFoot">
				posted @ <a href="http://www.cppblog.com/lingjingqiu/archive/2011/11/22/160736.html" Title = "permalink">2011-11-22 21:04</a> 空明流转 阅读(1449) | <a href="http://www.cppblog.com/lingjingqiu/archive/2011/11/22/160736.html#FeedBack" Title = "comments, pingbacks, trackbacks">评论 (0)</a> |&nbsp;<a href="http://www.cppblog.com/lingjingqiu/admin/EditPosts.aspx?postid=160736">编辑</a>&nbsp;<a href="http://www.cppblog.com/lingjingqiu/AddToFavorite.aspx?id=160736">收藏</a>
			</div>
		</div>
		<br>
	
	
		
<p class="date">
	2011年8月17日		  
	<a id="_a8d42b5f172_HomePageDays_DaysList_ctl05_DayItem_ImageLink" Title="Day Archive" href="http://www.cppblog.com/lingjingqiu/archive/2011/08/17.html" style="display:inline-block;border-width:0px;height:15px;width:12px;">#</a>
</p>


		<div class="post">
			<div class="postTitle">
				<a id="_a8d42b5f172_HomePageDays_DaysList_ctl05_DayItem_DayList_ctl00_TitleUrl" href="http://www.cppblog.com/lingjingqiu/archive/2011/08/17/153655.html">LLVM的调用协议与内存对齐</a>
			</div>
			
			<div class="postText">
				<p>在设计一门语言与其他语言交互的API与ABI（Application Binary Interface，二进制接口）时，调用协议和内存对齐是两个无从回避的问题。</p> <p>本文将讨论如何在LLVM上生成正确的内存对齐和调用协议的代码。</p> <p>在这里为了方便和标准起见，假定应用LLVM的语言的Extending和Embedding的对象都是C。</p> <p><strong><font color="#0000ff">调用协议</font></strong></p> <p>先来讨论调用协议。调用协议用于保证调用方和被调用方在二进制/汇编一级上是相容的。合适的调用协议可以帮助构造出以下代码：</p> <table border="1" cellspacing="0" cellpadding="2" width="473"> <tbody> <tr> <td valign="top" width="471"><pre class="code"><span style="color: green">// Callee Signature of LLVM code
</span><span style="color: blue">void __cdecl </span><span style="color: #880000">foo</span>( <span style="color: blue">int </span><span style="color: navy">a</span>, <span style="color: blue">float </span><span style="color: navy">b</span>, <span style="color: blue">float4 </span><span style="color: navy">c</span>);

<span style="color: green">// C caller
</span><span style="color: blue">typedef void </span>(<span style="color: blue">__cdecl</span>* <span style="color: navy">fn_ptr</span>)(<span style="color: blue">int</span>, <span style="color: blue">float</span>, <span style="color: blue">float4</span>)
fn_ptr <span style="color: navy">p </span>= <span style="color: blue">static_cast</span>&lt;fn_ptr&gt;( get_jit_function(<span style="color: #a31515">"foo"</span>) );
<span style="color: navy">p</span>(1, 1.0, <span style="color: #880000">vec</span>);
</pre><a href="http://11011.net/software/vspaste"></a></td></tr></tbody></table>
<p>一般来说调用协议包括参数传递和返回值传递和堆栈平衡三个部分。在x86平台上的C/C++编译器中常见的调用协议有cdecl, fastcall和stdcall。具体的协议内容请参见MSDN。</p>
<p>在C++中还有一类特殊的调用协议thiscall，用于调用对象的成员函数。但是这一类调用协议不同的平台，不同的编译器实现皆有不同，既无书面标准，也无事实标准，再加上virtual call等复杂的情况存在，并不适合用于做跨语言的调用。</p>
<p>对于x64平台而言，在windows下和linux下分别有两种调用协议。</p>
<p>先来看x86。由于x86在cdecl和fastcall上是有着跨平台的标准的，因此LLVM对它的支持是比较完整的。程序只要在创建Function的时候指定Call Convention即可。</p>
<p>但是对于x64，LLVM的支持便不是那么完善。以windows为例，windows的x64调用协议要求以rcx，rdx，r8，r9寄存器传递前四个不大于64bit的参数，其余参数放在栈上。如果参数大于64bit，则要求传递它的指针。浮点使用xmm0-3来传递。但是对于LLVM而言，一旦参数大于64bit，它便会将整个对象而不是指针压到栈上传递。因此在遇到x64时，需要小心处理API部分的调用协议。</p>
<p>在这里，我们需要将所有超过64bit的结构体处理成指针（或者拷贝后处理成指针）传递。</p>
<p>同时，LLVM提供了readonly和byval两个参数属性（Attribute）来确保参数的值语义。前者意味着传入的指针所指向的值是不被修改的，（类似于T const*），而后者会对传入的指针做一份内存拷贝，确保写值不被传递出函数（类似于值拷贝）。这样，LLVM生成的函数便可以MSVC生成的x64代码正确调用了。</p>
<p><strong><font color="#0000ff">内存对齐</font></strong></p>
<p>与移动平台的体系结构相比，x86对内存对齐的条件算是相当宽松的了。大部分的指令对内存对齐基本上是没有特殊要求的。只有一些SIMD的指令会对内存对齐有所限定，例如movaps。</p>
<p>为了方便后端生成SIMD代码，LLVM提供了vector类型，例如vector&lt;float, 1&gt;。在代码生成的时候，vector会编译成最有可能的SIMD类型。因此在x86平台上，vector&lt;float, 1-4&gt;都被处理成类似于__m128的类型，更长的vector则被拆分成多个__m128类型。</p>
<p>这实际上意味着，所有的vector都应该遵循16Bytes对齐的原则。</p>
<p>考虑到我们的需求，类似于struct{ float[3]; }这样的结构，如果能表示为vector&lt;float, 3&gt;显然适合一些数学运算，例如shuffle，逐元素的add，sub，mul，同时LLVM指令的选择也更加灵活。但是显然，这个结构体有两个条件是不满足的：16字节对齐和16字节的大小（movups和movaps都是一次取16字节）。这会造成边界下读写的内存越界。因此非常可惜，这些数据必须表示为struct{ float ,float, float }。在读取的时候，也会生成正确的指令：movss。</p>
<p>那么，对于一般的非对齐的vec4应用vector&lt;float,4&gt;行不行呢？</p>
<p>答案是，很困难。对于LLVM而言，他们在设计的时候就没有过多的考虑vector在非对齐时候的应用。尽管load和store都能够指定alignment以生成非对齐的内存操作（例如movups）并且确实会起效，但是由于代码优化、临时存取等特性的存在，导致一些非load和store的内存操作仍然是要求对齐的（例如生成了addaps xmm, [addr]）。此时仍然有可能为非对齐的数据生成了内存对齐的指令。</p>
<p>因此综合权衡，SASL在API界面上使用了struct{float x,y,z,w;} 这样的ABI来表示数据，在代码生成时，会首先将struct的数据转换成vector，然后再执行其它的操作，兼顾ABI与SIMD；同时对于Intrinsic，由于并不暴露给Host，所以它们仍然尽可能使用Vector，便于LLVM进行优化。</p>
			</div>
			
			<div class="postFoot">
				posted @ <a href="http://www.cppblog.com/lingjingqiu/archive/2011/08/17/153655.html" Title = "permalink">2011-08-17 13:58</a> 空明流转 阅读(1560) | <a href="http://www.cppblog.com/lingjingqiu/archive/2011/08/17/153655.html#FeedBack" Title = "comments, pingbacks, trackbacks">评论 (2)</a> |&nbsp;<a href="http://www.cppblog.com/lingjingqiu/admin/EditPosts.aspx?postid=153655">编辑</a>&nbsp;<a href="http://www.cppblog.com/lingjingqiu/AddToFavorite.aspx?id=153655">收藏</a>
			</div>
		</div>
		<br>
	
	
		
<p class="date">
	2011年7月17日		  
	<a id="_a8d42b5f172_HomePageDays_DaysList_ctl06_DayItem_ImageLink" Title="Day Archive" href="http://www.cppblog.com/lingjingqiu/archive/2011/07/17.html" style="display:inline-block;border-width:0px;height:15px;width:12px;">#</a>
</p>


		<div class="post">
			<div class="postTitle">
				<a id="_a8d42b5f172_HomePageDays_DaysList_ctl06_DayItem_DayList_ctl00_TitleUrl" href="http://www.cppblog.com/lingjingqiu/archive/2011/07/17/151230.html">SALVIA Milestone 1.1 Fix 1: 新Sponza Demo</a>
			</div>
			
			<div class="postText">
				<p><strong><font color="#800080">项目主页：</font><br></strong> <ul> <li><a href="http://code.google.com/p/softart">http://code.google.com/p/softart</a></li></ul> <p><strong><font color="#800080">源码下载地址：</font></strong></p> <ul> <li>Zip格式：<a title="https://bitbucket.org/wuye9036/salvia/get/tip.tar.bz2" href="https://bitbucket.org/wuye9036/salvia/get/tip.tar.bz2">https://bitbucket.org/wuye9036/salvia/get/tip.tar.bz2</a></li> <li>Mercurial地址1：<a href="https://wuye9036@bitbucket.org/wuye9036/salvia">https://bitbucket.org/wuye9036/salvia</a></li> <li>Mercurial地址2：<a href="https://code.google.com/p/softart/">https://code.google.com/p/softart/</a></li></ul><strong><font color="#800080">版本：</font></strong> <ul> <li>Milestone 1.1 Fix 1</li></ul><strong><font color="#800080">更新记录：</font></strong> <ul> <li>添加了了新的Demo：Sponza  <li>Wavefront Obj添加了32位索引的支持。  <li>修复了 Wavefront Obj 错误的顶点共享的问题。  <li>修复了 Mip-map 计算错误的问题。  <li>修复了对多边形错误剔除的问题。</li></ul><strong><font color="#800080">Demo下载：</font><br></strong> <ul> <li><a href="http://code.google.com/p/softart/downloads/detail?name=SALVIA_BinDemo_2011_Jul_17.7z&amp;can=2&amp;q="><strong>下载地址</strong></a></li></ul> <p><font color="#800080"><strong>Demo截图</strong><strong>：</strong></font></p> <p><a href="http://www.cppblog.com/images/cppblog_com/lingjingqiu/WindowsLiveWriter/SALVIAMilestone1.1Fix1SponzaDemo_FA31/image_2.png"><img style="border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px" title="image" border="0" alt="image" src="http://www.cppblog.com/images/cppblog_com/lingjingqiu/WindowsLiveWriter/SALVIAMilestone1.1Fix1SponzaDemo_FA31/image_thumb.png" width="534" height="576"></a> </p> <p><a href="http://www.cppblog.com/images/cppblog_com/lingjingqiu/WindowsLiveWriter/SALVIAMilestone1.1Fix1SponzaDemo_FA31/image_4.png"><img style="border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px" title="image" border="0" alt="image" src="http://www.cppblog.com/images/cppblog_com/lingjingqiu/WindowsLiveWriter/SALVIAMilestone1.1Fix1SponzaDemo_FA31/image_thumb_1.png" width="534" height="576"></a> </p> <p><a href="http://www.cppblog.com/images/cppblog_com/lingjingqiu/WindowsLiveWriter/SALVIAMilestone1.1Fix1SponzaDemo_FA31/image_6.png"><img style="border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px" title="image" border="0" alt="image" src="http://www.cppblog.com/images/cppblog_com/lingjingqiu/WindowsLiveWriter/SALVIAMilestone1.1Fix1SponzaDemo_FA31/image_thumb_2.png" width="534" height="576"></a></p>
			</div>
			
			<div class="postFoot">
				posted @ <a href="http://www.cppblog.com/lingjingqiu/archive/2011/07/17/151230.html" Title = "permalink">2011-07-17 17:46</a> 空明流转 阅读(1103) | <a href="http://www.cppblog.com/lingjingqiu/archive/2011/07/17/151230.html#FeedBack" Title = "comments, pingbacks, trackbacks">评论 (0)</a> |&nbsp;<a href="http://www.cppblog.com/lingjingqiu/admin/EditPosts.aspx?postid=151230">编辑</a>&nbsp;<a href="http://www.cppblog.com/lingjingqiu/AddToFavorite.aspx?id=151230">收藏</a>
			</div>
		</div>
		<br>
	
	
		
<p class="date">
	2011年6月25日		  
	<a id="_a8d42b5f172_HomePageDays_DaysList_ctl07_DayItem_ImageLink" Title="Day Archive" href="http://www.cppblog.com/lingjingqiu/archive/2011/06/25.html" style="display:inline-block;border-width:0px;height:15px;width:12px;">#</a>
</p>


		<div class="post">
			<div class="postTitle">
				<a id="_a8d42b5f172_HomePageDays_DaysList_ctl07_DayItem_DayList_ctl00_TitleUrl" href="http://www.cppblog.com/lingjingqiu/archive/2011/06/25/149442.html">SALVIA的Vertex Shader已经可以work了</a>
			</div>
			
			<div class="postText">
				&nbsp;&nbsp;&nbsp;&nbsp; 摘要: 没啥好说的，有图有真相。上个逐像素光照的图。<br>基本上编译器的架构已经确定了，好多功能亟待实现。&nbsp;&nbsp;<a href='http://www.cppblog.com/lingjingqiu/archive/2011/06/25/149442.html'>阅读全文</a>
			</div>
			
			<div class="postFoot">
				posted @ <a href="http://www.cppblog.com/lingjingqiu/archive/2011/06/25/149442.html" Title = "permalink">2011-06-25 16:10</a> 空明流转 阅读(1696) | <a href="http://www.cppblog.com/lingjingqiu/archive/2011/06/25/149442.html#FeedBack" Title = "comments, pingbacks, trackbacks">评论 (5)</a> |&nbsp;<a href="http://www.cppblog.com/lingjingqiu/admin/EditPosts.aspx?postid=149442">编辑</a>&nbsp;<a href="http://www.cppblog.com/lingjingqiu/AddToFavorite.aspx?id=149442">收藏</a>
			</div>
		</div>
		<br>
	
	
		
<p class="date">
	2011年6月1日		  
	<a id="_a8d42b5f172_HomePageDays_DaysList_ctl08_DayItem_ImageLink" Title="Day Archive" href="http://www.cppblog.com/lingjingqiu/archive/2011/06/01.html" style="display:inline-block;border-width:0px;height:15px;width:12px;">#</a>
</p>


		<div class="post">
			<div class="postTitle">
				<a id="_a8d42b5f172_HomePageDays_DaysList_ctl08_DayItem_DayList_ctl00_TitleUrl" href="http://www.cppblog.com/lingjingqiu/archive/2011/06/01/147891.html">SALVIA项目简报（Aug 24,2010 - Jun,01,2011）</a>
			</div>
			
			<div class="postText">
				<p>该项目简报包含了近9个月SALVIA项目的工作进展。</p> <p>&nbsp;</p> <p><strong>项目与配置管理：</strong></p> <ul> <li>源代码管理系统由SVN更换至Mercurial。</li> <li>SoftArt更名为SALVIA。工程、命名空间及相关文档的更新将在Release之前完成。</li> <li>SALVIA启用了LOGO。LOGO在Release之前将视效果酌情调整。</li> <li>提交版本的LOG信息中启用符合Issue Tracker的格式，使得版本更新可以反映到Issue中。</li> <li>添加了完整的Unit Test工程，并启用Auto Test系统完成黑盒和回归测试。</li> <li>合并了LLVM的源码至版本库中；LLVM升级至2.9并进行了适当修改以和Boost的类型系统相一致。</li> <li>Boost升级至1.44或以上。</li> <li>添加了一个用于分析代码行数的小工具。</li> <li>更新了部分文档。</li></ul> <p><strong>Graphics管线：</strong></p> <ul> <li>绘制部分支持OpenGL。</li> <li>对Subdivision-based Rasterizer进行了进一步优化。</li> <li>更新了EFLIB的命名空间和文件组织。</li> <li>支持Centroid Sampling。</li> <li>支持2x与4xMSAA</li></ul> <p><strong>SALVIA Shading Language（SASL）：</strong></p> <ul> <li>使用新的Combinator-based Parser系统以替换Boost.Spirit，提升了编译速度并降低了目标文件大小。</li> <li>基于Boost.Wave，SASL提供了和C一致的预处理能力。</li> <li>添加了完整的Name Mangling和函数重载的能力。</li> <li>设计并完成了Shader与Host ABI的Memory Layout。现在Shader可以被高效的调用。</li> <li>提供了JIT的支持。</li> <li>提供了多编译器的Port。</li> <li>添加了命令行方式的Compiler。该Compiler接受源代码并输出为LLVM IR。</li> <li>设计并实现了多语言（General，SIMD Shader，SISD Shader）的编译框架。</li> <li>提供了可测试可回归的编译器实现。</li> <li>实现了下列语言要素：</li> <ul> <li>基本标量类型及其变量定义</li> <li>基本矢量类型及其变量定义</li> <li>结构体定义及其变量定义</li> <li>顺序语句</li> <li>函数声明与定义</li> <li>算术运算符</li> <li>成员运算符(.)</li> <li>Swizzle与Write Mask</li></ul></ul>
			</div>
			
			<div class="postFoot">
				posted @ <a href="http://www.cppblog.com/lingjingqiu/archive/2011/06/01/147891.html" Title = "permalink">2011-06-01 20:22</a> 空明流转 阅读(1259) | <a href="http://www.cppblog.com/lingjingqiu/archive/2011/06/01/147891.html#FeedBack" Title = "comments, pingbacks, trackbacks">评论 (0)</a> |&nbsp;<a href="http://www.cppblog.com/lingjingqiu/admin/EditPosts.aspx?postid=147891">编辑</a>&nbsp;<a href="http://www.cppblog.com/lingjingqiu/AddToFavorite.aspx?id=147891">收藏</a>
			</div>
		</div>
		<br>
	
	
		
<p class="date">
	2011年5月16日		  
	<a id="_a8d42b5f172_HomePageDays_DaysList_ctl09_DayItem_ImageLink" Title="Day Archive" href="http://www.cppblog.com/lingjingqiu/archive/2011/05/16.html" style="display:inline-block;border-width:0px;height:15px;width:12px;">#</a>
</p>


		<div class="post">
			<div class="postTitle">
				<a id="_a8d42b5f172_HomePageDays_DaysList_ctl09_DayItem_DayList_ctl00_TitleUrl" href="http://www.cppblog.com/lingjingqiu/archive/2011/05/16/146499.html">PPT: Introduction to SALVIA</a>
			</div>
			
			<div class="postText">
				<p>这个PPT主要描述了SALVIA的一些设计细节。这是关于软件渲染器SALVIA迄今为止最详细的文档，也是我近四年来的主要工作和研究内容之一。感谢MSRA的龚敏敏为此文做出的审校工作，他也是此项目的Owner之一。</p> <p>&nbsp;</p> <p><strong>在线的PPT：</strong></p><embed src=" http://www.docin.com/DocinViewer-203257824-144.swf" width="650" height="490" type="application/x-shockwave-flash" ALLOWFULLSCREEN="true" ALLOWSCRIPTACCESS="always"></embed> <p><strong>原PPT下载：</strong></p> <p><a title="http://www.cppblog.com/Files/lingjingqiu/Introduction%20to%20SALVIA.zip" href="http://www.cppblog.com/Files/lingjingqiu/Introduction%20to%20SALVIA.zip">http://www.cppblog.com/Files/lingjingqiu/Introduction%20to%20SALVIA.zip</a></p>
			</div>
			
			<div class="postFoot">
				posted @ <a href="http://www.cppblog.com/lingjingqiu/archive/2011/05/16/146499.html" Title = "permalink">2011-05-16 16:36</a> 空明流转 阅读(1543) | <a href="http://www.cppblog.com/lingjingqiu/archive/2011/05/16/146499.html#FeedBack" Title = "comments, pingbacks, trackbacks">评论 (1)</a> |&nbsp;<a href="http://www.cppblog.com/lingjingqiu/admin/EditPosts.aspx?postid=146499">编辑</a>&nbsp;<a href="http://www.cppblog.com/lingjingqiu/AddToFavorite.aspx?id=146499">收藏</a>
			</div>
		</div>
		<br>
	
	
<div style="text-align:right;margin-right:10px;"><a href="http://www.cppblog.com/lingjingqiu/default.html?OnlyTitle=1">仅列出标题</a>&nbsp;&nbsp;<a href="http://www.cppblog.com/lingjingqiu/default.html?page=2">下一页</a></div>

				
</div>

<p id="footer">
	Powered by: 
	<br />
	
	<a id="Footer1_Hyperlink3" NAME="Hyperlink1" href="http://www.cppblog.com/" style="font-family:Verdana;font-size:12px;">C++博客</a>
	<br />
	Copyright &copy; 空明流转
</p>
    
    </form>
	<script type="text/javascript" src="/script/ShowHidden.js"></script>   
	<script type="text/javascript">
	  var _gaq = _gaq || [];
	  _gaq.push(['_setAccount', 'UA-476124-5']);
	  _gaq.push(['_trackPageview']);

	  (function() {
		var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
		ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
		var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
	  })();
	</script>
</body>
</html>
