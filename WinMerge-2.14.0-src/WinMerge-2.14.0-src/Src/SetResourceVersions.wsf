<job>

/*
 SetLanguageVersions.wsf

 Created: 2005-05-08, Perry Rapp
 Edited:  2006-03-08, Perry Rapp

 This script prompts the user for a new version number
 and then sets it as the ProductVersion in the version resource
 in the main (English) rc and in all subordinate (translation) rc files.
 It also sets the FileVersion in the main (English) rc file, and clears
  the PrivateBuild flag (if it is the only one set), in the main rc file.

 RCS ID line follows -- this is updated by CVS
 $Id: SetResourceVersions.wsf 4740 2007-11-12 22:19:47Z gerundt $

*/

<script language="VBScript">
Function PromptBox(msg, title, defval)
  PromptBox = InputBox(msg, title, defval)
End Function
</script>


<script language="JavaScript">

// Globals
var ErrorFiles
var SuccessCount
var RunFromCmd

Main();

/***************************************************
 ** Check arguments and launch main worker
 ***************************************************/
function Main()
{
  RunFromCmd = false;
  if (WScript.FullName.match(/cscript.exe/i)) {
    RunFromCmd = true;
  }

  // If more than one argument, abort
  if (WScript.Arguments.Unnamed.Count > 1)
  {
    ShowUsage();
    return;
  }
  
  // If no arguments, prompt for new version
  var version
  if (WScript.Arguments.Unnamed.Count == 1)
  {
    version = WScript.Arguments.Unnamed(0);
  }
  else
  {
    var Message = "Enter new version number (eg, 1.2.3.4 or 1.2.3)";
    var Title = "Version Number";
    var defval = "";
    var result = PromptBox(Message, Title, defval);
    if (ltrim(result) == "")
      WScript.Quit();
    version = result;
  }

  var params = new Object;
  if (!DecodeVersion(version, params))
  {
      return;
  }

  // Take specified path, or default to current directory
  var path = WScript.Arguments.Named("path");
  if (path == null || path == "")
    path = GetCurrentDirectory();

  // Parameters for call to GetFileList
  var filespec = "^Merge.*\.rc$";
  var filespecExclude = "(Translation)|(bak)|(Merge2)";
  var recurse = true;
  
  
  var filelist = new Array();
  GetFileList(path, filespec, filespecExclude, recurse, filelist);

  ProcessFiles(filelist, params);


  var boxtype = 64;
  var result = "Applied to " + SuccessCount + " files";
  if (ErrorFiles.length > 0)
  {
    boxtype = 16;
    result = result + "\n" + "Errors: " + ErrorFiles;
  }
  
  PopupBox("Results", result, boxtype, 20);

}

/***************************************************
 ** Loop through all candidate files, processing each
 ***************************************************/
function ProcessFiles(filelist, params)
{
  for (var i=0; i<filelist.length; ++i)
  {
    var filepath = filelist[i].path;
    var filename = filelist[i].name;
    if(RunFromCmd) //If run from command line...
      WScript.Echo("Processing [" + filename + "]");
    ProcessFile(filepath, filename, params);
  }
}

/***************************************************
 ** Parse version string into four version numbers
 ***************************************************/
function DecodeVersion(version, params)
{
  //BUG: "1.2.3." is accepted as valid!
  var regex = /^(\d+)\.(\d+)\.(\d+)\.?(\d*)$/;
  var results= regex.exec(version)
  if (results == null || results.length!=5)
  {
    WScript.Echo("Bad version string (must be format 1.2.3.4 or 1.2.3): Aborting.");
    return false;
  }
  params.v1 = results[1];
  params.v2 = results[2];
  params.v3 = results[3];
  params.v4 = results[4];
  return true;  
}

/***************************************************
 ** Go through subdirectories retrieving matching files
 ***************************************************/
function GetFileList(path, filespec, filespecExclude, recurse, filelist)
{
  // Clear totals
  ErrorFiles = ""
  SuccessCount = 0

  // Regular expression for our files of interest
  var fileRegex = new RegExp(filespec);
  // Regular expression to exclude
  var nfileRegex = new RegExp(filespecExclude);

  RecurseFileList(path, fileRegex, nfileRegex, recurse, filelist);
}

/***************************************************
 ** Go through subdirectories retrieving matching files
 * This is the recursive workhorse
 ***************************************************/
function RecurseFileList(path, fileRegex, nfileRegex, recurse, filelist)
{
  var fso = new ActiveXObject("Scripting.FileSystemObject");
  var folder = fso.GetFolder(path);

  // Build list of desired files
  var eFiles = new Enumerator(folder.Files);
  for ( ; !eFiles.atEnd(); eFiles.moveNext())
  {
    var file = eFiles.item();
    if (file.Name.match(fileRegex) && !file.Name.match(nfileRegex))
    {
      var fileentry = new Object;
      fileentry.name = file.Name;
      fileentry.path = file.Path;
      filelist[filelist.length] = fileentry;
    }
  }

  if (!recurse)
    return;
  
  var eSubFolders = new Enumerator(folder.SubFolders);
  for ( ; !eSubFolders.atEnd(); eSubFolders.moveNext())
  {
    var subdir = eSubFolders.item();
    var subpath = subdir.Path;
    RecurseFileList(subpath, fileRegex, nfileRegex, recurse, filelist);
  }
}

/***************************************************
 ** Actually process RC file
 ***************************************************/
function ProcessFile(filepath, filename, params)
{

  var MainRc
  if (filename == "Merge.rc")
    MainRc = true;
  else
    MainRc = false;

  var ForReading=1;
  var ForWriting=2;

  var fso = new ActiveXObject("Scripting.FileSystemObject")
  
  var outfilepath = filepath + ".tmp";
  var bakfilepath = filepath + ".bak";

  var ifile = fso.OpenTextFile(filepath, ForReading, false);
  var ofile = fso.OpenTextFile(outfilepath, ForWriting, true);

  params.found1=0; // PRODUCTVERSION
  params.found2=0; // ProductVersion
  params.found3=0; // FILEVERSION
  params.found4=0; // FileVersion
  params.found5=0; // PrivateBuild 0x8L
  
  while (!ifile.atEndOfStream)
  {
      var line = ifile.ReadLine();
      line = ProcessLine(MainRc, line, params);
      ofile.WriteLine(line);
  }
  
  ifile.Close();
  ofile.Close();

  var ok
  if (!MainRc)
  {
    ok = (params.found1==1 && params.found2>0);
  }
  else
  {
    ok = (params.found1 == params.found2 == params.found3 == params.found4 == 1);
  }
  if (!ok)
  {
    if (ErrorFiles.length>0)
      ErrorFiles = ErrorFiles + ", ";
    ErrorFiles = ErrorFiles + filename;
  }
  else
  {
    SuccessCount = SuccessCount + 1;
    fso.CopyFile(filepath, bakfilepath);
    fso.CopyFile(outfilepath, filepath);
    fso.DeleteFile(outfilepath);
  }
}

/***************************************************
 ** Check line for substitutions & apply any
 ***************************************************/
function ProcessLine(MainRc, line, params)
{
 // Set Product Version value in all RC files
  var regexFixed = /^ *PRODUCTVERSION *\d+,\d+,\d+,\d+ *$/;
  if (regexFixed.test(line))
  {
    ++params.found1;
    if (params.found1 != 1)
    {
      return line;
    }
    var start = line.search(/\d+/);
    if (params.v4 != '')
      line = line.substring(0, start) 
        + params.v1 + "," + params.v2 + "," + params.v3 + "," + params.v4;
    else
      line = line.substring(0, start) 
        + params.v1 + "," + params.v2 + "," + params.v3 + ",0";
    return line;
  }

  var regexString = /^ *VALUE "ProductVersion", "(\d+).(\d+).(\d+).?(\d*)(\\0|)" *$/;
  if (regexString.test(line))
  {
    ++params.found2;
    // Allow multiple hits on this, as MergeCatalan.rc has more than one
    var start = line.search(/\d+/);
    if (params.v4 != '')
      line = line.substring(0, start) 
        + params.v1 + "." + params.v2 + "." + params.v3 + "." + params.v4 + "\"";
    else
      line = line.substring(0, start) 
        + params.v1 + "." + params.v2 + "." + params.v3 + "\"";
    return line;
  }

 // Stuff below (file version, PrivateBuild) is only for main RC file
  if (MainRc != true)
    return line;

  var regexFixed = /^ *FILEVERSION *\d+,\d+,\d+,\d+ *$/;
  if (regexFixed.test(line))
  {
    ++params.found3;
    if (params.found3 != 1)
    {
      return line;
    }
    var start = line.search(/\d+/);
    if (params.v4 != '')
      line = line.substring(0, start) 
        + params.v1 + "," + params.v2 + "," + params.v3 + "," + params.v4;
    else
      line = line.substring(0, start) 
        + params.v1 + "," + params.v2 + "," + params.v3 + ",0";
    return line;
  }

  var regexString = /^ *VALUE "FileVersion", "(\d+).(\d+).(\d+).?(\d*)(\\0|)" *$/;
  if (regexString.test(line))
  {
    ++params.found4;
    // Allow multiple hits on this, as MergeCatalan.rc has more than one
    var start = line.search(/\d+/);
    if (params.v4 != '')
      line = line.substring(0, start) 
        + params.v1 + "." + params.v2 + "." + params.v3 + "." + params.v4 + "\"";
    else
      line = line.substring(0, start) 
        + params.v1 + "." + params.v2 + "." + params.v3 + "\"";
    return line;
  }

 // Clear Private Build flag in release version
  var regexString = /^ *FILEFLAGS 0x8L$/
  if (regexString.test(line))
  {
    ++params.found5;
    if (params.found5 != 1)
    {
      return line;
    }
    var start = line.search(/8L/);
    line = line.substring(0, start) + "0L";
    return line;
  }


  return line;
}

/***************************************************
 ** Display syntax summary
 ***************************************************/
function ShowUsage()
{
  WScript.Echo("SetLanguageVersions [x.y.z(.w)]");
}

/***************************************************
 ** Retrieve current directory
 ***************************************************/
function GetCurrentDirectory()
{
  var oShell = WScript.CreateObject("WScript.Shell");
  return oShell.CurrentDirectory
}

/***************************************************
 ** Interactively test expressions
 ***************************************************/
function TestRegex(pattern)
{
  // Regular expression for our files of interest
  var regex = new RegExp(pattern);
  //regex.Pattern = pattern;
  do
  {
    var text
    text = PromptBox("Enter test text (or hit Cancel to quit)", "Test Regexp", "")
    if (text == "")
      return
    if (text.match(regex))
      WScript.Echo("Ok");
    else
      WScript.Echo("Nope");
  } while(1);
}


/***************************************************
 ** Put up message box
 ***************************************************/
function PopupBox(title, message, boxtype, timeout)
{
  if(!RunFromCmd) //If NOT run from command line...
  {
    var oShell = WScript.CreateObject("WScript.Shell");
    return oShell.Popup(message, timeout, title, boxtype);
  }
  else //If run from command line...
    WScript.Echo(message);
}

/****************************************************
 ** Display syntax summary
 ***************************************************/
function ReportError(filepath, filename, message)
{
  if (ErrorFiles.length > 0)
    ErrorFiles = ErrorFiles + "\n";
  ErrorFiles = ErrorFiles + "[" + filepath + "] " + message;
  WScript.Echo("ReportError: " + message);
}


/****************************************************
 ** Return copy with no leading spaces
 ***************************************************/
function ltrim(text)
{
 // skip leading
  var x=text;
  x=x.replace(/^\s*(.*)/, "$1");
//  x=x.replace(/(.*?)\s*$/, "$1");
  return x;
}

/***************************************************
 ** API constants
 ***************************************************/

</script>
</job>
